{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/Marketplace/Facets/MultiSend.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.25; \n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title  RAIR Diamond - Multi send facet\n/// @notice Tool to send multiple ERC20 tokens\ncontract MultiSendTool {\n    function _multiSendSameAmount(\n        address erc20Address,\n        address sender,\n        address payable[] calldata recipients,\n        uint amount\n    ) internal {\n        IERC20 token = IERC20(erc20Address);\n\t\tfor (uint i = 0; i < recipients.length; i++) {\n            token.transferFrom(sender, recipients[i], amount);\n        }\n    }\n\n    function _multiSend(\n        address erc20Address,\n        address sender,\n        address payable[] calldata recipients,\n        uint[] calldata amounts\n    ) internal {\n        require(recipients.length == amounts.length, \"MultiSend: Invalid array sizes\");\n        IERC20 token = IERC20(erc20Address);\n\t\tfor (uint i = 0; i < recipients.length; i++) {\n            token.transferFrom(sender, recipients[i], amounts[i]);\n        }\n    }\n\n\tfunction multiSendERC20(\n        address erc20Address,\n        address payable[] calldata recipients,\n        uint[] calldata amounts\n    ) external {\n        _multiSend(\n            erc20Address,\n            msg.sender,\n            recipients,\n            amounts\n        );\n\t}\n\n    function multiSendERC20From(\n        address erc20Address,\n        address sender,\n        address payable[] calldata recipients,\n        uint[] calldata amounts\n    ) external {\n        _multiSend(\n            erc20Address,\n            sender,\n            recipients,\n            amounts\n        );\n\t}\n\n    function multiSendERC20SameAmount(\n        address erc20Address,\n        address payable[] calldata recipients,\n        uint amount\n    ) external {\n        _multiSendSameAmount(\n            erc20Address,\n            msg.sender,\n            recipients,\n            amount\n        );\n\t}\n\n    function multiSendERC20FromSameAmount(\n        address erc20Address,\n        address sender,\n        address payable[] calldata recipients,\n        uint amount\n    ) external {\n        _multiSendSameAmount(\n            erc20Address,\n            sender,\n            recipients,\n            amount\n        );\n\t}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}