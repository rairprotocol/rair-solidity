{
  "address": "0x9498b23e964760364435C23c793e9352Ff4E2200",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deploymentIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "deploymentName",
          "type": "string"
        }
      ],
      "name": "DeployedContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractSymbol",
          "type": "string"
        }
      ],
      "name": "deployContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb4707ed6ca2cd9d3ae625b6a631bb7de3a32b5baa1c6b61e86670e98fae96ad",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x9498b23e964760364435C23c793e9352Ff4E2200",
    "transactionIndex": 40,
    "gasUsed": "1994738",
    "logsBloom": "0x
    "blockHash": "0xdb4676907912faf298c1fd2a21b485b8e6c5bc2b0baff656ab3675c022311534",
    "transactionHash": "0xeb4707ed6ca2cd9d3ae625b6a631bb7de3a32b5baa1c6b61e86670e98fae96ad",
    "logs": [],
    "blockNumber": 13040870,
    "cumulativeGasUsed": "7030412",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ba288d747cc1aa4c71ee545a11fd6010",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deploymentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deploymentName\",\"type\":\"string\"}],\"name\":\"DeployedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractSymbol\",\"type\":\"string\"}],\"name\":\"deployContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"DeployedContract(address,uint256,address,string)\":{\"params\":{\"deployerAddress\":\"Contains the address of the deployer of the contract \",\"deploymentAddress\":\"Contains the address where the contract was deployed\",\"deploymentIndex\":\"Contains the corresponding ID for the deployment\",\"deploymentName\":\"Contains the name of the deployed contract\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721 factory\",\"version\":1},\"userdoc\":{\"events\":{\"DeployedContract(address,uint256,address,string)\":{\"notice\":\"This event stores in the blockchain when a new contract is deployed\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Facet receives ERC777 tokens and deploys an ERC721 smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/facets/DeployerFacet.sol\":\"DeployerFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Factory/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary FactoryStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.DiamondFactory');\\n\\n    struct Layout {\\n        address[] creators;\\n\\t\\tmapping(address => address[]) creatorToContracts;\\n\\t\\tmapping(address => address) contractToCreator;\\n\\t\\tmapping(address => uint) deploymentCostForToken;\\n        address currentERC20;\\n        mapping(address => uint) currentUserPoints;\\n        mapping(address => uint) totalUserPoints;\\n        uint transferTimeLimit;\\n        address facetSource;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x23ade2969e313878dfae0dc7988a30ffb6961f04c3950724b474449327ddbcb7\",\"license\":\"GPL-3.0\"},\"contracts/Factory/facets/DeployerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { AccessControlEnumerable } from \\\"../../common/DiamondStorage/AccessControlEnumerable.sol\\\";\\nimport { RAIR721_Diamond } from \\\"../../tokens/RAIR-721/RAIR-ERC721.sol\\\";\\nimport { FactoryStorage } from \\\"../AppStorage.sol\\\";\\n\\n/// @title \\tERC721 factory\\n/// @notice\\tFacet receives ERC777 tokens and deploys an ERC721 smart contract\\ncontract DeployerFacet is AccessControlEnumerable {\\n\\t/// @notice This event stores in the blockchain when a new contract is deployed\\n    /// @param\\tdeployerAddress \\tContains the address of the deployer of the contract \\n    /// @param \\tdeploymentIndex \\tContains the corresponding ID for the deployment\\n    /// @param \\tdeploymentAddress \\tContains the address where the contract was deployed\\n\\t/// @param \\tdeploymentName \\t\\tContains the name of the deployed contract\\n\\tevent DeployedContract(\\n\\t\\taddress deployerAddress,\\n\\t\\tuint deploymentIndex,\\n\\t\\taddress deploymentAddress,\\n\\t\\tstring deploymentName\\n\\t);\\n\\n\\tfunction deployContract(\\n\\t\\tstring calldata contractName,\\n\\t\\tstring calldata contractSymbol\\n\\t) external {\\n\\t\\tFactoryStorage.Layout storage store = FactoryStorage.layout();\\n\\t\\trequire(\\n\\t\\t\\tIERC20(store.currentERC20).allowance(msg.sender, address(this)) >= store.deploymentCostForToken[store.currentERC20],\\n\\t\\t\\t'Deployer: Not allowed to transfer tokens'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIERC20(store.currentERC20).transferFrom(msg.sender, address(this), store.deploymentCostForToken[store.currentERC20]),\\n\\t\\t\\t'Deployer: Error transferring tokens'\\n\\t\\t);\\n\\n\\t\\taddress[] storage deploymentsFromOwner = store.creatorToContracts[msg.sender];\\n\\t\\tstore.totalUserPoints[msg.sender] += store.deploymentCostForToken[store.currentERC20];\\n\\t\\t\\n\\t\\tif (deploymentsFromOwner.length == 0) {\\n\\t\\t\\tstore.creators.push(msg.sender);\\n\\t\\t}\\n\\n\\t\\tRAIR721_Diamond newToken = new RAIR721_Diamond(contractName, contractSymbol, msg.sender, 30000);\\n\\t\\tdeploymentsFromOwner.push(address(newToken));\\n\\t\\tstore.contractToCreator[address(newToken)] = msg.sender;\\n\\t\\temit DeployedContract(msg.sender, deploymentsFromOwner.length - 1, address(newToken), contractName);\\n\\t}\\n}\",\"keccak256\":\"0x9fc2bf5e7dbecf4cfcb7c20a5d475854287bd3c983dd619f7a664bf6c1d728d2\",\"license\":\"GPL-3.0\"},\"contracts/common/DiamondStorage/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { AccessControlEnumerableStorage } from \\\"./AccessControlEnumerableStorage.sol\\\";\\n\\nabstract contract AccessControlEnumerable is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    \\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].at(index);\\n\\t}\\n\\t\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\tAccessControlEnumerableStorage.layout()._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x876db28aa285dd662a703c8bf6d0a9f2d3856046a85df76e86cfd545e00adb91\",\"license\":\"MIT\"},\"contracts/common/DiamondStorage/AccessControlEnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary AccessControlEnumerableStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.AccessControlEnumerable');\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) _roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x08d3921fe7d2296c619e195c3c6662e3ba79d325b9222f3fc94ac75ffc6eec01\",\"license\":\"MIT\"},\"contracts/diamondStandard/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"contracts/tokens/RAIR-721/AccessControlRoles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nabstract contract ERC721AccessControlRoles {\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n}\",\"keccak256\":\"0x0e0cff57250a7b36955e106678d96a52a5ff30f81daca4aec265e57b335087fc\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nlibrary ERC721Storage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.RAIR721');\\n\\n    struct product {\\n        uint startingToken;\\n        uint endingToken;\\n        uint mintableTokens;\\n        string name;\\n        uint[] rangeList;\\n    }\\n\\n    struct range {\\n        uint rangeStart;\\n        uint rangeEnd;\\n        uint tokensAllowed;\\n        uint mintableTokens;\\n        uint lockedTokens;\\n        uint rangePrice;\\n        string rangeName;\\n    }\\n\\n    struct Layout {\\n        // Base ERC721\\n        string _name;\\n        string _symbol;\\n        mapping(uint256 tokenId => address) _owners;\\n        mapping(address owner => uint256) _balances;\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n        // ERC721 enumerable extension\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n        // RAIR exclusive\\n        string baseURI;\\n        address factoryAddress;\\n        uint16 royaltyFee;\\n        product[] products;\\n        range[] ranges;\\n        mapping(uint => uint) tokenToProduct;\\n        mapping(uint => uint) tokenToRange;\\n        mapping(uint => string) uniqueTokenURI;\\n        mapping(uint => string) productURI;\\n        mapping(uint => bool) appendTokenIndexToProductURI;\\n        bool appendTokenIndexToBaseURI;\\n        mapping(uint => uint[]) tokensByProduct;\\n        string contractMetadataURI;\\n        mapping(uint => uint) rangeToProduct;\\n        mapping(uint => bool) _minted;\\n        // August 2022 - Metadata File Extension Update\\n        mapping(uint => string) rangeURI;\\n        mapping(uint => bool) appendTokenIndexToRangeURI;\\n        string _metadataExtension;\\n        // March 2024 - Optional trader role\\n        bool requiresTrader;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x5c1dacd45344afb85c863c85f27e20928c01951b96f3ac4096324b93183e0d31\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/RAIR-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\n// Interfaces\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport {IERC721Enumerable} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport {ERC165} from '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport {IDiamondLoupe} from \\\"../../diamondStandard/interfaces/IDiamondLoupe.sol\\\";\\nimport {ERC721Storage} from \\\"./AppStorage.sol\\\";\\nimport {ERC721AccessControlRoles} from \\\"./AccessControlRoles.sol\\\";\\nimport {AccessControlEnumerable} from \\\"../../common/DiamondStorage/AccessControlEnumerable.sol\\\";\\n\\ninterface Factory {\\n\\tfunction getFacetSource() view external returns(address);\\n}\\n\\n/// @title  RAIR ERC721 Diamond\\n/// @dev \\tFallback will get the facets from the factory\\n/// @author Juan M. Sanchez M.\\ncontract RAIR721_Diamond is ERC721AccessControlRoles, ERC165, AccessControlEnumerable {\\n\\t\\n\\tconstructor(\\n        string memory name_,\\n        string memory symbol,\\n        address creatorAddress_,\\n        uint16 creatorRoyalty_\\n    ) {\\n        ERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\n\\t\\tstore._name = name_;\\n\\t\\tstore._symbol = symbol;\\n\\n        store.requiresTrader = true;\\n\\t\\tstore.factoryAddress = msg.sender;\\n\\n\\t\\tstore.royaltyFee = creatorRoyalty_;\\n\\t\\t_setRoleAdmin(MINTER, CREATOR);\\n\\t\\t_setRoleAdmin(TRADER, CREATOR);\\n\\t\\t_grantRole(CREATOR, creatorAddress_);\\n\\t\\t_grantRole(MINTER, creatorAddress_);\\n\\t\\t_grantRole(TRADER, creatorAddress_);\\n\\t}\\n\\n\\t/// @notice Returns the address from where the contract was created\\n    /// @return factoryAddress Address of the factory\\n\\tfunction getFactoryAddress() public view returns (address factoryAddress) {\\n        factoryAddress = ERC721Storage.layout().factoryAddress;\\n\\t}\\n\\n\\t/// @notice This function allows us to know the URI of the contract \\n    /// @return contractMetadataURI Contains the string with all the URI, this string is saved in memory \\n\\tfunction contractURI() public view returns (string memory contractMetadataURI) {\\n        contractMetadataURI = ERC721Storage.layout().contractMetadataURI;\\n\\t}\\n\\n\\t/// @notice This function allows us to know if and interface is suported\\n\\t/// @param \\tinterfaceId Contains the facet addresses and function selectors\\n\\t/// @return bool contains the value for the interface, it could be true or false\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n        \\tinterfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n\\tfallback() external {\\n        Factory factory = Factory(ERC721Storage.layout().factoryAddress);\\n\\t\\taddress facet = IDiamondLoupe(factory.getFacetSource()).facetAddress(msg.sig);\\n\\t\\tassembly {\\n\\t\\t\\t// copy function selector and any arguments\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\t\\t\\t// execute function call using the facet\\n\\t\\t\\tlet result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n\\t\\t\\t// get any return value\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\t\\t\\t// return any return value or error back to the caller\\n\\t\\t\\tswitch result\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x0ac7622aa968571bdd0c64305927a5c2cb89dd11dee2642806aa39ccbd215e5e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506123218061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806391d148541161005b57806391d1485414610106578063ca15c87314610129578063d547741f1461013c578063e0bdf5831461014f57600080fd5b8063248a9ca31461008d5780632f2ff15d146100b357806336568abe146100c85780639010d07c146100db575b600080fd5b6100a061009b366004610b25565b610162565b6040519081526020015b60405180910390f35b6100c66100c1366004610b3e565b610184565b005b6100c66100d6366004610b3e565b6101a6565b6100ee6100e9366004610b7a565b610229565b6040516001600160a01b0390911681526020016100aa565b610119610114366004610b3e565b610257565b60405190151581526020016100aa565b6100a0610137366004610b25565b61028f565b6100c661014a366004610b3e565b6102b3565b6100c661015d366004610be5565b6102d0565b60009081526000805160206122ac833981519152602052604090206001015490565b61018d82610162565b610197813361065c565b6101a183836106c0565b505050565b6001600160a01b038116331461021b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102258282610757565b5050565b60008281526000805160206122cc8339815191526020526040812061024e90836107ec565b90505b92915050565b60009182526000805160206122ac833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526000805160206122cc83398151915260205260408120610251906107f8565b6102bc82610162565b6102c6813361065c565b6101a18383610757565b7f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883e546001600160a01b031660008181527f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883d6020908152604091829020548251636eb1769f60e11b815233600482015230602482015292517f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883a949193919263dd62ed3e92604480820193918290030181865afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610c51565b10156104165760405162461bcd60e51b815260206004820152602860248201527f4465706c6f7965723a204e6f7420616c6c6f77656420746f207472616e7366656044820152677220746f6b656e7360c01b6064820152608401610212565b6004818101546001600160a01b03166000818152600384016020526040908190205490516323b872dd60e01b815233938101939093523060248401526044830152906323b872dd906064016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610c6a565b6104fc5760405162461bcd60e51b815260206004820152602360248201527f4465706c6f7965723a204572726f72207472616e7366657272696e6720746f6b604482015262656e7360e81b6064820152608401610212565b336000818152600183016020908152604080832060048601546001600160a01b031684526003860183528184205494845260068601909252822080549193929091610548908490610ca9565b909155505080546000036105795781546001810183556000838152602090200180546001600160a01b031916331790555b6000868686863361753060405161058f90610b18565b61059e96959493929190610ce5565b604051809103906000f0801580156105ba573d6000803e3d6000fd5b508254600180820185556000858152602080822090930180546001600160a01b03199081166001600160a01b038716908117909255908252600288019093526040902080543393168317905584549293507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e97553926106379190610d34565b838a8a60405161064b959493929190610d47565b60405180910390a150505050505050565b6106668282610257565b6102255761067e816001600160a01b03166014610802565b610689836020610802565b60405160200161069a929190610daa565b60408051601f198184030181529082905262461bcd60e51b825261021291600401610e1f565b6106ca8282610257565b6102255760008281526000805160206122ac833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a460008281526000805160206122cc833981519152602052604090206101a19082610982565b6107618282610257565b156102255760008281526000805160206122ac833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526000805160206122cc833981519152602052604090206101a19082610997565b600061024e83836109ac565b6000610251825490565b6060826000610812846002610e52565b61081d906002610ca9565b67ffffffffffffffff81111561083557610835610e69565b6040519080825280601f01601f19166020018201604052801561085f576020820181803683370190505b509050600360fc1b8160008151811061087a5761087a610e7f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106108a9576108a9610e7f565b60200101906001600160f81b031916908160001a90535060006108cd856002610e52565b6108d8906001610ca9565b90505b6001811115610950576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061090c5761090c610e7f565b1a60f81b82828151811061092257610922610e7f565b60200101906001600160f81b031916908160001a90535060049290921c9161094981610e95565b90506108db565b50811561097a5760405163e22e27eb60e01b81526004810186905260248101859052604401610212565b949350505050565b600061024e836001600160a01b0384166109d6565b600061024e836001600160a01b038416610a25565b60008260000182815481106109c3576109c3610e7f565b9060005260206000200154905092915050565b6000818152600183016020526040812054610a1d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610251565b506000610251565b60008181526001830160205260408120548015610b0e576000610a49600183610d34565b8554909150600090610a5d90600190610d34565b9050808214610ac2576000866000018281548110610a7d57610a7d610e7f565b9060005260206000200154905080876000018481548110610aa057610aa0610e7f565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610ad357610ad3610eac565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610251565b6000915050610251565b6113e980610ec383390190565b600060208284031215610b3757600080fd5b5035919050565b60008060408385031215610b5157600080fd5b8235915060208301356001600160a01b0381168114610b6f57600080fd5b809150509250929050565b60008060408385031215610b8d57600080fd5b50508035926020909101359150565b60008083601f840112610bae57600080fd5b50813567ffffffffffffffff811115610bc657600080fd5b602083019150836020828501011115610bde57600080fd5b9250929050565b60008060008060408587031215610bfb57600080fd5b843567ffffffffffffffff80821115610c1357600080fd5b610c1f88838901610b9c565b90965094506020870135915080821115610c3857600080fd5b50610c4587828801610b9c565b95989497509550505050565b600060208284031215610c6357600080fd5b5051919050565b600060208284031215610c7c57600080fd5b81518015158114610c8c57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561025157610251610c93565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000610cf960808301888a610cbc565b8281036020840152610d0c818789610cbc565b6001600160a01b03959095166040840152505061ffff91909116606090910152949350505050565b8181038181111561025157610251610c93565b6001600160a01b0386811682526020820186905284166040820152608060608201819052600090610d7b9083018486610cbc565b979650505050505050565b60005b83811015610da1578181015183820152602001610d89565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610de2816017850160208801610d86565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610e13816028840160208801610d86565b01602801949350505050565b6020815260008251806020840152610e3e816040850160208701610d86565b601f01601f19169190910160400192915050565b808202811582820484141761025157610251610c93565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610ea457610ea4610c93565b506000190190565b634e487b7160e01b600052603160045260246000fdfe608060405234801561001057600080fd5b506040516113e93803806113e983398101604081905261002f916103ac565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a398061005b86826104d4565b506001810161006a85826104d4565b50601b81018054600160ff19909116179055600b810180546001600160b01b0319163361ffff60a01b191617600160a01b61ffff8516021790556100ca6000805160206113a9833981519152600080516020611389833981519152610142565b6100f06000805160206113c9833981519152600080516020611389833981519152610142565b6101086000805160206113898339815191528461019a565b6101206000805160206113a98339815191528461019a565b6101386000805160206113c98339815191528461019a565b5050505050610593565b60008281526000805160206113698339815191526020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101a48282610249565b610245576000828152600080516020611369833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a460008281527f4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1602052604090206102439082610283565b505b5050565b6000828152600080516020611369833981519152602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000610298836001600160a01b03841661029f565b9392505050565b60008181526001830160205260408120546102e65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561027d565b50600061027d565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261031557600080fd5b81516001600160401b038082111561032f5761032f6102ee565b604051601f8301601f19908116603f01168101908282118183101715610357576103576102ee565b816040528381526020925086602085880101111561037457600080fd5b600091505b838210156103965785820183015181830184015290820190610379565b6000602085830101528094505050505092915050565b600080600080608085870312156103c257600080fd5b84516001600160401b03808211156103d957600080fd5b6103e588838901610304565b955060208701519150808211156103fb57600080fd5b5061040887828801610304565b604087015190945090506001600160a01b038116811461042757600080fd5b606086015190925061ffff8116811461043f57600080fd5b939692955090935050565b600181811c9082168061045e57607f821691505b60208210810361047e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610243576000816000526020600020601f850160051c810160208610156104ad5750805b601f850160051c820191505b818110156104cc578281556001016104b9565b505050505050565b81516001600160401b038111156104ed576104ed6102ee565b610501816104fb845461044a565b84610484565b602080601f831160018114610536576000841561051e5750858301515b600019600386901b1c1916600185901b1785556104cc565b600085815260208120601f198616915b8281101561056557888601518255948401946001909101908401610546565b50858210156105835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dc7806105a26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806391d148541161008c578063d547741f11610066578063d547741f14610316578063e4fbb60914610329578063e8a3d48514610350578063fe6d812414610365576100cf565b806391d14854146102c0578063a9c2e36c146102d3578063ca15c87314610303576100cf565b806301ffc9a7146101ff578063175c4ef814610227578063248a9ca31461025c5780632f2ff15d1461026f57806336568abe146102825780639010d07c14610295575b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a445460408051631dbb5cf160e31b815290516001600160a01b0390921691600091839163eddae788916004808201926020929091908290030181865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610aed565b6040516366ffd66360e11b81526001600160e01b03196000351660048201526001600160a01b03919091169063cdffacc690602401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d79190610aed565b90503660008037600080366000845af43d6000803e8080156101f8573d6000f35b3d6000fd5b005b61021261020d366004610b0a565b61038c565b60405190151581526020015b60405180910390f35b61024e7f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b60405190815260200161021e565b61024e61026a366004610b34565b6103f9565b6101fd61027d366004610b4d565b61041b565b6101fd610290366004610b4d565b61043d565b6102a86102a3366004610b7d565b6104c0565b6040516001600160a01b03909116815260200161021e565b6102126102ce366004610b4d565b6104ec565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a44546001600160a01b03166102a8565b61024e610311366004610b34565b610524565b6101fd610324366004610b4d565b610548565b61024e7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b610358610565565b60405161021e9190610bc3565b61024e7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b14806103bd57506001600160e01b03198216635b5e139f60e01b145b806103d857506001600160e01b0319821663780e9d6360e01b145b806103f357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020610d52833981519152602052604090206001015490565b610424826103f9565b61042e8133610619565b610438838361067d565b505050565b6001600160a01b03811633146104b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bc8282610714565b5050565b6000828152600080516020610d72833981519152602052604081206104e590836107a9565b9392505050565b6000918252600080516020610d52833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600080516020610d72833981519152602052604081206103f3906107b5565b610551826103f9565b61055b8133610619565b6104388383610714565b60607f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39601501805461059690610bf6565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290610bf6565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b5050505050905090565b61062382826104ec565b6104bc5761063b816001600160a01b031660146107bf565b6106468360206107bf565b604051602001610657929190610c30565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401610bc3565b61068782826104ec565b6104bc576000828152600080516020610d52833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020610d7283398151915260205260409020610438908261093f565b61071e82826104ec565b156104bc576000828152600080516020610d52833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020610d72833981519152602052604090206104389082610954565b60006104e58383610969565b60006103f3825490565b60608260006107cf846002610cbb565b6107da906002610cd2565b67ffffffffffffffff8111156107f2576107f2610ce5565b6040519080825280601f01601f19166020018201604052801561081c576020820181803683370190505b509050600360fc1b8160008151811061083757610837610cfb565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061086657610866610cfb565b60200101906001600160f81b031916908160001a905350600061088a856002610cbb565b610895906001610cd2565b90505b600181111561090d576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106108c9576108c9610cfb565b1a60f81b8282815181106108df576108df610cfb565b60200101906001600160f81b031916908160001a90535060049290921c9161090681610d11565b9050610898565b5081156109375760405163e22e27eb60e01b815260048101869052602481018590526044016104a9565b949350505050565b60006104e5836001600160a01b038416610993565b60006104e5836001600160a01b0384166109e2565b600082600001828154811061098057610980610cfb565b9060005260206000200154905092915050565b60008181526001830160205260408120546109da575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103f3565b5060006103f3565b60008181526001830160205260408120548015610acb576000610a06600183610d28565b8554909150600090610a1a90600190610d28565b9050808214610a7f576000866000018281548110610a3a57610a3a610cfb565b9060005260206000200154905080876000018481548110610a5d57610a5d610cfb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a9057610a90610d3b565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103f3565b60009150506103f3565b6001600160a01b0381168114610aea57600080fd5b50565b600060208284031215610aff57600080fd5b81516104e581610ad5565b600060208284031215610b1c57600080fd5b81356001600160e01b0319811681146104e557600080fd5b600060208284031215610b4657600080fd5b5035919050565b60008060408385031215610b6057600080fd5b823591506020830135610b7281610ad5565b809150509250929050565b60008060408385031215610b9057600080fd5b50508035926020909101359150565b60005b83811015610bba578181015183820152602001610ba2565b50506000910152565b6020815260008251806020840152610be2816040850160208701610b9f565b601f01601f19169190910160400192915050565b600181811c90821680610c0a57607f821691505b602082108103610c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c68816017850160208801610b9f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610c99816028840160208801610b9f565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103f3576103f3610ca5565b808201808211156103f3576103f3610ca5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610d2057610d20610ca5565b506000190190565b818103818111156103f3576103f3610ca5565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d04f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1a26469706673582212201e1c6fa32553aa16ca4be57d28116848b5cedef970db987da13f6821b05f921264736f6c634300081900334f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d04f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1a26469706673582212204d9bf81419d17afa9998ff53ccbf51c4b8d2db6cb6e8a18dcbb8a6713ca1272264736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806391d148541161005b57806391d1485414610106578063ca15c87314610129578063d547741f1461013c578063e0bdf5831461014f57600080fd5b8063248a9ca31461008d5780632f2ff15d146100b357806336568abe146100c85780639010d07c146100db575b600080fd5b6100a061009b366004610b25565b610162565b6040519081526020015b60405180910390f35b6100c66100c1366004610b3e565b610184565b005b6100c66100d6366004610b3e565b6101a6565b6100ee6100e9366004610b7a565b610229565b6040516001600160a01b0390911681526020016100aa565b610119610114366004610b3e565b610257565b60405190151581526020016100aa565b6100a0610137366004610b25565b61028f565b6100c661014a366004610b3e565b6102b3565b6100c661015d366004610be5565b6102d0565b60009081526000805160206122ac833981519152602052604090206001015490565b61018d82610162565b610197813361065c565b6101a183836106c0565b505050565b6001600160a01b038116331461021b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102258282610757565b5050565b60008281526000805160206122cc8339815191526020526040812061024e90836107ec565b90505b92915050565b60009182526000805160206122ac833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526000805160206122cc83398151915260205260408120610251906107f8565b6102bc82610162565b6102c6813361065c565b6101a18383610757565b7f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883e546001600160a01b031660008181527f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883d6020908152604091829020548251636eb1769f60e11b815233600482015230602482015292517f3178d75a97455c722bbe6e3619364b9b8f446a5900d6fbcc8d92ea722276883a949193919263dd62ed3e92604480820193918290030181865afa158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610c51565b10156104165760405162461bcd60e51b815260206004820152602860248201527f4465706c6f7965723a204e6f7420616c6c6f77656420746f207472616e7366656044820152677220746f6b656e7360c01b6064820152608401610212565b6004818101546001600160a01b03166000818152600384016020526040908190205490516323b872dd60e01b815233938101939093523060248401526044830152906323b872dd906064016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610c6a565b6104fc5760405162461bcd60e51b815260206004820152602360248201527f4465706c6f7965723a204572726f72207472616e7366657272696e6720746f6b604482015262656e7360e81b6064820152608401610212565b336000818152600183016020908152604080832060048601546001600160a01b031684526003860183528184205494845260068601909252822080549193929091610548908490610ca9565b909155505080546000036105795781546001810183556000838152602090200180546001600160a01b031916331790555b6000868686863361753060405161058f90610b18565b61059e96959493929190610ce5565b604051809103906000f0801580156105ba573d6000803e3d6000fd5b508254600180820185556000858152602080822090930180546001600160a01b03199081166001600160a01b038716908117909255908252600288019093526040902080543393168317905584549293507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e97553926106379190610d34565b838a8a60405161064b959493929190610d47565b60405180910390a150505050505050565b6106668282610257565b6102255761067e816001600160a01b03166014610802565b610689836020610802565b60405160200161069a929190610daa565b60408051601f198184030181529082905262461bcd60e51b825261021291600401610e1f565b6106ca8282610257565b6102255760008281526000805160206122ac833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a460008281526000805160206122cc833981519152602052604090206101a19082610982565b6107618282610257565b156102255760008281526000805160206122ac833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526000805160206122cc833981519152602052604090206101a19082610997565b600061024e83836109ac565b6000610251825490565b6060826000610812846002610e52565b61081d906002610ca9565b67ffffffffffffffff81111561083557610835610e69565b6040519080825280601f01601f19166020018201604052801561085f576020820181803683370190505b509050600360fc1b8160008151811061087a5761087a610e7f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106108a9576108a9610e7f565b60200101906001600160f81b031916908160001a90535060006108cd856002610e52565b6108d8906001610ca9565b90505b6001811115610950576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061090c5761090c610e7f565b1a60f81b82828151811061092257610922610e7f565b60200101906001600160f81b031916908160001a90535060049290921c9161094981610e95565b90506108db565b50811561097a5760405163e22e27eb60e01b81526004810186905260248101859052604401610212565b949350505050565b600061024e836001600160a01b0384166109d6565b600061024e836001600160a01b038416610a25565b60008260000182815481106109c3576109c3610e7f565b9060005260206000200154905092915050565b6000818152600183016020526040812054610a1d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610251565b506000610251565b60008181526001830160205260408120548015610b0e576000610a49600183610d34565b8554909150600090610a5d90600190610d34565b9050808214610ac2576000866000018281548110610a7d57610a7d610e7f565b9060005260206000200154905080876000018481548110610aa057610aa0610e7f565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610ad357610ad3610eac565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610251565b6000915050610251565b6113e980610ec383390190565b600060208284031215610b3757600080fd5b5035919050565b60008060408385031215610b5157600080fd5b8235915060208301356001600160a01b0381168114610b6f57600080fd5b809150509250929050565b60008060408385031215610b8d57600080fd5b50508035926020909101359150565b60008083601f840112610bae57600080fd5b50813567ffffffffffffffff811115610bc657600080fd5b602083019150836020828501011115610bde57600080fd5b9250929050565b60008060008060408587031215610bfb57600080fd5b843567ffffffffffffffff80821115610c1357600080fd5b610c1f88838901610b9c565b90965094506020870135915080821115610c3857600080fd5b50610c4587828801610b9c565b95989497509550505050565b600060208284031215610c6357600080fd5b5051919050565b600060208284031215610c7c57600080fd5b81518015158114610c8c57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561025157610251610c93565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b608081526000610cf960808301888a610cbc565b8281036020840152610d0c818789610cbc565b6001600160a01b03959095166040840152505061ffff91909116606090910152949350505050565b8181038181111561025157610251610c93565b6001600160a01b0386811682526020820186905284166040820152608060608201819052600090610d7b9083018486610cbc565b979650505050505050565b60005b83811015610da1578181015183820152602001610d89565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610de2816017850160208801610d86565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610e13816028840160208801610d86565b01602801949350505050565b6020815260008251806020840152610e3e816040850160208701610d86565b601f01601f19169190910160400192915050565b808202811582820484141761025157610251610c93565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610ea457610ea4610c93565b506000190190565b634e487b7160e01b600052603160045260246000fdfe608060405234801561001057600080fd5b506040516113e93803806113e983398101604081905261002f916103ac565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a398061005b86826104d4565b506001810161006a85826104d4565b50601b81018054600160ff19909116179055600b810180546001600160b01b0319163361ffff60a01b191617600160a01b61ffff8516021790556100ca6000805160206113a9833981519152600080516020611389833981519152610142565b6100f06000805160206113c9833981519152600080516020611389833981519152610142565b6101086000805160206113898339815191528461019a565b6101206000805160206113a98339815191528461019a565b6101386000805160206113c98339815191528461019a565b5050505050610593565b60008281526000805160206113698339815191526020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6101a48282610249565b610245576000828152600080516020611369833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a460008281527f4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1602052604090206102439082610283565b505b5050565b6000828152600080516020611369833981519152602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6000610298836001600160a01b03841661029f565b9392505050565b60008181526001830160205260408120546102e65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561027d565b50600061027d565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261031557600080fd5b81516001600160401b038082111561032f5761032f6102ee565b604051601f8301601f19908116603f01168101908282118183101715610357576103576102ee565b816040528381526020925086602085880101111561037457600080fd5b600091505b838210156103965785820183015181830184015290820190610379565b6000602085830101528094505050505092915050565b600080600080608085870312156103c257600080fd5b84516001600160401b03808211156103d957600080fd5b6103e588838901610304565b955060208701519150808211156103fb57600080fd5b5061040887828801610304565b604087015190945090506001600160a01b038116811461042757600080fd5b606086015190925061ffff8116811461043f57600080fd5b939692955090935050565b600181811c9082168061045e57607f821691505b60208210810361047e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610243576000816000526020600020601f850160051c810160208610156104ad5750805b601f850160051c820191505b818110156104cc578281556001016104b9565b505050505050565b81516001600160401b038111156104ed576104ed6102ee565b610501816104fb845461044a565b84610484565b602080601f831160018114610536576000841561051e5750858301515b600019600386901b1c1916600185901b1785556104cc565b600085815260208120601f198616915b8281101561056557888601518255948401946001909101908401610546565b50858210156105835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610dc7806105a26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806391d148541161008c578063d547741f11610066578063d547741f14610316578063e4fbb60914610329578063e8a3d48514610350578063fe6d812414610365576100cf565b806391d14854146102c0578063a9c2e36c146102d3578063ca15c87314610303576100cf565b806301ffc9a7146101ff578063175c4ef814610227578063248a9ca31461025c5780632f2ff15d1461026f57806336568abe146102825780639010d07c14610295575b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a445460408051631dbb5cf160e31b815290516001600160a01b0390921691600091839163eddae788916004808201926020929091908290030181865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610aed565b6040516366ffd66360e11b81526001600160e01b03196000351660048201526001600160a01b03919091169063cdffacc690602401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d79190610aed565b90503660008037600080366000845af43d6000803e8080156101f8573d6000f35b3d6000fd5b005b61021261020d366004610b0a565b61038c565b60405190151581526020015b60405180910390f35b61024e7f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b60405190815260200161021e565b61024e61026a366004610b34565b6103f9565b6101fd61027d366004610b4d565b61041b565b6101fd610290366004610b4d565b61043d565b6102a86102a3366004610b7d565b6104c0565b6040516001600160a01b03909116815260200161021e565b6102126102ce366004610b4d565b6104ec565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a44546001600160a01b03166102a8565b61024e610311366004610b34565b610524565b6101fd610324366004610b4d565b610548565b61024e7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b610358610565565b60405161021e9190610bc3565b61024e7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b14806103bd57506001600160e01b03198216635b5e139f60e01b145b806103d857506001600160e01b0319821663780e9d6360e01b145b806103f357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020610d52833981519152602052604090206001015490565b610424826103f9565b61042e8133610619565b610438838361067d565b505050565b6001600160a01b03811633146104b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bc8282610714565b5050565b6000828152600080516020610d72833981519152602052604081206104e590836107a9565b9392505050565b6000918252600080516020610d52833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600080516020610d72833981519152602052604081206103f3906107b5565b610551826103f9565b61055b8133610619565b6104388383610714565b60607f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39601501805461059690610bf6565b80601f01602080910402602001604051908101604052809291908181526020018280546105c290610bf6565b801561060f5780601f106105e45761010080835404028352916020019161060f565b820191906000526020600020905b8154815290600101906020018083116105f257829003601f168201915b5050505050905090565b61062382826104ec565b6104bc5761063b816001600160a01b031660146107bf565b6106468360206107bf565b604051602001610657929190610c30565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401610bc3565b61068782826104ec565b6104bc576000828152600080516020610d52833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020610d7283398151915260205260409020610438908261093f565b61071e82826104ec565b156104bc576000828152600080516020610d52833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020610d72833981519152602052604090206104389082610954565b60006104e58383610969565b60006103f3825490565b60608260006107cf846002610cbb565b6107da906002610cd2565b67ffffffffffffffff8111156107f2576107f2610ce5565b6040519080825280601f01601f19166020018201604052801561081c576020820181803683370190505b509050600360fc1b8160008151811061083757610837610cfb565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061086657610866610cfb565b60200101906001600160f81b031916908160001a905350600061088a856002610cbb565b610895906001610cd2565b90505b600181111561090d576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106108c9576108c9610cfb565b1a60f81b8282815181106108df576108df610cfb565b60200101906001600160f81b031916908160001a90535060049290921c9161090681610d11565b9050610898565b5081156109375760405163e22e27eb60e01b815260048101869052602481018590526044016104a9565b949350505050565b60006104e5836001600160a01b038416610993565b60006104e5836001600160a01b0384166109e2565b600082600001828154811061098057610980610cfb565b9060005260206000200154905092915050565b60008181526001830160205260408120546109da575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103f3565b5060006103f3565b60008181526001830160205260408120548015610acb576000610a06600183610d28565b8554909150600090610a1a90600190610d28565b9050808214610a7f576000866000018281548110610a3a57610a3a610cfb565b9060005260206000200154905080876000018481548110610a5d57610a5d610cfb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a9057610a90610d3b565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103f3565b60009150506103f3565b6001600160a01b0381168114610aea57600080fd5b50565b600060208284031215610aff57600080fd5b81516104e581610ad5565b600060208284031215610b1c57600080fd5b81356001600160e01b0319811681146104e557600080fd5b600060208284031215610b4657600080fd5b5035919050565b60008060408385031215610b6057600080fd5b823591506020830135610b7281610ad5565b809150509250929050565b60008060408385031215610b9057600080fd5b50508035926020909101359150565b60005b83811015610bba578181015183820152602001610ba2565b50506000910152565b6020815260008251806020840152610be2816040850160208701610b9f565b601f01601f19169190910160400192915050565b600181811c90821680610c0a57607f821691505b602082108103610c2a57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c68816017850160208801610b9f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610c99816028840160208801610b9f565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103f3576103f3610ca5565b808201808211156103f3576103f3610ca5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610d2057610d20610ca5565b506000190190565b818103818111156103f3576103f3610ca5565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d04f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1a26469706673582212201e1c6fa32553aa16ca4be57d28116848b5cedef970db987da13f6821b05f921264736f6c634300081900334f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d04f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d1a26469706673582212204d9bf81419d17afa9998ff53ccbf51c4b8d2db6cb6e8a18dcbb8a6713ca1272264736f6c63430008190033",
  "devdoc": {
    "errors": {
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "DeployedContract(address,uint256,address,string)": {
        "params": {
          "deployerAddress": "Contains the address of the deployer of the contract ",
          "deploymentAddress": "Contains the address where the contract was deployed",
          "deploymentIndex": "Contains the corresponding ID for the deployment",
          "deploymentName": "Contains the name of the deployed contract"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "ERC721 factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DeployedContract(address,uint256,address,string)": {
        "notice": "This event stores in the blockchain when a new contract is deployed"
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "Facet receives ERC777 tokens and deploys an ERC721 smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}