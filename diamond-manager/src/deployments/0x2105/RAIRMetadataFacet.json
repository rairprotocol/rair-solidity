{
  "address": "0x92FBe344513e108B581170E73CFA352B729E47EA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "UpdatedContractURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedProductURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedRangeURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "UpdatedTokenURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedURIExtension",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "freezeMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndexToBaseURI",
          "type": "bool"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndexToProductURI",
          "type": "bool"
        }
      ],
      "name": "setCollectionURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extension",
          "type": "string"
        }
      ],
      "name": "setMetadataExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        }
      ],
      "name": "setRangeURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setUniqueURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "newURIs",
          "type": "string[]"
        }
      ],
      "name": "setUniqueURIBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "tokenToCollectionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc869a2d7c3ade4e2a24e27bfb5f93f784a3eae3479bb07d7f08fee793e9d3ab8",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x92FBe344513e108B581170E73CFA352B729E47EA",
    "transactionIndex": 34,
    "gasUsed": "1699128",
    "logsBloom": "0x
    "blockHash": "0x4c6d7d8da6665eea2d594c13518825cbb1de0fe852408dc7327dc916c4c8de38",
    "transactionHash": "0xc869a2d7c3ade4e2a24e27bfb5f93f784a3eae3479bb07d7f08fee793e9d3ab8",
    "logs": [],
    "blockNumber": 13040536,
    "cumulativeGasUsed": "6272786",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ba288d747cc1aa4c71ee545a11fd6010",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"UpdatedContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedProductURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedRangeURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"UpdatedTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newExtension\",\"type\":\"string\"}],\"name\":\"UpdatedURIExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndexToBaseURI\",\"type\":\"bool\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndexToProductURI\",\"type\":\"bool\"}],\"name\":\"setCollectionURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"}],\"name\":\"setMetadataExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"}],\"name\":\"setRangeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setUniqueURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"newURIs\",\"type\":\"string[]\"}],\"name\":\"setUniqueURIBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"tokenToCollectionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"UpdatedBaseURI(string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the tokens appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new  base identifier for all the tokens\"}},\"UpdatedContractURI(string)\":{\"params\":{\"newURI\":\"Contains the new identifier for the contract \"}},\"UpdatedProductURI(uint256,string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the token appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new identifier for the product\",\"productId\":\"Contains the index of the product to change\"}},\"UpdatedRangeURI(uint256,string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the token appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new identifier for the product\",\"rangeId\":\"Contains the index of the product to change\"}},\"UpdatedTokenURI(uint256,string)\":{\"params\":{\"newURI\":\"Contains the new identifier for the token\",\"tokenId\":\"Contains the index of the token appended to the URI\"}},\"UpdatedURIExtension(string)\":{\"details\":\"It will be appended ONLY if the token ID has to also be appended\",\"params\":{\"newExtension\":\"The new extension for all the URIs\"}}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"returns\":{\"_0\":\"string with the URI of the contract \"}},\"freezeMetadata(uint256)\":{\"details\":\"This function is only available to an account with a `CREATOR` role\",\"params\":{\"tokenId\":\"Token Index that will be given an URI\"}},\"setBaseURI(string,bool)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleCan be overriden by the specific token URI\",\"params\":{\"appendTokenIndexToBaseURI\":\"URI to be used\",\"newURI\":\"URI to be used\"}},\"setCollectionURI(uint256,string,bool)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance\",\"params\":{\"appendTokenIndexToProductURI\":\"If true, it will append the token index to the URI\",\"newURI\":\"New URI to be given\",\"productId\":\"Token Index that will be given an URI\"}},\"setContractURI(string)\":{\"details\":\"This function is only available to an account with a `CREATOR` role\",\"params\":{\"newURI\":\"New URI to be given\"}},\"setMetadataExtension(string)\":{\"details\":\"Must include the . before the extension\",\"params\":{\"extension\":\"Extension to be added at the end of all contract wide tokens\"}},\"setRangeURI(uint256,string,bool)\":{\"details\":\"Emits an event so there's provenance\",\"params\":{\"appendTokenIndex\":\"Flag to append the token index at the end of the new URI\",\"newURI\":\"New URI to be given\",\"rangeId\":\"Token Index that will be given an URI\"}},\"setUniqueURI(uint256,string)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance\",\"params\":{\"newURI\":\"New URI to be given\",\"tokenId\":\"Token Index that will be given an URI\"}},\"setUniqueURIBatch(uint256[],string[])\":{\"details\":\"This function is only available to an account with a `CREATOR` roleUses the single function so it also emits an eventThis function requires that all the tokens have a corresponding URI\",\"params\":{\"newURIs\":\"New URIs to be set\",\"tokenIds\":\"Token Indexes that will be given an URI\"}},\"tokenToCollectionIndex(uint256)\":{\"params\":{\"token\":\"Token ID to find\"},\"returns\":{\"tokenIndex\":\"which contains the corresponding token index\"}},\"tokenURI(uint256)\":{\"details\":\"Will return unique token URI or product URI or contract URI\",\"params\":{\"tokenId\":\"Token Index to look for\"},\"returns\":{\"_0\":\"string with the URI of the toke that we are using\"}}},\"title\":\"RAIR Metadata facet contract\",\"version\":1},\"userdoc\":{\"events\":{\"UpdatedBaseURI(string,bool,string)\":{\"notice\":\"This event stores in the blockchain when the base code of all the tokens has an update in its URI\"},\"UpdatedContractURI(string)\":{\"notice\":\"This event stores in the blockchain when a contract has a change in its URI\"},\"UpdatedProductURI(uint256,string,bool,string)\":{\"notice\":\"This event stores in the blockchain when a product has a change in its URI\"},\"UpdatedRangeURI(uint256,string,bool,string)\":{\"notice\":\"This event stores in the blockchain when a range has a change in its URI\"},\"UpdatedTokenURI(uint256,string)\":{\"notice\":\"This event stores in the blockchain when a token has a change in its URI\"},\"UpdatedURIExtension(string)\":{\"notice\":\"This event informs the new extension all metadata URIs will have appended at the end\"}},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"This function allow us to see the current URI of the contract\"},\"freezeMetadata(uint256)\":{\"notice\":\"This function use OpenSea's to freeze the metadata\"},\"setBaseURI(string,bool)\":{\"notice\":\"Sets the Base URI for ALL tokens\"},\"setCollectionURI(uint256,string,bool)\":{\"notice\":\"Gives an individual token an unique URI\"},\"setContractURI(string)\":{\"notice\":\"This function allow us to set a new contract URI\"},\"setMetadataExtension(string)\":{\"notice\":\"Updates the metadata extension added at the end of all tokens\"},\"setRangeURI(uint256,string,bool)\":{\"notice\":\"Gives all tokens within a range a specific URI\"},\"setUniqueURI(uint256,string)\":{\"notice\":\"Gives an individual token an unique URI\"},\"setUniqueURIBatch(uint256[],string[])\":{\"notice\":\"Updates the unique URI of all the tokens, but in a single transaction\"},\"tokenToCollectionIndex(uint256)\":{\"notice\":\"Returns the token index inside the product\"},\"tokenURI(uint256)\":{\"notice\":\"Returns a token's URI\"}},\"notice\":\"You can use this contract to administrate the metadata asociated to the Rair facet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR-721/Facets/RAIRMetadataFacet.sol\":\"RAIRMetadataFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/common/DiamondStorage/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { AccessControlEnumerableStorage } from \\\"./AccessControlEnumerableStorage.sol\\\";\\n\\nabstract contract AccessControlEnumerable is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    \\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].at(index);\\n\\t}\\n\\t\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\tAccessControlEnumerableStorage.layout()._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x876db28aa285dd662a703c8bf6d0a9f2d3856046a85df76e86cfd545e00adb91\",\"license\":\"MIT\"},\"contracts/common/DiamondStorage/AccessControlEnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary AccessControlEnumerableStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.AccessControlEnumerable');\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) _roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x08d3921fe7d2296c619e195c3c6662e3ba79d325b9222f3fc94ac75ffc6eec01\",\"license\":\"MIT\"},\"contracts/tokens/RAIR-721/AccessControlRoles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nabstract contract ERC721AccessControlRoles {\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n}\",\"keccak256\":\"0x0e0cff57250a7b36955e106678d96a52a5ff30f81daca4aec265e57b335087fc\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nlibrary ERC721Storage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.RAIR721');\\n\\n    struct product {\\n        uint startingToken;\\n        uint endingToken;\\n        uint mintableTokens;\\n        string name;\\n        uint[] rangeList;\\n    }\\n\\n    struct range {\\n        uint rangeStart;\\n        uint rangeEnd;\\n        uint tokensAllowed;\\n        uint mintableTokens;\\n        uint lockedTokens;\\n        uint rangePrice;\\n        string rangeName;\\n    }\\n\\n    struct Layout {\\n        // Base ERC721\\n        string _name;\\n        string _symbol;\\n        mapping(uint256 tokenId => address) _owners;\\n        mapping(address owner => uint256) _balances;\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n        // ERC721 enumerable extension\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n        // RAIR exclusive\\n        string baseURI;\\n        address factoryAddress;\\n        uint16 royaltyFee;\\n        product[] products;\\n        range[] ranges;\\n        mapping(uint => uint) tokenToProduct;\\n        mapping(uint => uint) tokenToRange;\\n        mapping(uint => string) uniqueTokenURI;\\n        mapping(uint => string) productURI;\\n        mapping(uint => bool) appendTokenIndexToProductURI;\\n        bool appendTokenIndexToBaseURI;\\n        mapping(uint => uint[]) tokensByProduct;\\n        string contractMetadataURI;\\n        mapping(uint => uint) rangeToProduct;\\n        mapping(uint => bool) _minted;\\n        // August 2022 - Metadata File Extension Update\\n        mapping(uint => string) rangeURI;\\n        mapping(uint => bool) appendTokenIndexToRangeURI;\\n        string _metadataExtension;\\n        // March 2024 - Optional trader role\\n        bool requiresTrader;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x5c1dacd45344afb85c863c85f27e20928c01951b96f3ac4096324b93183e0d31\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/Facets/RAIRMetadataFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ERC721Storage} from \\\"../AppStorage.sol\\\";\\nimport {ERC721AccessControlRoles} from \\\"../AccessControlRoles.sol\\\";\\nimport {AccessControlEnumerable} from \\\"../../../common/DiamondStorage/AccessControlEnumerable.sol\\\";\\n\\n/// @title  RAIR Metadata facet contract\\n/// @notice You can use this contract to administrate the metadata asociated to the Rair facet\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract RAIRMetadataFacet is ERC721AccessControlRoles, AccessControlEnumerable {\\n\\tusing Strings for uint256;\\n\\n\\t/// @notice This event stores in the blockchain when the base code of all the tokens has an update in its URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new  base identifier for all the tokens\\n\\t/// @param  appendTokenIndex \\tContains the index of the tokens appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedBaseURI(string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a token has a change in its URI\\n\\t/// @param  tokenId \\t\\t\\tContains the index of the token appended to the URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the token\\n\\tevent UpdatedTokenURI(uint tokenId, string newURI);\\n\\t/// @notice This event stores in the blockchain when a product has a change in its URI\\n\\t/// @param \\tproductId \\t\\t\\tContains the index of the product to change\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the product\\n\\t/// @param  appendTokenIndex \\tContains the index of the token appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedProductURI(uint productId, string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a range has a change in its URI\\n\\t/// @param \\trangeId \\t\\t\\tContains the index of the product to change\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the product\\n\\t/// @param  appendTokenIndex \\tContains the index of the token appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedRangeURI(uint rangeId, string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a contract has a change in its URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the contract \\n\\tevent UpdatedContractURI(string newURI);\\n\\t/// @notice This event informs the new extension all metadata URIs will have appended at the end\\n\\t/// @dev \\tIt will be appended ONLY if the token ID has to also be appended\\n\\t/// @param \\tnewExtension The new extension for all the URIs\\n    event UpdatedURIExtension(string newExtension);\\n\\n\\n\\t// For OpenSea's Freezing\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\n\\t/// @notice This function allows us to check if the token exist or not\\n\\t/// @param\\ttokenId\\tContains the index of the token that we want to verify \\n\\t/// @return bool Answer true if the token exist or false if not \\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn ERC721Storage.layout()._owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/// @notice\\tReturns the token index inside the product\\n\\t/// @param\\ttoken\\tToken ID to find\\n\\t/// @return tokenIndex which contains the corresponding token index\\n\\tfunction tokenToCollectionIndex(uint token) public view returns (uint tokenIndex) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\treturn token - store.products[store.tokenToProduct[token]].startingToken;\\n\\t}\\n\\n\\t/// @notice\\tUpdates the unique URI of all the tokens, but in a single transaction\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tUses the single function so it also emits an event\\n\\t/// @dev \\tThis function requires that all the tokens have a corresponding URI\\n\\t/// @param\\ttokenIds\\tToken Indexes that will be given an URI\\n\\t/// @param\\tnewURIs\\t\\tNew URIs to be set\\n\\tfunction setUniqueURIBatch(uint[] calldata tokenIds, string[] calldata newURIs) external onlyRole(CREATOR) {\\n\\t\\trequire(\\n\\t\\t\\ttokenIds.length == newURIs.length,\\n\\t\\t\\t\\\"RAIR ERC721: Token IDs and URIs should have the same length\\\"\\n\\t\\t);\\n\\t\\tfor (uint i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tsetUniqueURI(tokenIds[i], newURIs[i]);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\ttokenId\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\tNew URI to be given\\n\\tfunction setUniqueURI(uint tokenId, string calldata newURI) public onlyRole(CREATOR) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tstore.uniqueTokenURI[tokenId] = newURI;\\n\\t\\temit UpdatedTokenURI(tokenId, newURI);\\n\\t}\\n\\n\\t/// @notice  Updates the metadata extension added at the end of all tokens\\n    /// @dev     Must include the . before the extension\\n    /// @param extension     Extension to be added at the end of all contract wide tokens\\n    function setMetadataExtension(string calldata extension) external onlyRole(CREATOR) {\\n        require(\\n\\t\\t\\tbytes(extension)[0] == '.',\\n\\t\\t\\t\\\"RAIR ERC721: Extension must start with a '.'\\\"\\n\\t\\t);\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n        store._metadataExtension = extension;\\n        emit UpdatedURIExtension(store._metadataExtension);\\n    }\\n\\n\\t/// @notice\\tGives all tokens within a range a specific URI\\n    /// @dev\\tEmits an event so there's provenance\\n    /// @param\\trangeId\\t\\t\\t\\tToken Index that will be given an URI\\n    /// @param\\tnewURI\\t\\t    \\tNew URI to be given\\n    /// @param\\tappendTokenIndex\\tFlag to append the token index at the end of the new URI\\n    function setRangeURI(\\n        uint rangeId,\\n        string calldata newURI,\\n        bool appendTokenIndex\\n    ) public onlyRole(CREATOR) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n        store.rangeURI[rangeId] = newURI;\\n        store.appendTokenIndexToRangeURI[rangeId] = appendTokenIndex;\\n        emit UpdatedRangeURI(rangeId, newURI, appendTokenIndex, store._metadataExtension);\\n    }\\n\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\tproductId\\t\\t\\t\\t\\t\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\t\\t\\t\\t\\t\\t\\tNew URI to be given\\n\\t/// @param\\tappendTokenIndexToProductURI \\tIf true, it will append the token index to the URI\\n\\tfunction setCollectionURI(uint productId, string calldata newURI, bool appendTokenIndexToProductURI) public onlyRole(CREATOR) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tstore.productURI[productId] = newURI;\\n\\t\\tstore.appendTokenIndexToProductURI[productId] = appendTokenIndexToProductURI;\\n\\t\\temit UpdatedProductURI(\\n\\t\\t\\tproductId,\\n\\t\\t\\tnewURI,\\n\\t\\t\\tappendTokenIndexToProductURI,\\n\\t\\t\\tstore._metadataExtension\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice\\tThis function use OpenSea's to freeze the metadata\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param tokenId Token Index that will be given an URI\\n\\tfunction freezeMetadata(uint tokenId) public onlyRole(CREATOR) {\\n\\t\\temit PermanentURI(tokenURI(tokenId), tokenId);\\n\\t}\\n\\n\\t/// @notice\\tThis function allow us to set a new contract URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param newURI New URI to be given\\n\\tfunction setContractURI(string calldata newURI) external onlyRole(CREATOR) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tstore.contractMetadataURI = newURI;\\n\\t\\temit UpdatedContractURI(newURI);\\n\\t}\\n\\n\\t/// @notice\\tThis function allow us to see the current URI of the contract\\n\\t/// @return string with the URI of the contract \\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn ERC721Storage.layout().contractMetadataURI;\\n\\t}\\n\\t\\n\\t/// @notice\\tSets the Base URI for ALL tokens\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tCan be overriden by the specific token URI\\n\\t/// @param\\tnewURI\\tURI to be used\\n\\t/// @param\\tappendTokenIndexToBaseURI\\tURI to be used\\n\\tfunction setBaseURI(string calldata newURI, bool appendTokenIndexToBaseURI) external onlyRole(CREATOR) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tstore.baseURI = newURI;\\n\\t\\tstore.appendTokenIndexToBaseURI = appendTokenIndexToBaseURI;\\n\\t\\temit UpdatedBaseURI(newURI, appendTokenIndexToBaseURI, store._metadataExtension);\\n\\t}\\n\\n\\t/// @notice\\tReturns a token's URI\\n    /// @dev\\tWill return unique token URI or product URI or contract URI\\n    /// @param\\ttokenId\\t\\tToken Index to look for\\n\\t/// @return string with the URI of the toke that we are using\\n    function tokenURI(uint tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n        // Unique token URI\\n        string memory URI = store.uniqueTokenURI[tokenId];\\n        if (bytes(URI).length > 0) {\\n            return URI;\\n        }\\n\\n        // Range wide URI\\n        URI = store.rangeURI[store.tokenToRange[tokenId]];\\n        if (bytes(URI).length > 0) {\\n            if (store.appendTokenIndexToRangeURI[store.tokenToRange[tokenId]]) {\\n                return\\n\\t\\t\\t\\t\\tstring.concat(\\n\\t\\t\\t\\t\\t\\tURI,\\n\\t\\t\\t\\t\\t\\ttokenToCollectionIndex(tokenId).toString(),\\n\\t\\t\\t\\t\\t\\tstore._metadataExtension\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        // Collection wide URI\\n        URI = store.productURI[store.tokenToProduct[tokenId]];\\n        if (bytes(URI).length > 0) {\\n            if (store.appendTokenIndexToProductURI[store.tokenToProduct[tokenId]]) {\\n                return\\n                    string.concat(\\n\\t\\t\\t\\t\\t\\tURI,\\n\\t\\t\\t\\t\\t\\ttokenToCollectionIndex(tokenId).toString(),\\n\\t\\t\\t\\t\\t\\tstore._metadataExtension\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        URI = store.baseURI;\\n        if (store.appendTokenIndexToBaseURI) {\\n            return\\n                string.concat(\\n\\t\\t\\t\\t\\tURI,\\n\\t\\t\\t\\t\\ttokenId.toString(),\\n\\t\\t\\t\\t\\tstore._metadataExtension\\n                );\\n        }\\n        return URI;\\n    }\\n}\",\"keccak256\":\"0xa404a71a6665f8ca4c2d168d2afc2e3558bf2308d16fd2ad62e20eefdf6a5647\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50611dc68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639f6350e6116100b8578063ca15c8731161007c578063ca15c873146102b7578063d547741f146102ca578063d6215ace146102dd578063e4fbb609146102f0578063e8a3d48514610305578063fe6d81241461030d57600080fd5b80639f6350e61461024b578063ab9aae351461025e578063b64b21ca14610271578063c1d78b4a14610284578063c87b56dd1461029757600080fd5b80634dcf6ad6116100ff5780634dcf6ad6146101c457806381f460ef146101d75780639010d07c146101ea57806391d1485414610215578063938e3d7b1461023857600080fd5b8063175c4ef81461013c5780631c899d1a14610176578063248a9ca31461018b5780632f2ff15d1461019e57806336568abe146101b1575b600080fd5b6101637f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020015b60405180910390f35b610189610184366004611585565b610334565b005b6101636101993660046115d1565b6103d8565b6101896101ac3660046115ea565b6103fa565b6101896101bf3660046115ea565b61041c565b6101896101d23660046115d1565b61049f565b6101896101e536600461163b565b6104fc565b6101fd6101f8366004611699565b6105c5565b6040516001600160a01b03909116815260200161016d565b6102286102233660046115ea565b6105f3565b604051901515815260200161016d565b6101896102463660046116bb565b61062b565b6101896102593660046116bb565b6106bf565b61016361026c3660046115d1565b6107d4565b61018961027f3660046116fd565b610868565b610189610292366004611796565b610906565b6102aa6102a53660046115d1565b6109ef565b60405161016d9190611826565b6101636102c53660046115d1565b610d79565b6101896102d83660046115ea565b610d9d565b6101896102eb36600461163b565b610dba565b610163600080516020611d3183398151915281565b6102aa610e73565b6101637ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b600080516020611d3183398151915261034d8133610f15565b60008481527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4960205260409020600080516020611d71833981519152906103958486836118f1565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f98585856040516103c9939291906119db565b60405180910390a15050505050565b6000908152600080516020611d11833981519152602052604090206001015490565b610403826103d8565b61040d8133610f15565b6104178383610f79565b505050565b6001600160a01b03811633146104915760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61049b8282611010565b5050565b600080516020611d318339815191526104b88133610f15565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076104e3846109ef565b6040516104f09190611826565b60405180910390a25050565b600080516020611d318339815191526105158133610f15565b60008581527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a5160205260409020600080516020611d718339815191529061055d8587836118f1565b50600086815260198201602052604090819020805460ff1916851515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda43906105b5908890889088908890601a880190611a7b565b60405180910390a1505050505050565b6000828152600080516020611d51833981519152602052604081206105ea90836110a5565b90505b92915050565b6000918252600080516020611d11833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611d318339815191526106448133610f15565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4e61067f8486836118f1565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c184846040516106b1929190611abb565b60405180910390a150505050565b600080516020611d318339815191526106d88133610f15565b828260008181106106eb576106eb611acf565b9050013560f81c60f81b6001600160f81b031916601760f91b146107665760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b6064820152608401610488565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a536107a18486836118f1565b507faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da81601a016040516106b19190611ae5565b60008181527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4760205260408120547f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a458054600080516020611d718339815191529290811061084457610844611acf565b906000526020600020906005020160000154836108619190611b0e565b9392505050565b600080516020611d318339815191526108818133610f15565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a436108bc8587836118f1565b5060138101805460ff19168415151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d906103c990879087908790601a870190611b21565b600080516020611d3183398151915261091f8133610f15565b8382146109945760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e67746800000000006064820152608401610488565b60005b848110156109e7576109df8686838181106109b4576109b4611acf565b905060200201358585848181106109cd576109cd611acf565b90506020028101906101849190611b5a565b600101610997565b505050505050565b60008181527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a49602052604081208054606092600080516020611d71833981519152929091610a3c9061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a689061186f565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b50505050509050600081511115610acd579392505050565b6000848152600f8301602090815260408083205483526018850190915290208054610af79061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b239061186f565b8015610b705780601f10610b4557610100808354040283529160200191610b70565b820191906000526020600020905b815481529060010190602001808311610b5357829003601f168201915b50505050509050600081511115610be9576000848152600f8301602090815260408083205483526019850190915290205460ff16156108615780610bbb610bb6866107d4565b6110b1565b83601a01604051602001610bd193929190611ba1565b60405160208183030381529060405292505050919050565b6000848152600e8301602090815260408083205483526011850190915290208054610c139061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3f9061186f565b8015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b820191906000526020600020905b815481529060010190602001808311610c6f57829003601f168201915b50505050509050600081511115610cd2576000848152600e8301602090815260408083205483526012850190915290205460ff16156108615780610bbb610bb6866107d4565b81600a018054610ce19061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0d9061186f565b8015610d5a5780601f10610d2f57610100808354040283529160200191610d5a565b820191906000526020600020905b815481529060010190602001808311610d3d57829003601f168201915b5050506013850154929350505060ff16156108615780610bbb856110b1565b6000818152600080516020611d51833981519152602052604081206105ed90611144565b610da6826103d8565b610db08133610f15565b6104178383611010565b600080516020611d31833981519152610dd38133610f15565b60008581527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4a60205260409020600080516020611d7183398151915290610e1b8587836118f1565b50600086815260128201602052604090819020805460ff1916851515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f43906105b5908890889088908890601a880190611a7b565b6060600080516020611d718339815191526015018054610e929061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebe9061186f565b8015610f0b5780601f10610ee057610100808354040283529160200191610f0b565b820191906000526020600020905b815481529060010190602001808311610eee57829003601f168201915b5050505050905090565b610f1f82826105f3565b61049b57610f37816001600160a01b0316601461114e565b610f4283602061114e565b604051602001610f53929190611c44565b60408051601f198184030181529082905262461bcd60e51b825261048891600401611826565b610f8382826105f3565b61049b576000828152600080516020611d11833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020611d518339815191526020526040902061041790826112ce565b61101a82826105f3565b1561049b576000828152600080516020611d11833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020611d518339815191526020526040902061041790826112e3565b60006105ea83836112f8565b606060006110be83611322565b600101905060008167ffffffffffffffff8111156110de576110de611859565b6040519080825280601f01601f191660200182016040528015611108576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461111257509392505050565b60006105ed825490565b606082600061115e846002611cb9565b611169906002611cd0565b67ffffffffffffffff81111561118157611181611859565b6040519080825280601f01601f1916602001820160405280156111ab576020820181803683370190505b509050600360fc1b816000815181106111c6576111c6611acf565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111f5576111f5611acf565b60200101906001600160f81b031916908160001a9053506000611219856002611cb9565b611224906001611cd0565b90505b600181111561129c576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061125857611258611acf565b1a60f81b82828151811061126e5761126e611acf565b60200101906001600160f81b031916908160001a90535060049290921c9161129581611ce3565b9050611227565b5081156112c65760405163e22e27eb60e01b81526004810186905260248101859052604401610488565b949350505050565b60006105ea836001600160a01b0384166113fa565b60006105ea836001600160a01b038416611449565b600082600001828154811061130f5761130f611acf565b9060005260206000200154905092915050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106113615772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061138d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106113ab57662386f26fc10000830492506010015b6305f5e10083106113c3576305f5e100830492506008015b61271083106113d757612710830492506004015b606483106113e9576064830492506002015b600a83106105ed5760010192915050565b6000818152600183016020526040812054611441575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ed565b5060006105ed565b6000818152600183016020526040812054801561153257600061146d600183611b0e565b855490915060009061148190600190611b0e565b90508082146114e65760008660000182815481106114a1576114a1611acf565b90600052602060002001549050808760000184815481106114c4576114c4611acf565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114f7576114f7611cfa565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ed565b60009150506105ed565b60008083601f84011261154e57600080fd5b50813567ffffffffffffffff81111561156657600080fd5b60208301915083602082850101111561157e57600080fd5b9250929050565b60008060006040848603121561159a57600080fd5b83359250602084013567ffffffffffffffff8111156115b857600080fd5b6115c48682870161153c565b9497909650939450505050565b6000602082840312156115e357600080fd5b5035919050565b600080604083850312156115fd57600080fd5b8235915060208301356001600160a01b038116811461161b57600080fd5b809150509250929050565b8035801515811461163657600080fd5b919050565b6000806000806060858703121561165157600080fd5b84359350602085013567ffffffffffffffff81111561166f57600080fd5b61167b8782880161153c565b909450925061168e905060408601611626565b905092959194509250565b600080604083850312156116ac57600080fd5b50508035926020909101359150565b600080602083850312156116ce57600080fd5b823567ffffffffffffffff8111156116e557600080fd5b6116f18582860161153c565b90969095509350505050565b60008060006040848603121561171257600080fd5b833567ffffffffffffffff81111561172957600080fd5b6117358682870161153c565b9094509250611748905060208501611626565b90509250925092565b60008083601f84011261176357600080fd5b50813567ffffffffffffffff81111561177b57600080fd5b6020830191508360208260051b850101111561157e57600080fd5b600080600080604085870312156117ac57600080fd5b843567ffffffffffffffff808211156117c457600080fd5b6117d088838901611751565b909650945060208701359150808211156117e957600080fd5b506117f687828801611751565b95989497509550505050565b60005b8381101561181d578181015183820152602001611805565b50506000910152565b6020815260008251806020840152611845816040850160208701611802565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061188357607f821691505b6020821081036118a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610417576000816000526020600020601f850160051c810160208610156118d25750805b601f850160051c820191505b818110156109e7578281556001016118de565b67ffffffffffffffff83111561190957611909611859565b61191d83611917835461186f565b836118a9565b6000601f84116001811461195157600085156119395750838201355b600019600387901b1c1916600186901b1783556119ab565b600083815260209020601f19861690835b828110156119825786850135825560209485019460019092019101611962565b508682101561199f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006119f56040830184866119b2565b95945050505050565b60008154611a0b8161186f565b808552602060018381168015611a285760018114611a4257611a70565b60ff1985168884015283151560051b880183019550611a70565b866000528260002060005b85811015611a685781548a8201860152908301908401611a4d565b890184019650505b505050505092915050565b858152608060208201526000611a956080830186886119b2565b84151560408401528281036060840152611aaf81856119fe565b98975050505050505050565b6020815260006112c66020830184866119b2565b634e487b7160e01b600052603260045260246000fd5b6020815260006105ea60208301846119fe565b634e487b7160e01b600052601160045260246000fd5b818103818111156105ed576105ed611af8565b606081526000611b356060830186886119b2565b84151560208401528281036040840152611b4f81856119fe565b979650505050505050565b6000808335601e19843603018112611b7157600080fd5b83018035915067ffffffffffffffff821115611b8c57600080fd5b60200191503681900382131561157e57600080fd5b600084516020611bb5828560208a01611802565b855191840191611bc9818460208a01611802565b8554920191600090611bda8161186f565b60018281168015611bf25760018114611c0757611c34565b60ff1984168752821515830287019450611c34565b89600052602060002060005b84811015611c2c57815489820152908301908701611c13565b505082870194505b50929a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c7c816017850160208801611802565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611cad816028840160208801611802565b01602801949350505050565b80820281158282048414176105ed576105ed611af8565b808201808211156105ed576105ed611af8565b600081611cf257611cf2611af8565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db64f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d113fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39a264697066735822122032a87a435dbef06da9cb2cb2cf336f58d1483da32d095203e13153a3c72c297f64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80639f6350e6116100b8578063ca15c8731161007c578063ca15c873146102b7578063d547741f146102ca578063d6215ace146102dd578063e4fbb609146102f0578063e8a3d48514610305578063fe6d81241461030d57600080fd5b80639f6350e61461024b578063ab9aae351461025e578063b64b21ca14610271578063c1d78b4a14610284578063c87b56dd1461029757600080fd5b80634dcf6ad6116100ff5780634dcf6ad6146101c457806381f460ef146101d75780639010d07c146101ea57806391d1485414610215578063938e3d7b1461023857600080fd5b8063175c4ef81461013c5780631c899d1a14610176578063248a9ca31461018b5780632f2ff15d1461019e57806336568abe146101b1575b600080fd5b6101637f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020015b60405180910390f35b610189610184366004611585565b610334565b005b6101636101993660046115d1565b6103d8565b6101896101ac3660046115ea565b6103fa565b6101896101bf3660046115ea565b61041c565b6101896101d23660046115d1565b61049f565b6101896101e536600461163b565b6104fc565b6101fd6101f8366004611699565b6105c5565b6040516001600160a01b03909116815260200161016d565b6102286102233660046115ea565b6105f3565b604051901515815260200161016d565b6101896102463660046116bb565b61062b565b6101896102593660046116bb565b6106bf565b61016361026c3660046115d1565b6107d4565b61018961027f3660046116fd565b610868565b610189610292366004611796565b610906565b6102aa6102a53660046115d1565b6109ef565b60405161016d9190611826565b6101636102c53660046115d1565b610d79565b6101896102d83660046115ea565b610d9d565b6101896102eb36600461163b565b610dba565b610163600080516020611d3183398151915281565b6102aa610e73565b6101637ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b600080516020611d3183398151915261034d8133610f15565b60008481527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4960205260409020600080516020611d71833981519152906103958486836118f1565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f98585856040516103c9939291906119db565b60405180910390a15050505050565b6000908152600080516020611d11833981519152602052604090206001015490565b610403826103d8565b61040d8133610f15565b6104178383610f79565b505050565b6001600160a01b03811633146104915760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61049b8282611010565b5050565b600080516020611d318339815191526104b88133610f15565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076104e3846109ef565b6040516104f09190611826565b60405180910390a25050565b600080516020611d318339815191526105158133610f15565b60008581527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a5160205260409020600080516020611d718339815191529061055d8587836118f1565b50600086815260198201602052604090819020805460ff1916851515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda43906105b5908890889088908890601a880190611a7b565b60405180910390a1505050505050565b6000828152600080516020611d51833981519152602052604081206105ea90836110a5565b90505b92915050565b6000918252600080516020611d11833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611d318339815191526106448133610f15565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4e61067f8486836118f1565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c184846040516106b1929190611abb565b60405180910390a150505050565b600080516020611d318339815191526106d88133610f15565b828260008181106106eb576106eb611acf565b9050013560f81c60f81b6001600160f81b031916601760f91b146107665760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b6064820152608401610488565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a536107a18486836118f1565b507faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da81601a016040516106b19190611ae5565b60008181527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4760205260408120547f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a458054600080516020611d718339815191529290811061084457610844611acf565b906000526020600020906005020160000154836108619190611b0e565b9392505050565b600080516020611d318339815191526108818133610f15565b600080516020611d718339815191527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a436108bc8587836118f1565b5060138101805460ff19168415151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d906103c990879087908790601a870190611b21565b600080516020611d3183398151915261091f8133610f15565b8382146109945760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e67746800000000006064820152608401610488565b60005b848110156109e7576109df8686838181106109b4576109b4611acf565b905060200201358585848181106109cd576109cd611acf565b90506020028101906101849190611b5a565b600101610997565b505050505050565b60008181527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a49602052604081208054606092600080516020611d71833981519152929091610a3c9061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a689061186f565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b50505050509050600081511115610acd579392505050565b6000848152600f8301602090815260408083205483526018850190915290208054610af79061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b239061186f565b8015610b705780601f10610b4557610100808354040283529160200191610b70565b820191906000526020600020905b815481529060010190602001808311610b5357829003601f168201915b50505050509050600081511115610be9576000848152600f8301602090815260408083205483526019850190915290205460ff16156108615780610bbb610bb6866107d4565b6110b1565b83601a01604051602001610bd193929190611ba1565b60405160208183030381529060405292505050919050565b6000848152600e8301602090815260408083205483526011850190915290208054610c139061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3f9061186f565b8015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b820191906000526020600020905b815481529060010190602001808311610c6f57829003601f168201915b50505050509050600081511115610cd2576000848152600e8301602090815260408083205483526012850190915290205460ff16156108615780610bbb610bb6866107d4565b81600a018054610ce19061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0d9061186f565b8015610d5a5780601f10610d2f57610100808354040283529160200191610d5a565b820191906000526020600020905b815481529060010190602001808311610d3d57829003601f168201915b5050506013850154929350505060ff16156108615780610bbb856110b1565b6000818152600080516020611d51833981519152602052604081206105ed90611144565b610da6826103d8565b610db08133610f15565b6104178383611010565b600080516020611d31833981519152610dd38133610f15565b60008581527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4a60205260409020600080516020611d7183398151915290610e1b8587836118f1565b50600086815260128201602052604090819020805460ff1916851515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f43906105b5908890889088908890601a880190611a7b565b6060600080516020611d718339815191526015018054610e929061186f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebe9061186f565b8015610f0b5780601f10610ee057610100808354040283529160200191610f0b565b820191906000526020600020905b815481529060010190602001808311610eee57829003601f168201915b5050505050905090565b610f1f82826105f3565b61049b57610f37816001600160a01b0316601461114e565b610f4283602061114e565b604051602001610f53929190611c44565b60408051601f198184030181529082905262461bcd60e51b825261048891600401611826565b610f8382826105f3565b61049b576000828152600080516020611d11833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020611d518339815191526020526040902061041790826112ce565b61101a82826105f3565b1561049b576000828152600080516020611d11833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020611d518339815191526020526040902061041790826112e3565b60006105ea83836112f8565b606060006110be83611322565b600101905060008167ffffffffffffffff8111156110de576110de611859565b6040519080825280601f01601f191660200182016040528015611108576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461111257509392505050565b60006105ed825490565b606082600061115e846002611cb9565b611169906002611cd0565b67ffffffffffffffff81111561118157611181611859565b6040519080825280601f01601f1916602001820160405280156111ab576020820181803683370190505b509050600360fc1b816000815181106111c6576111c6611acf565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111f5576111f5611acf565b60200101906001600160f81b031916908160001a9053506000611219856002611cb9565b611224906001611cd0565b90505b600181111561129c576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061125857611258611acf565b1a60f81b82828151811061126e5761126e611acf565b60200101906001600160f81b031916908160001a90535060049290921c9161129581611ce3565b9050611227565b5081156112c65760405163e22e27eb60e01b81526004810186905260248101859052604401610488565b949350505050565b60006105ea836001600160a01b0384166113fa565b60006105ea836001600160a01b038416611449565b600082600001828154811061130f5761130f611acf565b9060005260206000200154905092915050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106113615772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061138d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106113ab57662386f26fc10000830492506010015b6305f5e10083106113c3576305f5e100830492506008015b61271083106113d757612710830492506004015b606483106113e9576064830492506002015b600a83106105ed5760010192915050565b6000818152600183016020526040812054611441575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ed565b5060006105ed565b6000818152600183016020526040812054801561153257600061146d600183611b0e565b855490915060009061148190600190611b0e565b90508082146114e65760008660000182815481106114a1576114a1611acf565b90600052602060002001549050808760000184815481106114c4576114c4611acf565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114f7576114f7611cfa565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ed565b60009150506105ed565b60008083601f84011261154e57600080fd5b50813567ffffffffffffffff81111561156657600080fd5b60208301915083602082850101111561157e57600080fd5b9250929050565b60008060006040848603121561159a57600080fd5b83359250602084013567ffffffffffffffff8111156115b857600080fd5b6115c48682870161153c565b9497909650939450505050565b6000602082840312156115e357600080fd5b5035919050565b600080604083850312156115fd57600080fd5b8235915060208301356001600160a01b038116811461161b57600080fd5b809150509250929050565b8035801515811461163657600080fd5b919050565b6000806000806060858703121561165157600080fd5b84359350602085013567ffffffffffffffff81111561166f57600080fd5b61167b8782880161153c565b909450925061168e905060408601611626565b905092959194509250565b600080604083850312156116ac57600080fd5b50508035926020909101359150565b600080602083850312156116ce57600080fd5b823567ffffffffffffffff8111156116e557600080fd5b6116f18582860161153c565b90969095509350505050565b60008060006040848603121561171257600080fd5b833567ffffffffffffffff81111561172957600080fd5b6117358682870161153c565b9094509250611748905060208501611626565b90509250925092565b60008083601f84011261176357600080fd5b50813567ffffffffffffffff81111561177b57600080fd5b6020830191508360208260051b850101111561157e57600080fd5b600080600080604085870312156117ac57600080fd5b843567ffffffffffffffff808211156117c457600080fd5b6117d088838901611751565b909650945060208701359150808211156117e957600080fd5b506117f687828801611751565b95989497509550505050565b60005b8381101561181d578181015183820152602001611805565b50506000910152565b6020815260008251806020840152611845816040850160208701611802565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061188357607f821691505b6020821081036118a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610417576000816000526020600020601f850160051c810160208610156118d25750805b601f850160051c820191505b818110156109e7578281556001016118de565b67ffffffffffffffff83111561190957611909611859565b61191d83611917835461186f565b836118a9565b6000601f84116001811461195157600085156119395750838201355b600019600387901b1c1916600186901b1783556119ab565b600083815260209020601f19861690835b828110156119825786850135825560209485019460019092019101611962565b508682101561199f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006119f56040830184866119b2565b95945050505050565b60008154611a0b8161186f565b808552602060018381168015611a285760018114611a4257611a70565b60ff1985168884015283151560051b880183019550611a70565b866000528260002060005b85811015611a685781548a8201860152908301908401611a4d565b890184019650505b505050505092915050565b858152608060208201526000611a956080830186886119b2565b84151560408401528281036060840152611aaf81856119fe565b98975050505050505050565b6020815260006112c66020830184866119b2565b634e487b7160e01b600052603260045260246000fd5b6020815260006105ea60208301846119fe565b634e487b7160e01b600052601160045260246000fd5b818103818111156105ed576105ed611af8565b606081526000611b356060830186886119b2565b84151560208401528281036040840152611b4f81856119fe565b979650505050505050565b6000808335601e19843603018112611b7157600080fd5b83018035915067ffffffffffffffff821115611b8c57600080fd5b60200191503681900382131561157e57600080fd5b600084516020611bb5828560208a01611802565b855191840191611bc9818460208a01611802565b8554920191600090611bda8161186f565b60018281168015611bf25760018114611c0757611c34565b60ff1984168752821515830287019450611c34565b89600052602060002060005b84811015611c2c57815489820152908301908701611c13565b505082870194505b50929a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611c7c816017850160208801611802565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611cad816028840160208801611802565b01602801949350505050565b80820281158282048414176105ed576105ed611af8565b808201808211156105ed576105ed611af8565b600081611cf257611cf2611af8565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db64f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d113fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39a264697066735822122032a87a435dbef06da9cb2cb2cf336f58d1483da32d095203e13153a3c72c297f64736f6c63430008190033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "errors": {
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "UpdatedBaseURI(string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the tokens appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new  base identifier for all the tokens"
        }
      },
      "UpdatedContractURI(string)": {
        "params": {
          "newURI": "Contains the new identifier for the contract "
        }
      },
      "UpdatedProductURI(uint256,string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the token appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new identifier for the product",
          "productId": "Contains the index of the product to change"
        }
      },
      "UpdatedRangeURI(uint256,string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the token appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new identifier for the product",
          "rangeId": "Contains the index of the product to change"
        }
      },
      "UpdatedTokenURI(uint256,string)": {
        "params": {
          "newURI": "Contains the new identifier for the token",
          "tokenId": "Contains the index of the token appended to the URI"
        }
      },
      "UpdatedURIExtension(string)": {
        "details": "It will be appended ONLY if the token ID has to also be appended",
        "params": {
          "newExtension": "The new extension for all the URIs"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "contractURI()": {
        "returns": {
          "_0": "string with the URI of the contract "
        }
      },
      "freezeMetadata(uint256)": {
        "details": "This function is only available to an account with a `CREATOR` role",
        "params": {
          "tokenId": "Token Index that will be given an URI"
        }
      },
      "setBaseURI(string,bool)": {
        "details": "This function is only available to an account with a `CREATOR` roleCan be overriden by the specific token URI",
        "params": {
          "appendTokenIndexToBaseURI": "URI to be used",
          "newURI": "URI to be used"
        }
      },
      "setCollectionURI(uint256,string,bool)": {
        "details": "This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance",
        "params": {
          "appendTokenIndexToProductURI": "If true, it will append the token index to the URI",
          "newURI": "New URI to be given",
          "productId": "Token Index that will be given an URI"
        }
      },
      "setContractURI(string)": {
        "details": "This function is only available to an account with a `CREATOR` role",
        "params": {
          "newURI": "New URI to be given"
        }
      },
      "setMetadataExtension(string)": {
        "details": "Must include the . before the extension",
        "params": {
          "extension": "Extension to be added at the end of all contract wide tokens"
        }
      },
      "setRangeURI(uint256,string,bool)": {
        "details": "Emits an event so there's provenance",
        "params": {
          "appendTokenIndex": "Flag to append the token index at the end of the new URI",
          "newURI": "New URI to be given",
          "rangeId": "Token Index that will be given an URI"
        }
      },
      "setUniqueURI(uint256,string)": {
        "details": "This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance",
        "params": {
          "newURI": "New URI to be given",
          "tokenId": "Token Index that will be given an URI"
        }
      },
      "setUniqueURIBatch(uint256[],string[])": {
        "details": "This function is only available to an account with a `CREATOR` roleUses the single function so it also emits an eventThis function requires that all the tokens have a corresponding URI",
        "params": {
          "newURIs": "New URIs to be set",
          "tokenIds": "Token Indexes that will be given an URI"
        }
      },
      "tokenToCollectionIndex(uint256)": {
        "params": {
          "token": "Token ID to find"
        },
        "returns": {
          "tokenIndex": "which contains the corresponding token index"
        }
      },
      "tokenURI(uint256)": {
        "details": "Will return unique token URI or product URI or contract URI",
        "params": {
          "tokenId": "Token Index to look for"
        },
        "returns": {
          "_0": "string with the URI of the toke that we are using"
        }
      }
    },
    "title": "RAIR Metadata facet contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "UpdatedBaseURI(string,bool,string)": {
        "notice": "This event stores in the blockchain when the base code of all the tokens has an update in its URI"
      },
      "UpdatedContractURI(string)": {
        "notice": "This event stores in the blockchain when a contract has a change in its URI"
      },
      "UpdatedProductURI(uint256,string,bool,string)": {
        "notice": "This event stores in the blockchain when a product has a change in its URI"
      },
      "UpdatedRangeURI(uint256,string,bool,string)": {
        "notice": "This event stores in the blockchain when a range has a change in its URI"
      },
      "UpdatedTokenURI(uint256,string)": {
        "notice": "This event stores in the blockchain when a token has a change in its URI"
      },
      "UpdatedURIExtension(string)": {
        "notice": "This event informs the new extension all metadata URIs will have appended at the end"
      }
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "This function allow us to see the current URI of the contract"
      },
      "freezeMetadata(uint256)": {
        "notice": "This function use OpenSea's to freeze the metadata"
      },
      "setBaseURI(string,bool)": {
        "notice": "Sets the Base URI for ALL tokens"
      },
      "setCollectionURI(uint256,string,bool)": {
        "notice": "Gives an individual token an unique URI"
      },
      "setContractURI(string)": {
        "notice": "This function allow us to set a new contract URI"
      },
      "setMetadataExtension(string)": {
        "notice": "Updates the metadata extension added at the end of all tokens"
      },
      "setRangeURI(uint256,string,bool)": {
        "notice": "Gives all tokens within a range a specific URI"
      },
      "setUniqueURI(uint256,string)": {
        "notice": "Gives an individual token an unique URI"
      },
      "setUniqueURIBatch(uint256[],string[])": {
        "notice": "Updates the unique URI of all the tokens, but in a single transaction"
      },
      "tokenToCollectionIndex(uint256)": {
        "notice": "Returns the token index inside the product"
      },
      "tokenURI(uint256)": {
        "notice": "Returns a token's URI"
      }
    },
    "notice": "You can use this contract to administrate the metadata asociated to the Rair facet",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}