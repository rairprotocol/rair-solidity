{
  "address": "0x06e5197f761f970decca7de835ad811bd65876f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rangeName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSplitsLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "visible",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "AddedMintingOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "MintedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSplitsLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "visible",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintingOffer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "canBeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "visible_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "rangeIndexes",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "canBeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[][]",
          "name": "splits",
          "type": "tuple[][]"
        },
        {
          "internalType": "bool[]",
          "name": "visibility",
          "type": "bool[]"
        },
        {
          "internalType": "address",
          "name": "nodeAddress_",
          "type": "address"
        }
      ],
      "name": "addMintingOfferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "buyMintingOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "buyMintingOfferBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "canBeContract",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "getOfferInfoForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc721Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rangeIndex",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "canBeContract",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct feeSplits[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "visible",
              "type": "bool"
            }
          ],
          "internalType": "struct mintingOffer",
          "name": "mintOffer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct IRAIR721.range",
          "name": "rangeData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        }
      ],
      "name": "getOffersCountForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintingOfferId_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "canBeContract",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct feeSplits[]",
          "name": "splits_",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "visible_",
          "type": "bool"
        }
      ],
      "name": "updateMintingOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33ad91074d91433c6e3d8bdbe1250fe337cdff96a1f7259b0a4ba2ab7553f28a",
  "receipt": {
    "to": null,
    "from": "0xec30759d0a3f3ce0a730920dc29d74e441f492c3",
    "contractAddress": "0x06e5197f761f970decca7de835ad811bd65876f5",
    "transactionIndex": "0x57",
    "gasUsed": "0x2b4d66",
    "logsBloom": "0x
    "blockHash": "0xb86c70062c5d296fc483f31210cb321c0bacf165995096bd40d96e54ad7dcbbe",
    "transactionHash": "0x33ad91074d91433c6e3d8bdbe1250fe337cdff96a1f7259b0a4ba2ab7553f28a",
    "logs": [
      {
        "blockHash": "0xb86c70062c5d296fc483f31210cb321c0bacf165995096bd40d96e54ad7dcbbe",
        "address": "0x0000000000000000000000000000000000001010",
        "logIndex": "0x176",
        "data": "0x000000000000000000000000000000000000000000000000011bb3f24045cb8e00000000000000000000000000000000000000000000000b4d79c72a5b970fae00000000000000000000000000000000000000000002ee2863bf2c35fb00215400000000000000000000000000000000000000000000000b4c5e13381b51442000000000000000000000000000000000000000000002ee2864dae0283b45ece2",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "blockNumber": "0x355c1f9",
        "transactionIndex": "0x57",
        "transactionHash": "0x33ad91074d91433c6e3d8bdbe1250fe337cdff96a1f7259b0a4ba2ab7553f28a"
      }
    ],
    "blockNumber": "0x355c1f9",
    "cumulativeGasUsed": "0xdb7b0c",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "ba288d747cc1aa4c71ee545a11fd6010",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSplitsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"AddedMintingOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"MintedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSplitsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintingOffer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeIndexes\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[][]\",\"name\":\"splits\",\"type\":\"tuple[][]\"},{\"internalType\":\"bool[]\",\"name\":\"visibility\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"nodeAddress_\",\"type\":\"address\"}],\"name\":\"addMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"buyMintingOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"buyMintingOfferBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"getOfferInfoForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible\",\"type\":\"bool\"}],\"internalType\":\"struct mintingOffer\",\"name\":\"mintOffer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct IRAIR721.range\",\"name\":\"rangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"}],\"name\":\"getOffersCountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingOfferId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeContract\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct feeSplits[]\",\"name\":\"splits_\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"visible_\",\"type\":\"bool\"}],\"name\":\"updateMintingOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerableMarket\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"AddedMintingOffer(address,uint256,string,uint256,uint256,bool,uint256)\":{\"params\":{\"erc721Address\":\"Contains the address of the erc721\",\"feeSplitsLength\":\"Contains the visibility of the offer\",\"offerIndex\":\"contains the new status of the offer\",\"price\":\"Contains the price of the offer fot the token\",\"rangeIndex\":\"contains the id of the minted token\",\"rangeName\":\"contains the name of the range where the token is\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"contains the new status of the role\",\"previousAdminRole\":\"contains the previous status of the role\",\"role\":\"Contains the role we want to update\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to grant the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to revoke the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}}},\"kind\":\"dev\",\"methods\":{\"addMintingOffer(address,uint256,(address,bool,uint256)[],bool,address)\":{\"params\":{\"erc721Address_\":\"Contains the address of the minter marketplace contract\",\"nodeAddress_\":\"Contains address of the node where the offer was placed\",\"rangeIndex_\":\"Contains the index location of the range where the offer will be placed\",\"splits\":\"Contains the shares and address to pay when the offer is succesfull \",\"visible_\":\"Contains a boolean to set if the offer is public or not \"}},\"addMintingOfferBatch(address,uint256[],(address,bool,uint256)[][],bool[],address)\":{\"params\":{\"erc721Address_\":\"Contains the address of the minter marketplace contract\",\"nodeAddress_\":\"Contains address of the node where the offer was placed\",\"rangeIndexes\":\"Contains the collection of ranges where the offer will be placed\",\"splits\":\"Contains the shares and address to pay when the offer is succesfull \",\"visibility\":\"Contains a collection of booleans that set the offer as public or not \"}},\"buyMintingOffer(uint256,uint256)\":{\"details\":\"This function requires that the mintingOfferExists points to an valid offer  \",\"params\":{\"offerIndex_\":\"Contains index location of the offer\",\"tokenIndex_\":\"Contains the id of the tokens that we want to mint\"}},\"buyMintingOfferBatch(uint256,uint256[],address[])\":{\"details\":\"This function requires that the mintingOfferExists points to an valid offer  \",\"params\":{\"offerIndex_\":\"Contains index location of the offer\",\"recipients\":\"Contains the collection of addresses that will receive\",\"tokenIndexes\":\"Contains the collection of tokens that we want to mint\"}},\"getOfferInfo(uint256)\":{\"params\":{\"offerIndex\":\"Contains the facet addresses and function selectors\"},\"returns\":{\"mintOffer\":\"Show us the information about the minting offer \",\"productIndex\":\"Show us the indexed position for the product inside the range\",\"rangeData\":\"Show us the data about the selected range\"}},\"getOfferInfoForAddress(address,uint256)\":{\"params\":{\"erc721Address\":\"Contains the facet addresses and function selectors\",\"rangeIndex\":\"Contains the facet addresses and function selectors\"},\"returns\":{\"mintOffer\":\"Show us the information about the minting offer \",\"offerIndex\":\"Show us the indexed position of the offer\",\"productIndex\":\"Show us the indexed position for the product inside the range\",\"rangeData\":\"Show us the data about the selected range\"}},\"getOffersCountForAddress(address)\":{\"params\":{\"erc721Address\":\"Address of the ERC721 token\"},\"returns\":{\"_0\":\"uint with the total of offers\"}},\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bytes that indicates if an account has or not an admin role\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Contains the indexed position to verify inside the role members list\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"address that indicates the address indexed in that position\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"uint256 that indicates the total accounts with that role\"}},\"getTotalOfferCount()\":{\"returns\":{\"_0\":\"uint with the total of offers\"}},\"grantRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to grant\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address thay we want to verify\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bool that indicates if an account has or not a role\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Currently you can only renounce to your own roles\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role to remove from our account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to revoke\"}},\"updateMintingOffer(uint256,(address,bool,uint256)[],bool)\":{\"details\":\"This function requires that the mintingOfferExists points to an valid offer  \",\"params\":{\"mintingOfferId_\":\"Contains index location of the minting offer\",\"splits_\":\"Contains the shares and address to pay when the offer is succesfull \",\"visible_\":\"Contains a boolean to set if the offer is public or not \"}}},\"title\":\"RAIR Diamond - Minting offers facet\",\"version\":1},\"userdoc\":{\"events\":{\"AddedMintingOffer(address,uint256,string,uint256,uint256,bool,uint256)\":{\"notice\":\"This event stores in the blockchain when a Minting Offer is Added\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when we change an admin role\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we grant a role\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we revoke a role\"}},\"kind\":\"user\",\"methods\":{\"addMintingOffer(address,uint256,(address,bool,uint256)[],bool,address)\":{\"notice\":\"This function allow us to add a new minting offer\"},\"addMintingOfferBatch(address,uint256[],(address,bool,uint256)[][],bool[],address)\":{\"notice\":\"This function allow us to create a group of minting offers in a single call\"},\"buyMintingOffer(uint256,uint256)\":{\"notice\":\"This function allow us to buy a minting offers\"},\"buyMintingOfferBatch(uint256,uint256[],address[])\":{\"notice\":\"This function allow us to buy a collection of minting offers\"},\"getOfferInfo(uint256)\":{\"notice\":\"This function show us the information of an selected minting offer\"},\"getOfferInfoForAddress(address,uint256)\":{\"notice\":\"This functions show us the information of an offer asociated to a marketplace\"},\"getOffersCountForAddress(address)\":{\"notice\":\"Returns the number of offers for a specific ERC721 address\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allow us to check the admin role that contains a role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to check the address of an indexed position for the role list\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to check total members that has an selected role\"},\"getTotalOfferCount()\":{\"notice\":\"Returns the number of all the minting offers \"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow us to grant a role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"Allow us to check the if and account has a selected role\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow us to renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow us to revoke a role to an account\"},\"updateMintingOffer(uint256,(address,bool,uint256)[],bool)\":{\"notice\":\"This function allow us to update the parameters of a minting offers\"}},\"notice\":\"Facet in charge of the minting offers in the RAIR Marketplace\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":\"MintingOffersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Marketplace/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct feeSplits {\\n\\taddress recipient;\\n\\tbool canBeContract;\\n\\tuint percentage;\\n}\\n\\nstruct mintingOffer {\\n\\taddress erc721Address;\\n\\taddress nodeAddress;\\n\\tuint rangeIndex;\\n\\tfeeSplits[] fees;\\n\\tbool visible;\\n}\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n\\nstruct AppStorage {\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tuint16 decimals;\\n\\tuint decimalPow;\\n\\tuint nodeFee;\\n\\tuint treasuryFee;\\n\\taddress treasuryAddress;\\n\\tmintingOffer[] mintingOffers;\\n\\tmapping(address => mapping(uint => uint)) addressToRangeOffer;\\n\\tmapping(address => uint[]) addressToOffers;\\n\\t// Always add new fields at the end of the struct, that way the structure can be upgraded\\n}\\n\\nlibrary LibAppStorage {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title \\tThis is contract to manage the access control of the app market\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerableMarket is Context {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\t\\n\\tAppStorage internal s;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\t\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x336f0bf4144753bda12199769ea63e931b1aa64186240fd7722d23114223a49d\",\"license\":\"GPL-3.0\"},\"contracts/Marketplace/Facets/MintingOffersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport '../AppStorage.sol';\\n\\ninterface IRAIR721 {\\n\\tstruct range {\\n\\t\\tuint rangeStart;\\n\\t\\tuint rangeEnd;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint mintableTokens;\\n\\t\\tuint lockedTokens;\\n\\t\\tuint rangePrice;\\n\\t\\tstring rangeName;\\n\\t}\\n\\n\\t/// @notice This function returns the information of the selected range\\n\\t/// @param rangeId \\t\\t  Contains the specific range that we want to check\\n\\t/// @return data\\t\\t  Contains the data inside the range\\n\\t/// @return productIndex  Contains the index of the products for the range\\n\\tfunction rangeInfo(uint rangeId) external view returns(range memory data, uint productIndex);\\n\\t/// @notice This function allow us to mint token from a specific range \\n\\t/// @param to Contains the address that will mint the token\\n    /// @param rangeId Contains the range identification where we want to mint\\n\\t/// @param indexInRange Contains the index inside the range that we want to use for minting \\n\\tfunction mintFromRange(address to, uint rangeId, uint indexInRange) external;\\n}\\n\\n\\n/// @title  RAIR Diamond - Minting offers facet\\n/// @notice Facet in charge of the minting offers in the RAIR Marketplace\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerableMarket\\ncontract MintingOffersFacet is AccessControlAppStorageEnumerableMarket {\\n\\n\\t/// @notice This event stores in the blockchain when a Minting Offer is Added\\n    /// @param  erc721Address Contains the address of the erc721\\n    /// @param  rangeIndex contains the id of the minted token\\n\\t/// @param  rangeName contains the name of the range where the token is\\n\\t/// @param  price Contains the price of the offer fot the token\\n    /// @param  feeSplitsLength contains the previous status of the offer\\n    /// @param  feeSplitsLength Contains the visibility of the offer\\n\\t/// @param  offerIndex contains the new status of the offer\\n\\tevent AddedMintingOffer(address erc721Address, uint rangeIndex, string rangeName, uint price, uint feeSplitsLength, bool visible, uint offerIndex);\\n\\tevent UpdatedMintingOffer(address erc721Address, uint rangeIndex, uint feeSplitsLength, bool visible, uint offerIndex);\\n\\t\\n\\tevent MintedToken(address erc721Address, uint rangeIndex, uint tokenIndex, address buyer);\\n\\n\\tmodifier checkMinterRole(address erc721Address) {\\n\\t\\trequire(hasMinterRole(erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier mintingOfferExists(uint offerIndex_) {\\n\\t\\trequire(s.mintingOffers.length > offerIndex_, \\\"Minting Marketplace: Minting Offer doesn't exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier offerDoesntExist(address erc721Address, uint rangeIndex) {\\n\\t\\trequire(s.addressToRangeOffer[erc721Address][rangeIndex] == 0, \\\"Minter Marketplace: Range already has an offer\\\");\\n\\t\\tif (s.addressToRangeOffer[erc721Address][rangeIndex] == 0 && s.mintingOffers.length > 0) {\\n\\t\\t\\trequire(s.mintingOffers[0].erc721Address != erc721Address ||\\n\\t\\t\\t\\t\\t\\ts.mintingOffers[0].rangeIndex != rangeIndex,\\n\\t\\t\\t\\t\\t\\t\\t\\\"Minter Marketplace: Range already has an offer\\\");\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _checkCreatorRole(address erc721Address) internal view returns (bool) {\\n\\t\\trequire(\\n\\t\\t\\tIAccessControl(erc721Address).hasRole(bytes32(0x00), address(msg.sender)) ||\\n\\t\\t\\tIAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"CREATOR\\\")), address(msg.sender)),\\n\\t\\t\\t\\\"Minter Marketplace: Sender isn't the creator of the contract!\\\");\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @notice Utility function to verify that the recipient of a custom splits ISN'T a contract\\n\\t/// @dev \\tThis isn't a foolproof function, a contract running code in it's constructor has a code size of 0\\n\\t/// @param \\taddr \\tAddress to verify\\n\\t/// @return bool that indicates if the address is a contract or not\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\tuint size;\\n\\t\\tassembly { size := extcodesize(addr) }\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\t/// @notice Utility function to verify if the Marketplace has a MINTER role\\n\\t/// @param  erc721Address \\tAddress of the ERC721 token with AccessControl\\n\\t/// @return bool that indicates if the marketplace has a `MINTER` role or not\\n\\tfunction hasMinterRole(address erc721Address) internal view returns (bool) {\\n\\t\\treturn IAccessControl(erc721Address).hasRole(bytes32(keccak256(\\\"MINTER\\\")), address(this));\\n\\t}\\n\\n\\t/// @notice Returns the number of offers for a specific ERC721 address\\n\\t/// @param  erc721Address \\tAddress of the ERC721 token\\n\\t/// @return uint with the total of offers\\n\\tfunction getOffersCountForAddress(address erc721Address) public view returns (uint) {\\n\\t\\treturn s.addressToOffers[erc721Address].length;\\n\\t}\\n\\n\\t/// @notice Returns the number of all the minting offers \\n\\t/// @return uint with the total of offers\\n\\tfunction getTotalOfferCount() public view returns (uint) {\\n\\t\\treturn s.mintingOffers.length;\\n\\t}\\n\\n\\t/// @notice This functions show us the information of an offer asociated to a marketplace\\n\\t/// @param erc721Address Contains the facet addresses and function selectors\\n    /// @param rangeIndex Contains the facet addresses and function selectors\\n\\t/// @return offerIndex Show us the indexed position of the offer\\n\\t/// @return mintOffer Show us the information about the minting offer \\n\\t/// @return rangeData Show us the data about the selected range\\n\\t/// @return productIndex Show us the indexed position for the product inside the range\\n\\tfunction getOfferInfoForAddress(address erc721Address, uint rangeIndex) public view returns (uint offerIndex, mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[s.addressToOffers[erc721Address][rangeIndex]];\\n\\t\\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\tofferIndex = s.addressToOffers[erc721Address][rangeIndex];\\n\\t\\tmintOffer = selectedOffer;\\n\\t}\\n\\n\\t/// @notice This function show us the information of an selected minting offer\\n\\t/// @param \\t\\tofferIndex Contains the facet addresses and function selectors\\n\\t/// @return \\tmintOffer Show us the information about the minting offer \\n\\t/// @return \\trangeData Show us the data about the selected range\\n\\t/// @return \\tproductIndex Show us the indexed position for the product inside the range\\n\\tfunction getOfferInfo(uint offerIndex) public view returns (mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\\n\\t\\tmintingOffer memory selectedOffer = s.mintingOffers[offerIndex];\\n\\t\\tmintOffer = selectedOffer;\\n\\t\\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t}\\n\\n\\t/// @notice This function allow us to add a new minting offer\\n\\t/// @param erc721Address_ Contains the address of the minter marketplace contract\\n\\t/// @param rangeIndex_ Contains the index location of the range where the offer will be placed\\n\\t/// @param splits Contains the shares and address to pay when the offer is succesfull \\n\\t/// @param visible_ Contains a boolean to set if the offer is public or not \\n\\t/// @param nodeAddress_ Contains address of the node where the offer was placed\\n\\tfunction addMintingOffer(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint rangeIndex_,\\n\\t\\tfeeSplits[] calldata splits,\\n\\t\\tbool visible_,\\n\\t\\taddress nodeAddress_\\n\\t) external {\\n\\t\\t_addMintingOffer(erc721Address_, rangeIndex_, splits, visible_, nodeAddress_);\\n\\t}\\n\\n\\t/// @notice This function allow us to create a group of minting offers in a single call\\n\\t/// @param erc721Address_ Contains the address of the minter marketplace contract\\n\\t/// @param rangeIndexes Contains the collection of ranges where the offer will be placed\\n\\t/// @param splits Contains the shares and address to pay when the offer is succesfull \\n\\t/// @param visibility Contains a collection of booleans that set the offer as public or not \\n\\t/// @param nodeAddress_ Contains address of the node where the offer was placed\\n\\tfunction addMintingOfferBatch(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint[] calldata rangeIndexes,\\n\\t\\tfeeSplits[][] calldata splits,\\n\\t\\tbool[] calldata visibility,\\n\\t\\taddress nodeAddress_\\n\\t) external {\\n\\t\\trequire(rangeIndexes.length > 0, \\\"Minter Marketplace: No offers sent!\\\");\\n\\t\\trequire(rangeIndexes.length == visibility.length && splits.length == visibility.length, \\\"Minter Marketplace: Arrays should have the same length\\\");\\n\\t\\tfor (uint i = 0; i < rangeIndexes.length; i++) {\\n\\t\\t\\t_addMintingOffer(erc721Address_, rangeIndexes[i], splits[i], visibility[i], nodeAddress_);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice This function allow us to add a new minting offer\\n\\t/// @dev \\tThis function requires that account has the role of `CREATOR`\\n\\t/// @dev \\tThis function requires that the marketplace is defined as MINTER\\n\\t/// @dev \\tThis function requires that the range is available to create a new offer\\n\\t/// @param erc721Address_ Contains the address of the minter marketplace contract\\n\\t/// @param rangeIndex_ Contains the index location of the range where the offer will be placed\\n\\t/// @param splits Contains the shares and address to pay when the offer is succesfull \\n\\t/// @param visible_ Contains a boolean to set if the offer is public or not \\n\\t/// @param nodeAddress_ Contains address of the node where the offer was placed\\n\\tfunction _addMintingOffer(\\n\\t\\taddress erc721Address_,\\n\\t\\tuint rangeIndex_,\\n\\t\\tfeeSplits[] memory splits,\\n\\t\\tbool visible_,\\n\\t\\taddress nodeAddress_\\n\\t) internal checkMinterRole(erc721Address_) offerDoesntExist(erc721Address_, rangeIndex_) {\\n\\t\\t_checkCreatorRole(erc721Address_);\\n\\t\\tmintingOffer storage newOffer = s.mintingOffers.push();\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(erc721Address_).rangeInfo(rangeIndex_);\\n\\t\\trequire(rangeData.mintableTokens > 0, \\\"Minter Marketplace: Offer doesn't have tokens available!\\\");\\n\\t\\tnewOffer.erc721Address = erc721Address_;\\n\\t\\tnewOffer.nodeAddress = nodeAddress_;\\n\\t\\tnewOffer.rangeIndex = rangeIndex_;\\n\\t\\tnewOffer.visible = visible_;\\n\\t\\tif (rangeData.rangePrice > 0) {\\n\\t\\t\\tuint totalPercentage = s.nodeFee + s.treasuryFee;\\n\\t\\t\\tuint totalFunds = rangeData.rangePrice * totalPercentage / (100 * s.decimalPow);\\n\\t\\t\\tfor (uint i = 0; i < splits.length; i++) {\\n\\t\\t\\t\\trequire(splits[i].canBeContract || !isContract(splits[i].recipient), \\\"Minter Marketplace: Contracts can't be recipients of the splits\\\");\\n\\t\\t\\t\\tuint splitForPercentage = rangeData.rangePrice * splits[i].percentage / (100 * s.decimalPow);\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tsplitForPercentage > 0,\\n\\t\\t\\t\\t\\t\\\"Minter Marketplace: A percentage on the array will result in an empty transfer\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\ttotalFunds += splitForPercentage;\\n\\t\\t\\t\\ttotalPercentage += splits[i].percentage;\\n\\t\\t\\t\\tnewOffer.fees.push(splits[i]);\\n\\t\\t\\t}\\n\\t\\t\\trequire(totalPercentage == (100 * s.decimalPow), \\\"Minter Marketplace: Fees don't add up to 100%\\\");\\n\\t\\t\\trequire(totalFunds == rangeData.rangePrice, \\\"Minter Marketplace: Current fee configuration will result in missing funds\\\");\\n\\t\\t}\\n\\t\\ts.addressToOffers[erc721Address_].push(s.mintingOffers.length - 1);\\n\\t\\ts.addressToRangeOffer[erc721Address_][rangeIndex_] = s.mintingOffers.length - 1;\\n\\t\\temit AddedMintingOffer(erc721Address_, rangeIndex_, rangeData.rangeName, rangeData.rangePrice, splits.length, visible_, s.mintingOffers.length - 1);\\n\\t}\\n\\n\\t/// @notice This function allow us to update the parameters of a minting offers\\n\\t/// @dev \\tThis function requires that the mintingOfferExists points to an valid offer  \\n\\t/// @param \\tmintingOfferId_  Contains index location of the minting offer\\n\\t/// @param \\tsplits_ \\t\\t Contains the shares and address to pay when the offer is succesfull \\n\\t/// @param \\tvisible_    \\t Contains a boolean to set if the offer is public or not \\n\\tfunction updateMintingOffer (\\n\\t\\tuint mintingOfferId_,\\n\\t\\tfeeSplits[] memory splits_,\\n\\t\\tbool visible_\\n\\t) external mintingOfferExists(mintingOfferId_) {\\n\\t\\t_updateMintingOffer(mintingOfferId_, splits_, visible_);\\n\\t}\\n\\n\\t/// @notice This function allow us to update the parameters of a minting offers \\n\\t/// @param \\tmintingOfferId_  Contains index location of the minting offer\\n\\t/// @param \\tsplits_ \\t\\t Contains the shares and address to pay when the offer is succesfull \\n\\t/// @param \\tvisible_         Contains a boolean to set if the offer is public or not \\n\\tfunction _updateMintingOffer (\\n\\t\\tuint mintingOfferId_,\\n\\t\\tfeeSplits[] memory splits_,\\n\\t\\tbool visible_\\n\\t) internal {\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[mintingOfferId_];\\n\\t\\t_checkCreatorRole(selectedOffer.erc721Address);\\n\\t\\trequire(\\n\\t\\t\\thasMinterRole(selectedOffer.erc721Address),\\n\\t\\t\\t\\\"Minter Marketplace: This Marketplace isn't a Minter!\\\"\\n\\t\\t);\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\tuint totalPercentage = s.nodeFee + s.treasuryFee;\\n\\t\\tdelete selectedOffer.fees;\\n\\t\\tfor (uint i = 0; i < splits_.length; i++) {\\n\\t\\t\\trequire(splits_[i].canBeContract || !isContract(splits_[i].recipient), \\\"Minter Marketplace: Contracts can't be recipients of fees\\\");\\n\\t\\t\\trequire(\\n\\t\\t\\t\\trangeData.rangePrice * splits_[i].percentage / (100 * s.decimalPow) > 0,\\n\\t\\t\\t\\t\\\"Minter Marketplace: A percentage on the array will result in an empty transfer\\\"\\n\\t\\t\\t);\\n\\t\\t\\ttotalPercentage += splits_[i].percentage;\\n\\t\\t\\tselectedOffer.fees.push(splits_[i]);\\n\\t\\t}\\n\\t\\trequire(totalPercentage == (100 * s.decimalPow), \\\"Minter Marketplace: Fees don't add up to 100%\\\");\\n\\t\\tselectedOffer.visible = visible_;\\n\\t\\temit UpdatedMintingOffer(\\n\\t\\t\\tselectedOffer.erc721Address,\\n\\t\\t\\tselectedOffer.rangeIndex,\\n\\t\\t\\tselectedOffer.fees.length,\\n\\t\\t\\tselectedOffer.visible,\\n\\t\\t\\tmintingOfferId_\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function allow us to buy a minting offers\\n\\t/// @dev \\tThis function requires that the mintingOfferExists points to an valid offer  \\n\\t/// @param \\tofferIndex_  Contains index location of the offer\\n\\t/// @param \\ttokenIndex_  Contains the id of the tokens that we want to mint\\n\\tfunction buyMintingOffer(uint offerIndex_, uint tokenIndex_) public mintingOfferExists(offerIndex_) payable {\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\tif (rangeData.rangePrice > 0) {\\n\\t\\t\\trequire(rangeData.rangePrice <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\n\\t\\t\\tif (msg.value - rangeData.rangePrice > 0) {\\n\\t\\t\\t\\tpayable(msg.sender).transfer(msg.value - rangeData.rangePrice);\\n\\t\\t\\t}\\n\\t\\t\\tuint totalTransferred = rangeData.rangePrice * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\n\\t\\t\\tpayable(selectedOffer.nodeAddress).transfer(rangeData.rangePrice * s.nodeFee / (100 * s.decimalPow));\\n\\t\\t\\tpayable(s.treasuryAddress).transfer(rangeData.rangePrice * s.treasuryFee / (100 * s.decimalPow));\\n\\t\\t\\tuint auxMoneyToBeSent;\\n\\t\\t\\tfor (uint i = 0; i < selectedOffer.fees.length; i++) {\\n\\t\\t\\t\\tauxMoneyToBeSent = rangeData.rangePrice * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\n\\t\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\n\\t\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\n\\t\\t\\t}\\n\\t\\t\\trequire(totalTransferred == rangeData.rangePrice, \\\"Minter Marketplace: Error transferring funds!\\\");\\n\\t\\t}\\n\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndex_, msg.sender);\\n\\t}\\n\\n\\t/// @notice This function allow us to buy a collection of minting offers\\n\\t/// @dev \\tThis function requires that the mintingOfferExists points to an valid offer  \\n\\t/// @param \\tofferIndex_  \\tContains index location of the offer\\n\\t/// @param \\ttokenIndexes\\tContains the collection of tokens that we want to mint\\n\\t/// @param \\trecipients \\t\\tContains the collection of addresses that will receive\\n\\tfunction buyMintingOfferBatch(\\n\\t\\tuint offerIndex_,\\n\\t\\tuint[] calldata tokenIndexes,\\n\\t\\taddress[] calldata recipients\\t\\t\\n\\t) external mintingOfferExists(offerIndex_) payable {\\n\\t\\trequire(tokenIndexes.length > 0, \\\"Minter Marketplace: No tokens sent!\\\");\\n\\t\\trequire(tokenIndexes.length == recipients.length, \\\"Minter Marketplace: Tokens and Addresses should have the same length\\\");\\n\\t\\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\\n\\t\\trequire(selectedOffer.visible, \\\"Minter Marketplace: This offer is not ready to be sold!\\\");\\n\\t\\trequire(hasMinterRole(selectedOffer.erc721Address), \\\"Minter Marketplace: This Marketplace isn't a Minter!\\\");\\n\\t\\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\\n\\t\\tuint i;\\n\\t\\tif (rangeData.rangePrice > 0) {\\n\\t\\t\\trequire((rangeData.rangePrice * tokenIndexes.length) <= msg.value, \\\"Minter Marketplace: Insufficient funds!\\\");\\n\\t\\t\\tif (msg.value - (rangeData.rangePrice * tokenIndexes.length) > 0) {\\n\\t\\t\\t\\tpayable(msg.sender).transfer(msg.value - (rangeData.rangePrice * tokenIndexes.length));\\n\\t\\t\\t}\\n\\t\\t\\tuint totalTransferred = (rangeData.rangePrice * tokenIndexes.length) * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\\n\\t\\t\\tpayable(selectedOffer.nodeAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.nodeFee / (100 * s.decimalPow));\\n\\t\\t\\tpayable(s.treasuryAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.treasuryFee / (100 * s.decimalPow));\\n\\t\\t\\tuint auxMoneyToBeSent;\\n\\t\\t\\tfor (i = 0; i < selectedOffer.fees.length; i++) {\\n\\t\\t\\t\\tauxMoneyToBeSent = (rangeData.rangePrice * tokenIndexes.length) * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\\n\\t\\t\\t\\ttotalTransferred += auxMoneyToBeSent;\\n\\t\\t\\t\\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\\n\\t\\t\\t}\\n\\t\\t\\trequire(totalTransferred == (rangeData.rangePrice * tokenIndexes.length), \\\"Minter Marketplace: Error transferring funds!\\\");\\n\\t\\t}\\n\\t\\tfor (i = 0; i < tokenIndexes.length; i++) {\\n\\t\\t\\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndexes[i], recipients[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice This function is in charge of buying a desired minting offer \\n\\t/// @param erc721Address  Contains the address where the offer is located\\n\\t/// @param rangeIndex\\t  Contains the index location of the range where the token is \\n\\t/// @param tokenIndex  \\t  Contains the index location of the token to buy \\n\\t/// @param recipient   \\t  Contains the address of the recipient of the token\\n\\tfunction _buyMintingOffer(address erc721Address, uint rangeIndex, uint tokenIndex, address recipient) internal {\\n\\t\\tIRAIR721(erc721Address).mintFromRange(recipient, rangeIndex, tokenIndex);\\n\\t\\temit MintedToken(erc721Address, rangeIndex, tokenIndex, recipient);\\n\\t}\\n}\",\"keccak256\":\"0xae4101d578b976c679fe70109ff986b07bcb99c89c6682a4149abc4076cfb6f4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5061325d8061001f6000396000f3fe6080604052600436106100f35760003560e01c80638bcccedb1161008a578063ca15c87311610059578063ca15c873146102bf578063d547741f146102df578063df275c6a146102ff578063e805488b1461033557600080fd5b80638bcccedb146102225780639010d07c1461023757806391d148541461026f578063a7a4e5651461029f57600080fd5b806334dbcd4a116100c657806334dbcd4a146101ac57806336568abe146101bf57806382ec0663146101df5780638b0e2e13146101f257600080fd5b806313bf8762146100f8578063248a9ca31461011a5780632a1da9821461015d5780632f2ff15d1461018c575b600080fd5b34801561010457600080fd5b506101186101133660046125fa565b610355565b005b34801561012657600080fd5b5061014a6101353660046126ac565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b34801561016957600080fd5b5061017d6101783660046126ac565b6103bc565b6040516101549392919061280b565b34801561019857600080fd5b506101186101a7366004612841565b610599565b6101186101ba3660046128b9565b6105c4565b3480156101cb57600080fd5b506101186101da366004612841565b610b25565b6101186101ed366004612933565b610ba3565b3480156101fe57600080fd5b5061021261020d366004612955565b610f66565b604051610154949392919061297f565b34801561022e57600080fd5b5060075461014a565b34801561024357600080fd5b50610257610252366004612933565b6111b0565b6040516001600160a01b039091168152602001610154565b34801561027b57600080fd5b5061028f61028a366004612841565b6111d1565b6040519015158152602001610154565b3480156102ab57600080fd5b506101186102ba3660046129bc565b6111fa565b3480156102cb57600080fd5b5061014a6102da3660046126ac565b61139e565b3480156102eb57600080fd5b506101186102fa366004612841565b6113b5565b34801561030b57600080fd5b5061014a61031a366004612a77565b6001600160a01b031660009081526009602052604090205490565b34801561034157600080fd5b50610118610350366004612b6c565b6113db565b6103b486868686808060200260200160405190810160405280939291908181526020016000905b828210156103a85761039960608302860136819003810190612c39565b8152602001906001019061037c565b5050505050858561140f565b505050505050565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091526104266040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000806000600701858154811061043f5761043f612c55565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156104fe576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b900460ff161515838501526001908101549183019190915290835290920191016104a2565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529195508592506001600160a01b039091169063c99931be90602401600060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058e9190810190612ccf565b949690955092505050565b6000828152602081905260409020600101546105b58133611a84565b6105bf8383611ae8565b505050565b600754859081106105f05760405162461bcd60e51b81526004016105e790612d82565b60405180910390fd5b836106495760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f20746f6b656e732073656044820152626e742160e81b60648201526084016105e7565b8382146106cc5760405162461bcd60e51b8152602060048201526044602482018190527f4d696e746572204d61726b6574706c6163653a20546f6b656e7320616e642041908201527f64647265737365732073686f756c642068617665207468652073616d65206c656064820152630dccee8d60e31b608482015260a4016105e7565b60008060070187815481106106e3576106e3612c55565b60009182526020909120600590910201600481015490915060ff1661071a5760405162461bcd60e51b81526004016105e790612dd2565b805461072e906001600160a01b0316611b80565b61074a5760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c19190810190612ccf565b5090506000808260a001511115610aac5760a082015134906107e4908990612e99565b11156108025760405162461bcd60e51b81526004016105e790612eb0565b60a0820151600090610815908990612e99565b61081f9034612ef7565b111561086f5760a082015133906108fc9061083b908a90612e99565b6108459034612ef7565b6040518115909202916000818181858888f1935050505015801561086d573d6000803e3d6000fd5b505b600354600090610880906064612e99565b6005546004546108909190612f0a565b60a08501516108a0908b90612e99565b6108aa9190612e99565b6108b49190612f1d565b60018501546003549192506001600160a01b0316906108fc906108d8906064612e99565b60045460a08701516108eb908d90612e99565b6108f59190612e99565b6108ff9190612f1d565b6040518115909202916000818181858888f19350505050158015610927573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610949906064612e99565b60055460a087015161095c908d90612e99565b6109669190612e99565b6109709190612f1d565b6040518115909202916000818181858888f19350505050158015610998573d6000803e3d6000fd5b5060008092505b6003850154831015610a7b576003546109b9906064612e99565b8560030184815481106109ce576109ce612c55565b9060005260206000209060020201600101548b8b90508660a001516109f39190612e99565b6109fd9190612e99565b610a079190612f1d565b9050610a138183612f0a565b9150846003018381548110610a2a57610a2a612c55565b600091825260208220600290910201546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610a6f573d6000803e3d6000fd5b5060019092019161099f565b60a0840151610a8b908a90612e99565b8214610aa95760405162461bcd60e51b81526004016105e790612f3f565b50505b5060005b86811015610b1a5782546002840154610b12916001600160a01b0316908a8a85818110610adf57610adf612c55565b90506020020135898986818110610af857610af8612c55565b9050602002016020810190610b0d9190612a77565b611c11565b600101610ab0565b505050505050505050565b6001600160a01b0381163314610b955760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e7565b610b9f8282611cd2565b5050565b60075482908110610bc65760405162461bcd60e51b81526004016105e790612d82565b6000806007018481548110610bdd57610bdd612c55565b60009182526020909120600590910201600481015490915060ff16610c145760405162461bcd60e51b81526004016105e790612dd2565b8054610c28906001600160a01b0316611b80565b610c445760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610c93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cbb9190810190612ccf565b5060a081015190915015610f4357348160a001511115610ced5760405162461bcd60e51b81526004016105e790612eb0565b60008160a0015134610cff9190612ef7565b1115610d445760a081015133906108fc90610d1a9034612ef7565b6040518115909202916000818181858888f19350505050158015610d42573d6000803e3d6000fd5b505b600354600090610d55906064612e99565b600554600454610d659190612f0a565b8360a00151610d749190612e99565b610d7e9190612f1d565b60018401546003549192506001600160a01b0316906108fc90610da2906064612e99565b60045460a0860151610db49190612e99565b610dbe9190612f1d565b6040518115909202916000818181858888f19350505050158015610de6573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610e08906064612e99565b60055460a0860151610e1a9190612e99565b610e249190612f1d565b6040518115909202916000818181858888f19350505050158015610e4c573d6000803e3d6000fd5b506000805b6003850154811015610f1c57600354610e6b906064612e99565b856003018281548110610e8057610e80612c55565b9060005260206000209060020201600101548560a00151610ea19190612e99565b610eab9190612f1d565b9150610eb78284612f0a565b9250846003018181548110610ece57610ece612c55565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015610f13573d6000803e3d6000fd5b50600101610e51565b508260a001518214610f405760405162461bcd60e51b81526004016105e790612f3f565b50505b81546002830154610f5f916001600160a01b0316908633611c11565b5050505050565b6040805160a08101825260008082526020820181905291810182905260608082015260808101829052610fcf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b03851660009081526009602052604081208054829160079188908110610ffe57610ffe612c55565b90600052602060002001548154811061101957611019612c55565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156110d8576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b900460ff1615158385015260019081015491830191909152908352909201910161107c565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529192506001600160a01b039091169063c99931be90602401600060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111659190810190612ccf565b6001600160a01b03891660009081526009602052604090208054929550909350908790811061119657611196612c55565b906000526020600020015494508093505092959194509250565b60008281526001602052604081206111c89083611d4b565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b856112535760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f206f66666572732073656044820152626e742160e81b60648201526084016105e7565b858214801561126157508382145b6112cc5760405162461bcd60e51b815260206004820152603660248201527f4d696e746572204d61726b6574706c6163653a204172726179732073686f756c6044820152750c840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b60648201526084016105e7565b60005b86811015610b1a57611396898989848181106112ed576112ed612c55565b9050602002013588888581811061130657611306612c55565b90506020028101906113189190612f8c565b808060200260200160405190810160405280939291908181526020016000905b828210156113645761135560608302860136819003810190612c39565b81526020019060010190611338565b505050505087878681811061137b5761137b612c55565b90506020020160208101906113909190612fd5565b8661140f565b6001016112cf565b60008181526001602052604081206111cb90611d57565b6000828152602081905260409020600101546113d18133611a84565b6105bf8383611cd2565b600754839081106113fe5760405162461bcd60e51b81526004016105e790612d82565b611409848484611d61565b50505050565b8461141981611b80565b6114355760405162461bcd60e51b81526004016105e790612e2f565b6001600160a01b0386166000908152600860209081526040808320888452909152902054869086901561147a5760405162461bcd60e51b81526004016105e790612ff9565b6001600160a01b03821660009081526008602090815260408083208484529091529020541580156114ac575060075415155b1561153d57816001600160a01b031660006007016000815481106114d2576114d2612c55565b60009182526020909120600590910201546001600160a01b0316141580611521575080600060070160008154811061150c5761150c612c55565b90600052602060002090600502016002015414155b61153d5760405162461bcd60e51b81526004016105e790612ff9565b611546886120e1565b506007805460018101825560009182526040516364cc98df60e11b815260059091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880191906001600160a01b038b169063c99931be906115af908c9060040190815260200190565b600060405180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115f49190810190612ccf565b50905060008160600151116116715760405162461bcd60e51b815260206004820152603860248201527f4d696e746572204d61726b6574706c6163653a204f6666657220646f65736e2760448201527f74206861766520746f6b656e7320617661696c61626c6521000000000000000060648201526084016105e7565b81546001600160a01b03808c166001600160a01b0319928316178455600184018054918916919092161790556002820189905560048201805488151560ff1990911617905560a0810151156119a8576005546004546000916116d291612f0a565b6003549091506000906116e6906064612e99565b828460a001516116f69190612e99565b6117009190612f1d565b905060005b8a518110156118ec578a818151811061172057611720612c55565b6020026020010151602001518061175b57506117598b828151811061174757611747612c55565b6020026020010151600001513b151590565b155b6117cd5760405162461bcd60e51b815260206004820152603f60248201527f4d696e746572204d61726b6574706c6163653a20436f6e74726163747320636160448201527f6e277420626520726563697069656e7473206f66207468652073706c6974730060648201526084016105e7565b6003546000906117de906064612e99565b8c83815181106117f0576117f0612c55565b6020026020010151604001518660a0015161180b9190612e99565b6118159190612f1d565b9050600081116118375760405162461bcd60e51b81526004016105e790613047565b6118418184612f0a565b92508b828151811061185557611855612c55565b6020026020010151604001518461186c9190612f0a565b9350856003018c838151811061188457611884612c55565b60209081029190910181015182546001818101855560009485529383902082516002909202018054938301511515600160a01b026001600160a81b03199094166001600160a01b03909216919091179290921782556040015190820155919091019050611705565b506003546118fb906064612e99565b82146119195760405162461bcd60e51b81526004016105e7906130bb565b8260a0015181146119a55760405162461bcd60e51b815260206004820152604a60248201527f4d696e746572204d61726b6574706c6163653a2043757272656e74206665652060448201527f636f6e66696775726174696f6e2077696c6c20726573756c7420696e206d697360648201526973696e672066756e647360b01b608482015260a4016105e7565b50505b6001600160a01b038a1660009081526009602052604090206007546119cf90600190612ef7565b8154600181810184556000938452602090932001556007546119f19190612ef7565b6001600160a01b038b1660009081526008602090815260408083208d845290915290205560c081015160a082015189516007547f2dbafc19fe6977f2e69a6f341c1cbeae0bcb75da97b336801f1bb6b7ecd27a29938e938e9391929091908d90611a5d90600190612ef7565b604051611a709796959493929190613108565b60405180910390a150505050505050505050565b611a8e82826111d1565b610b9f57611aa6816001600160a01b03166014612261565b611ab1836020612261565b604051602001611ac2929190613155565b60408051601f198184030181529082905262461bcd60e51b82526105e7916004016131ca565b611af282826111d1565b610b9f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526001602052604090206105bf90826123e1565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb91906131dd565b60405163e766224360e01b81526001600160a01b038281166004830152602482018590526044820184905285169063e766224390606401600060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b5050604080516001600160a01b038881168252602082018890528183018790528516606082015290517f0dd9e6b4baafd1387e6f21dbe1004e4f6240e1abd6f95d63234578da7d40469b9350908190036080019150a150505050565b611cdc82826111d1565b15610b9f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526001602052604090206105bf90826123f6565b60006111c8838361240b565b60006111cb825490565b6000806007018481548110611d7857611d78612c55565b600091825260209091206005909102018054909150611d9f906001600160a01b03166120e1565b508054611db4906001600160a01b0316611b80565b611dd05760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015611e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e479190810190612ccf565b50600554600454919250600091611e5e9190612f0a565b9050611e6e600384016000612577565b60005b855181101561203057858181518110611e8c57611e8c612c55565b60200260200101516020015180611eb55750611eb386828151811061174757611747612c55565b155b611f275760405162461bcd60e51b815260206004820152603960248201527f4d696e746572204d61726b6574706c6163653a20436f6e74726163747320636160448201527f6e277420626520726563697069656e7473206f6620666565730000000000000060648201526084016105e7565b600354600090611f38906064612e99565b878381518110611f4a57611f4a612c55565b6020026020010151604001518560a00151611f659190612e99565b611f6f9190612f1d565b11611f8c5760405162461bcd60e51b81526004016105e790613047565b858181518110611f9e57611f9e612c55565b60200260200101516040015182611fb59190612f0a565b915083600301868281518110611fcd57611fcd612c55565b60209081029190910181015182546001818101855560009485529383902082516002909202018054938301511515600160a01b026001600160a81b03199094166001600160a01b0390921691909117929092178255604001519082015501611e71565b5060035461203f906064612e99565b811461205d5760405162461bcd60e51b81526004016105e7906130bb565b60048301805460ff1916851515908117909155835460028501546003860154604080516001600160a01b03909416845260208401929092529082015260ff90911615156060820152608081018790527ff9aa099c7d91e9bd33886c159620aeba7e2d9bd460bf94282df788a0af93787f9060a00160405180910390a1505050505050565b604051632474521560e21b8152600060048201819052336024830152906001600160a01b038316906391d1485490604401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215391906131dd565b806121e75750604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa1580156121c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e791906131dd565b6122595760405162461bcd60e51b815260206004820152603d60248201527f4d696e746572204d61726b6574706c6163653a2053656e6465722069736e277460448201527f207468652063726561746f72206f662074686520636f6e74726163742100000060648201526084016105e7565b506001919050565b6060826000612271846002612e99565b61227c906002612f0a565b67ffffffffffffffff81111561229457612294612a92565b6040519080825280601f01601f1916602001820160405280156122be576020820181803683370190505b509050600360fc1b816000815181106122d9576122d9612c55565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061230857612308612c55565b60200101906001600160f81b031916908160001a905350600061232c856002612e99565b612337906001612f0a565b90505b60018111156123af576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061236b5761236b612c55565b1a60f81b82828151811061238157612381612c55565b60200101906001600160f81b031916908160001a90535060049290921c916123a8816131fa565b905061233a565b5081156123d95760405163e22e27eb60e01b815260048101869052602481018590526044016105e7565b949350505050565b60006111c8836001600160a01b038416612435565b60006111c8836001600160a01b038416612484565b600082600001828154811061242257612422612c55565b9060005260206000200154905092915050565b600081815260018301602052604081205461247c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111cb565b5060006111cb565b6000818152600183016020526040812054801561256d5760006124a8600183612ef7565b85549091506000906124bc90600190612ef7565b90508082146125215760008660000182815481106124dc576124dc612c55565b90600052602060002001549050808760000184815481106124ff576124ff612c55565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061253257612532613211565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111cb565b60009150506111cb565b5080546000825560020290600052602060002090810190612598919061259b565b50565b5b808211156125c15780546001600160a81b03191681556000600182015560020161259c565b5090565b80356001600160a01b03811681146125dc57600080fd5b919050565b801515811461259857600080fd5b80356125dc816125e1565b60008060008060008060a0878903121561261357600080fd5b61261c876125c5565b955060208701359450604087013567ffffffffffffffff8082111561264057600080fd5b818901915089601f83011261265457600080fd5b81358181111561266357600080fd5b8a602060608302850101111561267857600080fd5b6020830196508095505050506060870135612692816125e1565b91506126a0608088016125c5565b90509295509295509295565b6000602082840312156126be57600080fd5b5035919050565b600060a0830160018060a01b03808451168552602081818601511681870152604080860151604088015260608087015160a060608a015285815180885260c08b0191508583019750600092505b808310156127475787518051881683528681015115158784015285015185830152968501966001929092019190830190612712565b506080890151965061275d60808b018815159052565b9998505050505050505050565b60005b8381101561278557818101518382015260200161276d565b50506000910152565b600081518084526127a681602086016020860161276a565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c08501526123d960e085018261278e565b60608152600061281e60608301866126c5565b828103602084015261283081866127ba565b915050826040830152949350505050565b6000806040838503121561285457600080fd5b82359150612864602084016125c5565b90509250929050565b60008083601f84011261287f57600080fd5b50813567ffffffffffffffff81111561289757600080fd5b6020830191508360208260051b85010111156128b257600080fd5b9250929050565b6000806000806000606086880312156128d157600080fd5b85359450602086013567ffffffffffffffff808211156128f057600080fd5b6128fc89838a0161286d565b9096509450604088013591508082111561291557600080fd5b506129228882890161286d565b969995985093965092949392505050565b6000806040838503121561294657600080fd5b50508035926020909101359150565b6000806040838503121561296857600080fd5b612971836125c5565b946020939093013593505050565b84815260806020820152600061299860808301866126c5565b82810360408401526129aa81866127ba565b91505082606083015295945050505050565b60008060008060008060008060a0898b0312156129d857600080fd5b6129e1896125c5565b9750602089013567ffffffffffffffff808211156129fe57600080fd5b612a0a8c838d0161286d565b909950975060408b0135915080821115612a2357600080fd5b612a2f8c838d0161286d565b909750955060608b0135915080821115612a4857600080fd5b50612a558b828c0161286d565b9094509250612a68905060808a016125c5565b90509295985092959890939650565b600060208284031215612a8957600080fd5b6111c8826125c5565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612acb57612acb612a92565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612afa57612afa612a92565b604052919050565b600060608284031215612b1457600080fd5b6040516060810181811067ffffffffffffffff82111715612b3757612b37612a92565b604052905080612b46836125c5565b81526020830135612b56816125e1565b6020820152604092830135920191909152919050565b60008060006060808587031215612b8257600080fd5b8435935060208086013567ffffffffffffffff80821115612ba257600080fd5b818801915088601f830112612bb657600080fd5b813581811115612bc857612bc8612a92565b612bd6848260051b01612ad1565b8181528481019250606090910283018401908a821115612bf557600080fd5b928401925b81841015612c1b57612c0c8b85612b02565b83529285019291840191612bfa565b809750505050505050612c30604085016125ef565b90509250925092565b600060608284031215612c4b57600080fd5b6111c88383612b02565b634e487b7160e01b600052603260045260246000fd5b600082601f830112612c7c57600080fd5b815167ffffffffffffffff811115612c9657612c96612a92565b612ca9601f8201601f1916602001612ad1565b818152846020838601011115612cbe57600080fd5b6123d982602083016020870161276a565b60008060408385031215612ce257600080fd5b825167ffffffffffffffff80821115612cfa57600080fd5b9084019060e08287031215612d0e57600080fd5b612d16612aa8565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115612d5e57600080fd5b612d6a88828601612c6b565b60c08301525060209590950151949694955050505050565b60208082526030908201527f4d696e74696e67204d61726b6574706c6163653a204d696e74696e67204f666660408201526f195c88191bd95cdb89dd08195e1a5cdd60821b606082015260800190565b60208082526037908201527f4d696e746572204d61726b6574706c6163653a2054686973206f66666572206960408201527f73206e6f7420726561647920746f20626520736f6c6421000000000000000000606082015260800190565b60208082526034908201527f4d696e746572204d61726b6574706c6163653a2054686973204d61726b6574706040820152736c6163652069736e27742061204d696e7465722160601b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111cb576111cb612e83565b60208082526027908201527f4d696e746572204d61726b6574706c6163653a20496e73756666696369656e746040820152662066756e64732160c81b606082015260800190565b818103818111156111cb576111cb612e83565b808201808211156111cb576111cb612e83565b600082612f3a57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204572726f72207472616e736660408201526c657272696e672066756e64732160981b606082015260800190565b6000808335601e19843603018112612fa357600080fd5b83018035915067ffffffffffffffff821115612fbe57600080fd5b60200191506060810236038213156128b257600080fd5b600060208284031215612fe757600080fd5b8135612ff2816125e1565b9392505050565b6020808252602e908201527f4d696e746572204d61726b6574706c6163653a2052616e676520616c7265616460408201526d3c903430b99030b71037b33332b960911b606082015260800190565b6020808252604e908201527f4d696e746572204d61726b6574706c6163653a20412070657263656e7461676560408201527f206f6e207468652061727261792077696c6c20726573756c7420696e20616e2060608201526d32b6b83a3c903a3930b739b332b960911b608082015260a00190565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204665657320646f6e2774206160408201526c646420757020746f203130302560981b606082015260800190565b60018060a01b038816815286602082015260e06040820152600061312f60e083018861278e565b606083019690965250608081019390935290151560a083015260c0909101529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161318d81601785016020880161276a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131be81602884016020880161276a565b01602801949350505050565b6020815260006111c8602083018461278e565b6000602082840312156131ef57600080fd5b8151612ff2816125e1565b60008161320957613209612e83565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cb4f32b758a1aa66b5492ea7ee8ac5aae9afd06a9ef3b6b577998bb8b5aa822064736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638bcccedb1161008a578063ca15c87311610059578063ca15c873146102bf578063d547741f146102df578063df275c6a146102ff578063e805488b1461033557600080fd5b80638bcccedb146102225780639010d07c1461023757806391d148541461026f578063a7a4e5651461029f57600080fd5b806334dbcd4a116100c657806334dbcd4a146101ac57806336568abe146101bf57806382ec0663146101df5780638b0e2e13146101f257600080fd5b806313bf8762146100f8578063248a9ca31461011a5780632a1da9821461015d5780632f2ff15d1461018c575b600080fd5b34801561010457600080fd5b506101186101133660046125fa565b610355565b005b34801561012657600080fd5b5061014a6101353660046126ac565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b34801561016957600080fd5b5061017d6101783660046126ac565b6103bc565b6040516101549392919061280b565b34801561019857600080fd5b506101186101a7366004612841565b610599565b6101186101ba3660046128b9565b6105c4565b3480156101cb57600080fd5b506101186101da366004612841565b610b25565b6101186101ed366004612933565b610ba3565b3480156101fe57600080fd5b5061021261020d366004612955565b610f66565b604051610154949392919061297f565b34801561022e57600080fd5b5060075461014a565b34801561024357600080fd5b50610257610252366004612933565b6111b0565b6040516001600160a01b039091168152602001610154565b34801561027b57600080fd5b5061028f61028a366004612841565b6111d1565b6040519015158152602001610154565b3480156102ab57600080fd5b506101186102ba3660046129bc565b6111fa565b3480156102cb57600080fd5b5061014a6102da3660046126ac565b61139e565b3480156102eb57600080fd5b506101186102fa366004612841565b6113b5565b34801561030b57600080fd5b5061014a61031a366004612a77565b6001600160a01b031660009081526009602052604090205490565b34801561034157600080fd5b50610118610350366004612b6c565b6113db565b6103b486868686808060200260200160405190810160405280939291908181526020016000905b828210156103a85761039960608302860136819003810190612c39565b8152602001906001019061037c565b5050505050858561140f565b505050505050565b6040805160a08101825260008082526020820181905291810182905260608082015260808101919091526104266040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000806000600701858154811061043f5761043f612c55565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156104fe576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b900460ff161515838501526001908101549183019190915290835290920191016104a2565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529195508592506001600160a01b039091169063c99931be90602401600060405180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058e9190810190612ccf565b949690955092505050565b6000828152602081905260409020600101546105b58133611a84565b6105bf8383611ae8565b505050565b600754859081106105f05760405162461bcd60e51b81526004016105e790612d82565b60405180910390fd5b836106495760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f20746f6b656e732073656044820152626e742160e81b60648201526084016105e7565b8382146106cc5760405162461bcd60e51b8152602060048201526044602482018190527f4d696e746572204d61726b6574706c6163653a20546f6b656e7320616e642041908201527f64647265737365732073686f756c642068617665207468652073616d65206c656064820152630dccee8d60e31b608482015260a4016105e7565b60008060070187815481106106e3576106e3612c55565b60009182526020909120600590910201600481015490915060ff1661071a5760405162461bcd60e51b81526004016105e790612dd2565b805461072e906001600160a01b0316611b80565b61074a5760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c19190810190612ccf565b5090506000808260a001511115610aac5760a082015134906107e4908990612e99565b11156108025760405162461bcd60e51b81526004016105e790612eb0565b60a0820151600090610815908990612e99565b61081f9034612ef7565b111561086f5760a082015133906108fc9061083b908a90612e99565b6108459034612ef7565b6040518115909202916000818181858888f1935050505015801561086d573d6000803e3d6000fd5b505b600354600090610880906064612e99565b6005546004546108909190612f0a565b60a08501516108a0908b90612e99565b6108aa9190612e99565b6108b49190612f1d565b60018501546003549192506001600160a01b0316906108fc906108d8906064612e99565b60045460a08701516108eb908d90612e99565b6108f59190612e99565b6108ff9190612f1d565b6040518115909202916000818181858888f19350505050158015610927573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610949906064612e99565b60055460a087015161095c908d90612e99565b6109669190612e99565b6109709190612f1d565b6040518115909202916000818181858888f19350505050158015610998573d6000803e3d6000fd5b5060008092505b6003850154831015610a7b576003546109b9906064612e99565b8560030184815481106109ce576109ce612c55565b9060005260206000209060020201600101548b8b90508660a001516109f39190612e99565b6109fd9190612e99565b610a079190612f1d565b9050610a138183612f0a565b9150846003018381548110610a2a57610a2a612c55565b600091825260208220600290910201546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610a6f573d6000803e3d6000fd5b5060019092019161099f565b60a0840151610a8b908a90612e99565b8214610aa95760405162461bcd60e51b81526004016105e790612f3f565b50505b5060005b86811015610b1a5782546002840154610b12916001600160a01b0316908a8a85818110610adf57610adf612c55565b90506020020135898986818110610af857610af8612c55565b9050602002016020810190610b0d9190612a77565b611c11565b600101610ab0565b505050505050505050565b6001600160a01b0381163314610b955760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105e7565b610b9f8282611cd2565b5050565b60075482908110610bc65760405162461bcd60e51b81526004016105e790612d82565b6000806007018481548110610bdd57610bdd612c55565b60009182526020909120600590910201600481015490915060ff16610c145760405162461bcd60e51b81526004016105e790612dd2565b8054610c28906001600160a01b0316611b80565b610c445760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015610c93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cbb9190810190612ccf565b5060a081015190915015610f4357348160a001511115610ced5760405162461bcd60e51b81526004016105e790612eb0565b60008160a0015134610cff9190612ef7565b1115610d445760a081015133906108fc90610d1a9034612ef7565b6040518115909202916000818181858888f19350505050158015610d42573d6000803e3d6000fd5b505b600354600090610d55906064612e99565b600554600454610d659190612f0a565b8360a00151610d749190612e99565b610d7e9190612f1d565b60018401546003549192506001600160a01b0316906108fc90610da2906064612e99565b60045460a0860151610db49190612e99565b610dbe9190612f1d565b6040518115909202916000818181858888f19350505050158015610de6573d6000803e3d6000fd5b506006546003546001600160a01b03909116906108fc90610e08906064612e99565b60055460a0860151610e1a9190612e99565b610e249190612f1d565b6040518115909202916000818181858888f19350505050158015610e4c573d6000803e3d6000fd5b506000805b6003850154811015610f1c57600354610e6b906064612e99565b856003018281548110610e8057610e80612c55565b9060005260206000209060020201600101548560a00151610ea19190612e99565b610eab9190612f1d565b9150610eb78284612f0a565b9250846003018181548110610ece57610ece612c55565b600091825260208220600290910201546040516001600160a01b039091169184156108fc02918591818181858888f19350505050158015610f13573d6000803e3d6000fd5b50600101610e51565b508260a001518214610f405760405162461bcd60e51b81526004016105e790612f3f565b50505b81546002830154610f5f916001600160a01b0316908633611c11565b5050505050565b6040805160a08101825260008082526020820181905291810182905260608082015260808101829052610fcf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b03851660009081526009602052604081208054829160079188908110610ffe57610ffe612c55565b90600052602060002001548154811061101957611019612c55565b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015416848401526002810154848301526003810180548351818602810186019094528084529495919460608701949192909184015b828210156110d8576000848152602090819020604080516060810182526002860290920180546001600160a01b0381168452600160a01b900460ff1615158385015260019081015491830191909152908352909201910161107c565b5050509082525060049182015460ff161515602090910152815160408084015190516364cc98df60e11b8152928301529192506001600160a01b039091169063c99931be90602401600060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111659190810190612ccf565b6001600160a01b03891660009081526009602052604090208054929550909350908790811061119657611196612c55565b906000526020600020015494508093505092959194509250565b60008281526001602052604081206111c89083611d4b565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b856112535760405162461bcd60e51b815260206004820152602360248201527f4d696e746572204d61726b6574706c6163653a204e6f206f66666572732073656044820152626e742160e81b60648201526084016105e7565b858214801561126157508382145b6112cc5760405162461bcd60e51b815260206004820152603660248201527f4d696e746572204d61726b6574706c6163653a204172726179732073686f756c6044820152750c840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b60648201526084016105e7565b60005b86811015610b1a57611396898989848181106112ed576112ed612c55565b9050602002013588888581811061130657611306612c55565b90506020028101906113189190612f8c565b808060200260200160405190810160405280939291908181526020016000905b828210156113645761135560608302860136819003810190612c39565b81526020019060010190611338565b505050505087878681811061137b5761137b612c55565b90506020020160208101906113909190612fd5565b8661140f565b6001016112cf565b60008181526001602052604081206111cb90611d57565b6000828152602081905260409020600101546113d18133611a84565b6105bf8383611cd2565b600754839081106113fe5760405162461bcd60e51b81526004016105e790612d82565b611409848484611d61565b50505050565b8461141981611b80565b6114355760405162461bcd60e51b81526004016105e790612e2f565b6001600160a01b0386166000908152600860209081526040808320888452909152902054869086901561147a5760405162461bcd60e51b81526004016105e790612ff9565b6001600160a01b03821660009081526008602090815260408083208484529091529020541580156114ac575060075415155b1561153d57816001600160a01b031660006007016000815481106114d2576114d2612c55565b60009182526020909120600590910201546001600160a01b0316141580611521575080600060070160008154811061150c5761150c612c55565b90600052602060002090600502016002015414155b61153d5760405162461bcd60e51b81526004016105e790612ff9565b611546886120e1565b506007805460018101825560009182526040516364cc98df60e11b815260059091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880191906001600160a01b038b169063c99931be906115af908c9060040190815260200190565b600060405180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115f49190810190612ccf565b50905060008160600151116116715760405162461bcd60e51b815260206004820152603860248201527f4d696e746572204d61726b6574706c6163653a204f6666657220646f65736e2760448201527f74206861766520746f6b656e7320617661696c61626c6521000000000000000060648201526084016105e7565b81546001600160a01b03808c166001600160a01b0319928316178455600184018054918916919092161790556002820189905560048201805488151560ff1990911617905560a0810151156119a8576005546004546000916116d291612f0a565b6003549091506000906116e6906064612e99565b828460a001516116f69190612e99565b6117009190612f1d565b905060005b8a518110156118ec578a818151811061172057611720612c55565b6020026020010151602001518061175b57506117598b828151811061174757611747612c55565b6020026020010151600001513b151590565b155b6117cd5760405162461bcd60e51b815260206004820152603f60248201527f4d696e746572204d61726b6574706c6163653a20436f6e74726163747320636160448201527f6e277420626520726563697069656e7473206f66207468652073706c6974730060648201526084016105e7565b6003546000906117de906064612e99565b8c83815181106117f0576117f0612c55565b6020026020010151604001518660a0015161180b9190612e99565b6118159190612f1d565b9050600081116118375760405162461bcd60e51b81526004016105e790613047565b6118418184612f0a565b92508b828151811061185557611855612c55565b6020026020010151604001518461186c9190612f0a565b9350856003018c838151811061188457611884612c55565b60209081029190910181015182546001818101855560009485529383902082516002909202018054938301511515600160a01b026001600160a81b03199094166001600160a01b03909216919091179290921782556040015190820155919091019050611705565b506003546118fb906064612e99565b82146119195760405162461bcd60e51b81526004016105e7906130bb565b8260a0015181146119a55760405162461bcd60e51b815260206004820152604a60248201527f4d696e746572204d61726b6574706c6163653a2043757272656e74206665652060448201527f636f6e66696775726174696f6e2077696c6c20726573756c7420696e206d697360648201526973696e672066756e647360b01b608482015260a4016105e7565b50505b6001600160a01b038a1660009081526009602052604090206007546119cf90600190612ef7565b8154600181810184556000938452602090932001556007546119f19190612ef7565b6001600160a01b038b1660009081526008602090815260408083208d845290915290205560c081015160a082015189516007547f2dbafc19fe6977f2e69a6f341c1cbeae0bcb75da97b336801f1bb6b7ecd27a29938e938e9391929091908d90611a5d90600190612ef7565b604051611a709796959493929190613108565b60405180910390a150505050505050505050565b611a8e82826111d1565b610b9f57611aa6816001600160a01b03166014612261565b611ab1836020612261565b604051602001611ac2929190613155565b60408051601f198184030181529082905262461bcd60e51b82526105e7916004016131ca565b611af282826111d1565b610b9f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526001602052604090206105bf90826123e1565b604051632474521560e21b81527ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc960048201523060248201526000906001600160a01b038316906391d1485490604401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb91906131dd565b60405163e766224360e01b81526001600160a01b038281166004830152602482018590526044820184905285169063e766224390606401600060405180830381600087803b158015611c6257600080fd5b505af1158015611c76573d6000803e3d6000fd5b5050604080516001600160a01b038881168252602082018890528183018790528516606082015290517f0dd9e6b4baafd1387e6f21dbe1004e4f6240e1abd6f95d63234578da7d40469b9350908190036080019150a150505050565b611cdc82826111d1565b15610b9f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526001602052604090206105bf90826123f6565b60006111c8838361240b565b60006111cb825490565b6000806007018481548110611d7857611d78612c55565b600091825260209091206005909102018054909150611d9f906001600160a01b03166120e1565b508054611db4906001600160a01b0316611b80565b611dd05760405162461bcd60e51b81526004016105e790612e2f565b805460028201546040516364cc98df60e11b815260048101919091526000916001600160a01b03169063c99931be90602401600060405180830381865afa158015611e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e479190810190612ccf565b50600554600454919250600091611e5e9190612f0a565b9050611e6e600384016000612577565b60005b855181101561203057858181518110611e8c57611e8c612c55565b60200260200101516020015180611eb55750611eb386828151811061174757611747612c55565b155b611f275760405162461bcd60e51b815260206004820152603960248201527f4d696e746572204d61726b6574706c6163653a20436f6e74726163747320636160448201527f6e277420626520726563697069656e7473206f6620666565730000000000000060648201526084016105e7565b600354600090611f38906064612e99565b878381518110611f4a57611f4a612c55565b6020026020010151604001518560a00151611f659190612e99565b611f6f9190612f1d565b11611f8c5760405162461bcd60e51b81526004016105e790613047565b858181518110611f9e57611f9e612c55565b60200260200101516040015182611fb59190612f0a565b915083600301868281518110611fcd57611fcd612c55565b60209081029190910181015182546001818101855560009485529383902082516002909202018054938301511515600160a01b026001600160a81b03199094166001600160a01b0390921691909117929092178255604001519082015501611e71565b5060035461203f906064612e99565b811461205d5760405162461bcd60e51b81526004016105e7906130bb565b60048301805460ff1916851515908117909155835460028501546003860154604080516001600160a01b03909416845260208401929092529082015260ff90911615156060820152608081018790527ff9aa099c7d91e9bd33886c159620aeba7e2d9bd460bf94282df788a0af93787f9060a00160405180910390a1505050505050565b604051632474521560e21b8152600060048201819052336024830152906001600160a01b038316906391d1485490604401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215391906131dd565b806121e75750604051632474521560e21b81527f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db660048201523360248201526001600160a01b038316906391d1485490604401602060405180830381865afa1580156121c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e791906131dd565b6122595760405162461bcd60e51b815260206004820152603d60248201527f4d696e746572204d61726b6574706c6163653a2053656e6465722069736e277460448201527f207468652063726561746f72206f662074686520636f6e74726163742100000060648201526084016105e7565b506001919050565b6060826000612271846002612e99565b61227c906002612f0a565b67ffffffffffffffff81111561229457612294612a92565b6040519080825280601f01601f1916602001820160405280156122be576020820181803683370190505b509050600360fc1b816000815181106122d9576122d9612c55565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061230857612308612c55565b60200101906001600160f81b031916908160001a905350600061232c856002612e99565b612337906001612f0a565b90505b60018111156123af576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061236b5761236b612c55565b1a60f81b82828151811061238157612381612c55565b60200101906001600160f81b031916908160001a90535060049290921c916123a8816131fa565b905061233a565b5081156123d95760405163e22e27eb60e01b815260048101869052602481018590526044016105e7565b949350505050565b60006111c8836001600160a01b038416612435565b60006111c8836001600160a01b038416612484565b600082600001828154811061242257612422612c55565b9060005260206000200154905092915050565b600081815260018301602052604081205461247c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111cb565b5060006111cb565b6000818152600183016020526040812054801561256d5760006124a8600183612ef7565b85549091506000906124bc90600190612ef7565b90508082146125215760008660000182815481106124dc576124dc612c55565b90600052602060002001549050808760000184815481106124ff576124ff612c55565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061253257612532613211565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111cb565b60009150506111cb565b5080546000825560020290600052602060002090810190612598919061259b565b50565b5b808211156125c15780546001600160a81b03191681556000600182015560020161259c565b5090565b80356001600160a01b03811681146125dc57600080fd5b919050565b801515811461259857600080fd5b80356125dc816125e1565b60008060008060008060a0878903121561261357600080fd5b61261c876125c5565b955060208701359450604087013567ffffffffffffffff8082111561264057600080fd5b818901915089601f83011261265457600080fd5b81358181111561266357600080fd5b8a602060608302850101111561267857600080fd5b6020830196508095505050506060870135612692816125e1565b91506126a0608088016125c5565b90509295509295509295565b6000602082840312156126be57600080fd5b5035919050565b600060a0830160018060a01b03808451168552602081818601511681870152604080860151604088015260608087015160a060608a015285815180885260c08b0191508583019750600092505b808310156127475787518051881683528681015115158784015285015185830152968501966001929092019190830190612712565b506080890151965061275d60808b018815159052565b9998505050505050505050565b60005b8381101561278557818101518382015260200161276d565b50506000910152565b600081518084526127a681602086016020860161276a565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c08501526123d960e085018261278e565b60608152600061281e60608301866126c5565b828103602084015261283081866127ba565b915050826040830152949350505050565b6000806040838503121561285457600080fd5b82359150612864602084016125c5565b90509250929050565b60008083601f84011261287f57600080fd5b50813567ffffffffffffffff81111561289757600080fd5b6020830191508360208260051b85010111156128b257600080fd5b9250929050565b6000806000806000606086880312156128d157600080fd5b85359450602086013567ffffffffffffffff808211156128f057600080fd5b6128fc89838a0161286d565b9096509450604088013591508082111561291557600080fd5b506129228882890161286d565b969995985093965092949392505050565b6000806040838503121561294657600080fd5b50508035926020909101359150565b6000806040838503121561296857600080fd5b612971836125c5565b946020939093013593505050565b84815260806020820152600061299860808301866126c5565b82810360408401526129aa81866127ba565b91505082606083015295945050505050565b60008060008060008060008060a0898b0312156129d857600080fd5b6129e1896125c5565b9750602089013567ffffffffffffffff808211156129fe57600080fd5b612a0a8c838d0161286d565b909950975060408b0135915080821115612a2357600080fd5b612a2f8c838d0161286d565b909750955060608b0135915080821115612a4857600080fd5b50612a558b828c0161286d565b9094509250612a68905060808a016125c5565b90509295985092959890939650565b600060208284031215612a8957600080fd5b6111c8826125c5565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612acb57612acb612a92565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612afa57612afa612a92565b604052919050565b600060608284031215612b1457600080fd5b6040516060810181811067ffffffffffffffff82111715612b3757612b37612a92565b604052905080612b46836125c5565b81526020830135612b56816125e1565b6020820152604092830135920191909152919050565b60008060006060808587031215612b8257600080fd5b8435935060208086013567ffffffffffffffff80821115612ba257600080fd5b818801915088601f830112612bb657600080fd5b813581811115612bc857612bc8612a92565b612bd6848260051b01612ad1565b8181528481019250606090910283018401908a821115612bf557600080fd5b928401925b81841015612c1b57612c0c8b85612b02565b83529285019291840191612bfa565b809750505050505050612c30604085016125ef565b90509250925092565b600060608284031215612c4b57600080fd5b6111c88383612b02565b634e487b7160e01b600052603260045260246000fd5b600082601f830112612c7c57600080fd5b815167ffffffffffffffff811115612c9657612c96612a92565b612ca9601f8201601f1916602001612ad1565b818152846020838601011115612cbe57600080fd5b6123d982602083016020870161276a565b60008060408385031215612ce257600080fd5b825167ffffffffffffffff80821115612cfa57600080fd5b9084019060e08287031215612d0e57600080fd5b612d16612aa8565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115612d5e57600080fd5b612d6a88828601612c6b565b60c08301525060209590950151949694955050505050565b60208082526030908201527f4d696e74696e67204d61726b6574706c6163653a204d696e74696e67204f666660408201526f195c88191bd95cdb89dd08195e1a5cdd60821b606082015260800190565b60208082526037908201527f4d696e746572204d61726b6574706c6163653a2054686973206f66666572206960408201527f73206e6f7420726561647920746f20626520736f6c6421000000000000000000606082015260800190565b60208082526034908201527f4d696e746572204d61726b6574706c6163653a2054686973204d61726b6574706040820152736c6163652069736e27742061204d696e7465722160601b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176111cb576111cb612e83565b60208082526027908201527f4d696e746572204d61726b6574706c6163653a20496e73756666696369656e746040820152662066756e64732160c81b606082015260800190565b818103818111156111cb576111cb612e83565b808201808211156111cb576111cb612e83565b600082612f3a57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204572726f72207472616e736660408201526c657272696e672066756e64732160981b606082015260800190565b6000808335601e19843603018112612fa357600080fd5b83018035915067ffffffffffffffff821115612fbe57600080fd5b60200191506060810236038213156128b257600080fd5b600060208284031215612fe757600080fd5b8135612ff2816125e1565b9392505050565b6020808252602e908201527f4d696e746572204d61726b6574706c6163653a2052616e676520616c7265616460408201526d3c903430b99030b71037b33332b960911b606082015260800190565b6020808252604e908201527f4d696e746572204d61726b6574706c6163653a20412070657263656e7461676560408201527f206f6e207468652061727261792077696c6c20726573756c7420696e20616e2060608201526d32b6b83a3c903a3930b739b332b960911b608082015260a00190565b6020808252602d908201527f4d696e746572204d61726b6574706c6163653a204665657320646f6e2774206160408201526c646420757020746f203130302560981b606082015260800190565b60018060a01b038816815286602082015260e06040820152600061312f60e083018861278e565b606083019690965250608081019390935290151560a083015260c0909101529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161318d81601785016020880161276a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131be81602884016020880161276a565b01602801949350505050565b6020815260006111c8602083018461278e565b6000602082840312156131ef57600080fd5b8151612ff2816125e1565b60008161320957613209612e83565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cb4f32b758a1aa66b5492ea7ee8ac5aae9afd06a9ef3b6b577998bb8b5aa822064736f6c63430008190033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerableMarket",
    "errors": {
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "AddedMintingOffer(address,uint256,string,uint256,uint256,bool,uint256)": {
        "params": {
          "erc721Address": "Contains the address of the erc721",
          "feeSplitsLength": "Contains the visibility of the offer",
          "offerIndex": "contains the new status of the offer",
          "price": "Contains the price of the offer fot the token",
          "rangeIndex": "contains the id of the minted token",
          "rangeName": "contains the name of the range where the token is"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "contains the new status of the role",
          "previousAdminRole": "contains the previous status of the role",
          "role": "Contains the role we want to update"
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to grant the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to revoke the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addMintingOffer(address,uint256,(address,bool,uint256)[],bool,address)": {
        "params": {
          "erc721Address_": "Contains the address of the minter marketplace contract",
          "nodeAddress_": "Contains address of the node where the offer was placed",
          "rangeIndex_": "Contains the index location of the range where the offer will be placed",
          "splits": "Contains the shares and address to pay when the offer is succesfull ",
          "visible_": "Contains a boolean to set if the offer is public or not "
        }
      },
      "addMintingOfferBatch(address,uint256[],(address,bool,uint256)[][],bool[],address)": {
        "params": {
          "erc721Address_": "Contains the address of the minter marketplace contract",
          "nodeAddress_": "Contains address of the node where the offer was placed",
          "rangeIndexes": "Contains the collection of ranges where the offer will be placed",
          "splits": "Contains the shares and address to pay when the offer is succesfull ",
          "visibility": "Contains a collection of booleans that set the offer as public or not "
        }
      },
      "buyMintingOffer(uint256,uint256)": {
        "details": "This function requires that the mintingOfferExists points to an valid offer  ",
        "params": {
          "offerIndex_": "Contains index location of the offer",
          "tokenIndex_": "Contains the id of the tokens that we want to mint"
        }
      },
      "buyMintingOfferBatch(uint256,uint256[],address[])": {
        "details": "This function requires that the mintingOfferExists points to an valid offer  ",
        "params": {
          "offerIndex_": "Contains index location of the offer",
          "recipients": "Contains the collection of addresses that will receive",
          "tokenIndexes": "Contains the collection of tokens that we want to mint"
        }
      },
      "getOfferInfo(uint256)": {
        "params": {
          "offerIndex": "Contains the facet addresses and function selectors"
        },
        "returns": {
          "mintOffer": "Show us the information about the minting offer ",
          "productIndex": "Show us the indexed position for the product inside the range",
          "rangeData": "Show us the data about the selected range"
        }
      },
      "getOfferInfoForAddress(address,uint256)": {
        "params": {
          "erc721Address": "Contains the facet addresses and function selectors",
          "rangeIndex": "Contains the facet addresses and function selectors"
        },
        "returns": {
          "mintOffer": "Show us the information about the minting offer ",
          "offerIndex": "Show us the indexed position of the offer",
          "productIndex": "Show us the indexed position for the product inside the range",
          "rangeData": "Show us the data about the selected range"
        }
      },
      "getOffersCountForAddress(address)": {
        "params": {
          "erc721Address": "Address of the ERC721 token"
        },
        "returns": {
          "_0": "uint with the total of offers"
        }
      },
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bytes that indicates if an account has or not an admin role"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Contains the indexed position to verify inside the role members list",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "address that indicates the address indexed in that position"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "uint256 that indicates the total accounts with that role"
        }
      },
      "getTotalOfferCount()": {
        "returns": {
          "_0": "uint with the total of offers"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address thay we want to verify",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bool that indicates if an account has or not a role"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Currently you can only renounce to your own roles",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role to remove from our account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to revoke"
        }
      },
      "updateMintingOffer(uint256,(address,bool,uint256)[],bool)": {
        "details": "This function requires that the mintingOfferExists points to an valid offer  ",
        "params": {
          "mintingOfferId_": "Contains index location of the minting offer",
          "splits_": "Contains the shares and address to pay when the offer is succesfull ",
          "visible_": "Contains a boolean to set if the offer is public or not "
        }
      }
    },
    "title": "RAIR Diamond - Minting offers facet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddedMintingOffer(address,uint256,string,uint256,uint256,bool,uint256)": {
        "notice": "This event stores in the blockchain when a Minting Offer is Added"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when we change an admin role"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we grant a role"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we revoke a role"
      }
    },
    "kind": "user",
    "methods": {
      "addMintingOffer(address,uint256,(address,bool,uint256)[],bool,address)": {
        "notice": "This function allow us to add a new minting offer"
      },
      "addMintingOfferBatch(address,uint256[],(address,bool,uint256)[][],bool[],address)": {
        "notice": "This function allow us to create a group of minting offers in a single call"
      },
      "buyMintingOffer(uint256,uint256)": {
        "notice": "This function allow us to buy a minting offers"
      },
      "buyMintingOfferBatch(uint256,uint256[],address[])": {
        "notice": "This function allow us to buy a collection of minting offers"
      },
      "getOfferInfo(uint256)": {
        "notice": "This function show us the information of an selected minting offer"
      },
      "getOfferInfoForAddress(address,uint256)": {
        "notice": "This functions show us the information of an offer asociated to a marketplace"
      },
      "getOffersCountForAddress(address)": {
        "notice": "Returns the number of offers for a specific ERC721 address"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allow us to check the admin role that contains a role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to check the address of an indexed position for the role list"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to check total members that has an selected role"
      },
      "getTotalOfferCount()": {
        "notice": "Returns the number of all the minting offers "
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow us to grant a role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "Allow us to check the if and account has a selected role"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow us to renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow us to revoke a role to an account"
      },
      "updateMintingOffer(uint256,(address,bool,uint256)[],bool)": {
        "notice": "This function allow us to update the parameters of a minting offers"
      }
    },
    "notice": "Facet in charge of the minting offers in the RAIR Marketplace",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5159,
        "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)5140_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(feeSplits)5084_storage)dyn_storage": {
        "base": "t_struct(feeSplits)5084_storage",
        "encoding": "dynamic_array",
        "label": "struct feeSplits[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(mintingOffer)5097_storage)dyn_storage": {
        "base": "t_struct(mintingOffer)5097_storage",
        "encoding": "dynamic_array",
        "label": "struct mintingOffer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3771_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3771_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5104_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5104_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3771_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3770,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3456_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)5140_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 5109,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)5104_storage)"
          },
          {
            "astId": 5114,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3771_storage)"
          },
          {
            "astId": 5116,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 5118,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "decimalPow",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5120,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5122,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5124,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5128,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "mintingOffers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(mintingOffer)5097_storage)dyn_storage"
          },
          {
            "astId": 5134,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToRangeOffer",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 5139,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "addressToOffers",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)5104_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 5101,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5103,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3456_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3451,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3455,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(feeSplits)5084_storage": {
        "encoding": "inplace",
        "label": "struct feeSplits",
        "members": [
          {
            "astId": 5079,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5081,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "canBeContract",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5083,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(mintingOffer)5097_storage": {
        "encoding": "inplace",
        "label": "struct mintingOffer",
        "members": [
          {
            "astId": 5086,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "erc721Address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5088,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5090,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "rangeIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5094,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "fees",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(feeSplits)5084_storage)dyn_storage"
          },
          {
            "astId": 5096,
            "contract": "contracts/Marketplace/Facets/MintingOffersFacet.sol:MintingOffersFacet",
            "label": "visible",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}