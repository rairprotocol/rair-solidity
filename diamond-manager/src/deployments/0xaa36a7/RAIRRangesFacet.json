{
  "address": "0xA2A7e7636AB4374847074c147BE770624F43342E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "CreatedRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        }
      ],
      "name": "TradingLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "TradingUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeEnd_",
          "type": "uint256"
        }
      ],
      "name": "canCreateRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "createRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct RAIRRangesFacet.rangeData[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "name": "createRangeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        }
      ],
      "name": "isRangeLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "productRangeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.range",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        }
      ],
      "name": "rangeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.range",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeIndex_",
          "type": "uint256"
        }
      ],
      "name": "rangeToProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedTokens_",
          "type": "uint256"
        }
      ],
      "name": "updateRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dd267983312b612405ce8e6e79ac8dce11d9559c4ce5225dfc2f4efdf408775",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xA2A7e7636AB4374847074c147BE770624F43342E",
    "transactionIndex": 81,
    "gasUsed": "1959669",
    "logsBloom": "0x
    "blockHash": "0xa9c01c8b68a1ac96dd71165289dbe92ddcd794b18e734e17f404199fc801249f",
    "transactionHash": "0x7dd267983312b612405ce8e6e79ac8dce11d9559c4ce5225dfc2f4efdf408775",
    "logs": [],
    "blockNumber": 5614048,
    "cumulativeGasUsed": "10673218",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48bff27b17b8e4de37ab8f58194aab78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"CreatedRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"name\":\"TradingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"TradingUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"name\":\"UpdatedRange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd_\",\"type\":\"uint256\"}],\"name\":\"canCreateRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct RAIRRangesFacet.rangeData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"createRangeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"}],\"name\":\"isRangeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"productRangeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.range\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"}],\"name\":\"rangeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.range\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeIndex_\",\"type\":\"uint256\"}],\"name\":\"rangeToProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens_\",\"type\":\"uint256\"}],\"name\":\"updateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)\":{\"params\":{\"end\":\"Contains the last NFT of the range collection\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"productIndex\":\"Contains the position where the product was indexed\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"start\":\"Contains the start position of the range of nft collection\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}},\"TradingLocked(uint256,uint256,uint256,uint256)\":{\"params\":{\"from\":\"Contains the starting NFT of the range that we want to lock\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"to\":\"Contains the last NFT of the range that we want to lock\"}},\"TradingUnlocked(uint256,uint256,uint256)\":{\"params\":{\"from\":\"Contains the starting NFT of the range that we want to lock\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"to\":\"Contains the last NFT of the range that we want to lock\"}},\"UpdatedRange(uint256,string,uint256,uint256,uint256)\":{\"params\":{\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}}},\"kind\":\"dev\",\"methods\":{\"canCreateRange(uint256,uint256,uint256)\":{\"params\":{\"productId_\":\"Id for product\",\"rangeEnd_\":\"NFT to end the range with\",\"rangeStart_\":\"NFT to start the range with\"},\"returns\":{\"_0\":\"bool \\t\\tResponse\"}},\"createRange(uint256,uint256,uint256,uint256,uint256,string)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection \",\"params\":{\"collectionId\":\"Contains the identification for the product\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"rangeLength\":\"Number of tokens contained in the range\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}},\"createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])\":{\"details\":\"This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection \",\"params\":{\"collectionId\":\"Contains the identification for the product\",\"data\":\"An array with the data for all the ranges that we want to implement \"}},\"isRangeLocked(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeId\":\"Identification of the range to verify\"},\"returns\":{\"_0\":\"bool with the current status of the range lock\\t\\t\\ttrue for lock and false for unlocked\"}},\"productRangeInfo(uint256,uint256)\":{\"params\":{\"collectionId\":\"Index of the product to verify\",\"rangeIndex\":\"Index of the range to verify\"},\"returns\":{\"data\":\"\\t\\t\\tInformation about the range\"}},\"rangeInfo(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeId\":\"Identification of the range to verify\"},\"returns\":{\"data\":\"\\t\\t\\tInformation about the range\",\"productIndex\":\"\\tContains the index of the product in the range\"}},\"rangeToProduct(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeIndex_\":\"Identification of the range to verify\"},\"returns\":{\"_0\":\"uint which indicates the index of the product\"}},\"updateRange(uint256,string,uint256,uint256,uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing rangeThis function is only available to an account with a `CREATOR` role\",\"params\":{\"lockedTokens_\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price_\":\"Contains the selling price for the range of NFT\",\"rangeId\":\"Identification of the range to verify\",\"tokensAllowed_\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}}},\"title\":\"This is contract to manage the Rair token ranges facet\",\"version\":1},\"userdoc\":{\"events\":{\"CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range is correctly created\"},\"TradingLocked(uint256,uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range trading is effectively locked  \"},\"TradingUnlocked(uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range trading is effectively unlocked \"},\"UpdatedRange(uint256,string,uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range is correctly updated\"}},\"kind\":\"user\",\"methods\":{\"canCreateRange(uint256,uint256,uint256)\":{\"notice\":\"Checks if the information for the range is valid\"},\"createRange(uint256,uint256,uint256,uint256,uint256,string)\":{\"notice\":\"This function that will create the NFT range if the requirements are meet\"},\"createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])\":{\"notice\":\"This function will create as many ranges as the data array requires\"},\"isRangeLocked(uint256)\":{\"notice\":\"This functions shows is the range is currently locked or not \"},\"productRangeInfo(uint256,uint256)\":{\"notice\":\"This functions shows the information for the range of a product\"},\"rangeInfo(uint256)\":{\"notice\":\"This functions allow us to check the information of the range\"},\"rangeToProduct(uint256)\":{\"notice\":\"This functions return us the product that containt the selected range\"},\"updateRange(uint256,string,uint256,uint256,uint256)\":{\"notice\":\"This functions allow us to update the information about a range\"}},\"notice\":\"You can use this contract to administrate ranges, transfers & minting of the tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR-721/Facets/RangesFacet.sol\":\"RAIRRangesFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/common/DiamondStorage/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { AccessControlEnumerableStorage } from \\\"./AccessControlEnumerableStorage.sol\\\";\\n\\nabstract contract AccessControlEnumerable is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    \\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].at(index);\\n\\t}\\n\\t\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn AccessControlEnumerableStorage.layout()._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\tAccessControlEnumerableStorage.layout()._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\tAccessControlEnumerableStorage.layout()._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x876db28aa285dd662a703c8bf6d0a9f2d3856046a85df76e86cfd545e00adb91\",\"license\":\"MIT\"},\"contracts/common/DiamondStorage/AccessControlEnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary AccessControlEnumerableStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.AccessControlEnumerable');\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) _roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x08d3921fe7d2296c619e195c3c6662e3ba79d325b9222f3fc94ac75ffc6eec01\",\"license\":\"MIT\"},\"contracts/tokens/RAIR-721/AccessControlRoles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nabstract contract ERC721AccessControlRoles {\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n}\",\"keccak256\":\"0x0e0cff57250a7b36955e106678d96a52a5ff30f81daca4aec265e57b335087fc\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25; \\n\\nlibrary ERC721Storage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('rair.contracts.storage.RAIR721');\\n\\n    struct product {\\n        uint startingToken;\\n        uint endingToken;\\n        uint mintableTokens;\\n        string name;\\n        uint[] rangeList;\\n    }\\n\\n    struct range {\\n        uint rangeStart;\\n        uint rangeEnd;\\n        uint tokensAllowed;\\n        uint mintableTokens;\\n        uint lockedTokens;\\n        uint rangePrice;\\n        string rangeName;\\n    }\\n\\n    struct Layout {\\n        // Base ERC721\\n        string _name;\\n        string _symbol;\\n        mapping(uint256 tokenId => address) _owners;\\n        mapping(address owner => uint256) _balances;\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n        // ERC721 enumerable extension\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n        // RAIR exclusive\\n        string baseURI;\\n        address factoryAddress;\\n        uint16 royaltyFee;\\n        product[] products;\\n        range[] ranges;\\n        mapping(uint => uint) tokenToProduct;\\n        mapping(uint => uint) tokenToRange;\\n        mapping(uint => string) uniqueTokenURI;\\n        mapping(uint => string) productURI;\\n        mapping(uint => bool) appendTokenIndexToProductURI;\\n        bool appendTokenIndexToBaseURI;\\n        mapping(uint => uint[]) tokensByProduct;\\n        string contractMetadataURI;\\n        mapping(uint => uint) rangeToProduct;\\n        mapping(uint => bool) _minted;\\n        // August 2022 - Metadata File Extension Update\\n        mapping(uint => string) rangeURI;\\n        mapping(uint => bool) appendTokenIndexToRangeURI;\\n        string _metadataExtension;\\n        // March 2024 - Optional trader role\\n        bool requiresTrader;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\",\"keccak256\":\"0x5c1dacd45344afb85c863c85f27e20928c01951b96f3ac4096324b93183e0d31\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-721/Facets/RangesFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.25;\\n\\nimport {ERC721Storage} from \\\"../AppStorage.sol\\\";\\nimport {ERC721AccessControlRoles} from \\\"../AccessControlRoles.sol\\\";\\nimport {AccessControlEnumerable} from \\\"../../../common/DiamondStorage/AccessControlEnumerable.sol\\\";\\n\\n/// @title  This is contract to manage the Rair token ranges facet\\n/// @notice You can use this contract to administrate ranges, transfers & minting of the tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract RAIRRangesFacet is AccessControlEnumerable, ERC721AccessControlRoles {\\n\\t/// @notice This event stores in the blockchain when the NFT range is correctly created\\n    /// @param  productIndex Contains the position where the product was indexed\\n\\t/// @param  start Contains the start position of the range of nft collection\\n\\t/// @param  end Contains the last NFT of the range collection\\n\\t/// @param  price Contains the selling price for the range of NFT\\n\\t/// @param  tokensAllowed Contains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param  name Contains the name for the created NFT collection range\\n\\t/// @param  rangeIndex Contains the position where the range was indexed\\n\\tevent CreatedRange(uint productIndex, uint start, uint end, uint price, uint tokensAllowed, uint lockedTokens, string name, uint rangeIndex);\\n\\t/// @notice This event stores in the blockchain when the NFT range is correctly updated\\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  name Contains the name for the created NFT collection range\\n\\t/// @param  price Contains the selling price for the range of NFT\\n\\t/// @param  tokensAllowed Contains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\tevent UpdatedRange(uint rangeIndex, string name, uint price, uint tokensAllowed, uint lockedTokens);\\n\\t/// @notice This event stores in the blockchain when the NFT range trading is effectively locked  \\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  from Contains the starting NFT of the range that we want to lock\\n\\t/// @param  to Contains the last NFT of the range that we want to lock\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\tevent TradingLocked(uint indexed rangeIndex, uint from, uint to, uint lockedTokens);\\n\\t/// @notice This event stores in the blockchain when the NFT range trading is effectively unlocked \\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  from Contains the starting NFT of the range that we want to lock\\n\\t/// @param  to Contains the last NFT of the range that we want to lock\\n\\tevent TradingUnlocked(uint indexed rangeIndex, uint from, uint to);\\n\\n\\t// Auxiliary struct used to avoid Stack too deep errors\\n\\tstruct rangeData {\\n\\t\\tuint rangeLength;\\n\\t\\tuint price;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint lockedTokens;\\n\\t\\tstring name;\\n\\t}\\n\\n\\t/// @notice Verifies that the range exists\\n\\t/// @param\\trangeID\\tIdentification of the range to verify\\n\\tmodifier rangeExists(uint rangeID) {\\n\\t\\trequire(ERC721Storage.layout().ranges.length > rangeID, \\\"RAIR ERC721 Ranges: Range does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice This functions verify if the current colecction exist or not\\n\\t/// @param\\tcollectionId\\tIdentification of the collection that we want to use\\n\\tmodifier collectionExists(uint collectionId) {\\n\\t\\trequire(ERC721Storage.layout().products.length > collectionId, \\\"RAIR ERC721 Ranges: Collection does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice This functions return us the product that containt the selected range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeIndex_\\t\\tIdentification of the range to verify\\n\\t/// @return uint which indicates the index of the product\\n\\tfunction rangeToProduct(uint rangeIndex_) public view rangeExists(rangeIndex_) returns (uint) {\\n\\t\\treturn ERC721Storage.layout().rangeToProduct[rangeIndex_];\\n\\t}\\n\\n\\t/// @notice This functions allow us to check the information of the range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeId\\tIdentification of the range to verify\\n\\t/// @return data \\t\\t\\tInformation about the range\\n\\t/// @return productIndex \\tContains the index of the product in the range\\n\\tfunction rangeInfo(uint rangeId) external view rangeExists(rangeId) returns(ERC721Storage.range memory data, uint productIndex) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tdata = store.ranges[rangeId];\\n\\t\\tproductIndex = store.rangeToProduct[rangeId];\\n\\t}\\n\\n\\t/// @notice This functions shows is the range is currently locked or not \\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeId\\tIdentification of the range to verify\\n\\t/// @return bool with the current status of the range lock\\n\\t///\\t\\t\\ttrue for lock and false for unlocked\\n\\tfunction isRangeLocked(uint rangeId) external view rangeExists(rangeId) returns (bool) {\\n\\t\\treturn ERC721Storage.layout().ranges[rangeId].lockedTokens > 0;\\n\\t}\\n\\n\\t/// @notice This functions shows the information for the range of a product\\n\\t/// @param\\tcollectionId\\tIndex of the product to verify\\n\\t/// @param\\trangeIndex\\t\\tIndex of the range to verify\\n\\t/// @return data \\t\\t\\tInformation about the range\\n\\tfunction productRangeInfo(uint collectionId, uint rangeIndex)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tcollectionExists(collectionId)\\n\\t\\treturns(ERC721Storage.range memory data)\\n\\t{\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\trequire(\\n\\t\\t\\tstore.products[collectionId].rangeList.length > rangeIndex,\\n\\t\\t\\t\\\"RAIR ERC721 Ranges: Invalid range index\\\"\\n\\t\\t);\\n\\t\\tdata = store.ranges[store.products[collectionId].rangeList[rangeIndex]];\\n\\t}\\n\\n\\t/// @notice This functions allow us to update the information about a range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param\\trangeId\\t\\t\\tIdentification of the range to verify\\n\\t/// @param\\tname\\t\\t\\tContains the name for the created NFT collection range\\n\\t/// @param\\tprice_\\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param\\ttokensAllowed_\\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param\\tlockedTokens_\\tContains all the NFT tokens in the range that are unavailable for sell\\n\\tfunction updateRange(\\n\\t\\tuint rangeId,\\n\\t\\tstring memory name,\\n\\t\\tuint price_,\\n\\t\\tuint tokensAllowed_,\\n\\t\\tuint lockedTokens_\\n\\t) public rangeExists(rangeId) onlyRole(CREATOR) {\\n\\t\\trequire(\\n\\t\\t\\tprice_ == 0 || price_ >= 100,\\n\\t\\t\\t\\\"RAIR ERC721: Minimum price allowed is 100 wei\\\"\\n\\t\\t);\\n\\t\\tERC721Storage.range storage selectedRange = ERC721Storage.layout().ranges[rangeId];\\n\\t\\trequire(\\n            tokensAllowed_ <= selectedRange.mintableTokens,\\n            \\\"RAIR ERC721: Allowed tokens should be less than the number of mintable tokens\\\"\\n        );\\n        require(\\n            lockedTokens_ <= selectedRange.mintableTokens + 1,\\n\\t\\t\\t// The +1 allows for permanent lock of the range\\n            \\\"RAIR ERC721: Locked tokens should be less than the number of mintable tokens\\\"\\n        );\\n\\t\\tselectedRange.tokensAllowed = tokensAllowed_;\\n\\t\\tif (lockedTokens_ > 0 && selectedRange.lockedTokens == 0) {\\n            emit TradingLocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd,\\n                lockedTokens_\\n            );\\n        } else if (lockedTokens_ == 0 && selectedRange.lockedTokens > 0) {\\n            emit TradingUnlocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd\\n            );\\n        }\\n\\t\\tselectedRange.lockedTokens = lockedTokens_;\\n        selectedRange.rangePrice = price_;\\n        selectedRange.rangeName = name;\\n\\t\\temit UpdatedRange(rangeId, name, price_, tokensAllowed_, lockedTokens_);\\n\\t}\\n\\n\\t/// @notice Checks if the information for the range is valid\\n\\t/// @param\\tproductId_\\tId for product\\n\\t/// @param\\trangeStart_\\tNFT to start the range with\\n\\t/// @param\\trangeEnd_\\tNFT to end the range with\\n\\t/// @return bool \\t\\tResponse\\n\\tfunction canCreateRange(uint productId_, uint rangeStart_, uint rangeEnd_) public view returns (bool) {\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tuint[] memory rangeList = store.products[productId_].rangeList;\\n\\t\\tfor (uint i = 0; i < rangeList.length; i++) {\\n\\t\\t\\tif ((store.ranges[rangeList[i]].rangeStart <= rangeStart_ &&\\n\\t\\t\\t\\t\\tstore.ranges[rangeList[i]].rangeEnd >= rangeStart_) || \\n\\t\\t\\t\\t(store.ranges[rangeList[i]].rangeStart <= rangeEnd_ &&\\n\\t\\t\\t\\t\\tstore.ranges[rangeList[i]].rangeEnd >= rangeEnd_)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\t/// @notice This is a internal function that will create the NFT range if the requirements are meet\\n\\t/// @param\\tproductId_\\t\\tContains the identification for the product\\n\\t/// @param\\trangeLength_\\tNumber of tokens contained in the range\\n\\t/// @param \\tprice_ \\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\ttokensAllowed_ \\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\tlockedTokens_ \\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\tname_ \\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction _createRange(\\n\\t\\tuint productId_,\\n\\t\\tuint rangeLength_,\\n\\t\\tuint price_,\\n\\t\\tuint tokensAllowed_,\\n\\t\\tuint lockedTokens_,\\n\\t\\tstring memory name_\\n\\t) internal {\\n\\t\\t// Sanity checks\\n\\t\\t// 0 to make the offer free, over 100 to make sure paid offers can split the funds correctly\\n\\t\\trequire(price_ == 0 || price_ >= 100, \\\"RAIR ERC721: Minimum price allowed is 100 wei\\\");\\n\\t\\trequire(rangeLength_ >= tokensAllowed_, \\\"RAIR ERC721: Allowed tokens should be less than range's length\\\");\\n\\t\\trequire(rangeLength_ >= lockedTokens_, \\\"RAIR ERC721: Locked tokens should be less than range's length\\\");\\n\\t\\tERC721Storage.Layout storage store = ERC721Storage.layout();\\n\\t\\tERC721Storage.product storage selectedProduct = store.products[productId_];\\n\\t\\tuint lastTokenFromPreviousRange;\\n\\t\\tif (selectedProduct.rangeList.length > 0) {\\n\\t\\t\\tlastTokenFromPreviousRange = store.ranges[selectedProduct.rangeList[selectedProduct.rangeList.length - 1]].rangeEnd + 1;\\n\\t\\t}\\n\\n\\t\\tERC721Storage.range storage newRange = store.ranges.push();\\n\\t\\tuint rangeIndex = store.ranges.length - 1;\\n\\n\\t\\trequire(lastTokenFromPreviousRange + rangeLength_ - 1 <= selectedProduct.endingToken , \\\"RAIR ERC721: Range length exceeds collection limits!\\\");\\n\\n\\t\\tnewRange.rangeStart = lastTokenFromPreviousRange;\\n\\t\\t// -1 because it includes the starting token\\n\\t\\tnewRange.rangeEnd = lastTokenFromPreviousRange + rangeLength_ - 1;\\n\\t\\tnewRange.tokensAllowed = tokensAllowed_;\\n\\t\\tnewRange.mintableTokens = rangeLength_;\\n\\t\\tnewRange.lockedTokens = lockedTokens_;\\n\\t\\tif (lockedTokens_ > 0) {\\n\\t\\t\\temit TradingLocked(rangeIndex, newRange.rangeStart, newRange.rangeEnd, newRange.lockedTokens);\\n\\t\\t} else if (lockedTokens_ == 0) {\\n\\t\\t\\temit TradingUnlocked(rangeIndex, newRange.rangeStart, newRange.rangeEnd);\\n\\t\\t}\\n\\t\\tnewRange.rangePrice = price_;\\n\\t\\tnewRange.rangeName = name_;\\n\\t\\tstore.rangeToProduct[rangeIndex] = productId_;\\n\\t\\tselectedProduct.rangeList.push(rangeIndex);\\n\\n\\t\\temit CreatedRange(\\n\\t\\t\\tproductId_,\\n\\t\\t\\tnewRange.rangeStart,\\n\\t\\t\\tnewRange.rangeEnd,\\n\\t\\t\\tnewRange.rangePrice,\\n\\t\\t\\tnewRange.tokensAllowed,\\n\\t\\t\\tnewRange.lockedTokens,\\n\\t\\t\\tnewRange.rangeName,\\n\\t\\t\\trangeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function that will create the NFT range if the requirements are meet\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev \\tThis function require thar the collection ID match a valid collection \\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\trangeLength\\t\\tNumber of tokens contained in the range\\n\\t/// @param \\tprice \\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\ttokensAllowed \\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\tlockedTokens \\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\tname \\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction createRange(\\n\\t\\tuint collectionId,\\n\\t\\tuint rangeLength,\\n\\t\\tuint price,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint lockedTokens,\\n\\t\\tstring calldata name\\n\\t) external onlyRole(CREATOR) collectionExists(collectionId) {\\n\\t\\t_createRange(collectionId, rangeLength, price, tokensAllowed, lockedTokens, name);\\n\\t}\\n\\n\\t/// @notice This function will create as many ranges as the data array requires\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev \\tThis function require thar the collection ID match a valid collection \\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\tdata \\t\\t\\tAn array with the data for all the ranges that we want to implement \\n\\tfunction createRangeBatch(\\n\\t\\tuint collectionId,\\n\\t\\trangeData[] calldata data\\n\\t) external onlyRole(CREATOR) collectionExists(collectionId) {\\n\\t\\trequire(data.length > 0, \\\"RAIR ERC721: Empty array\\\");\\n\\t\\tfor (uint i = 0; i < data.length; i++) {\\n\\t\\t\\t_createRange(collectionId, data[i].rangeLength, data[i].price, data[i].tokensAllowed, data[i].lockedTokens, data[i].name);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x59ba3bf34be17bf1476746fa06655f9e81fd2514a5fe13a6c0b0a2a6ed366432\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5061227c8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636e30b3d3116100a2578063ca15c87311610071578063ca15c8731461027e578063d547741f14610291578063e0544311146102a4578063e4fbb609146102b7578063fe6d8124146102cc57600080fd5b80636e30b3d31461020c5780639010d07c1461021f57806391d148541461024a578063c99931be1461025d57600080fd5b806335755a73116100e957806335755a731461019057806336568abe146101a3578063381f5ebb146101b65780633cd97a55146101d9578063673636b7146101f957600080fd5b8063175c4ef81461011b578063192e322c14610155578063248a9ca31461016a5780632f2ff15d1461017d575b600080fd5b6101427f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020015b60405180910390f35b61016861016336600461199c565b6102f3565b005b610142610178366004611a3f565b610396565b61016861018b366004611a58565b6103b8565b61016861019e366004611a94565b6103da565b6101686101b1366004611a58565b61059a565b6101c96101c4366004611a3f565b610618565b604051901515815260200161014c565b6101ec6101e7366004611b13565b61068d565b60405161014c9190611bd6565b610168610207366004611bff565b6108fd565b6101c961021a366004611cd5565b610c03565b61023261022d366004611b13565b610de6565b6040516001600160a01b03909116815260200161014c565b6101c9610258366004611a58565b610e14565b61027061026b366004611a3f565b610e4c565b60405161014c929190611d01565b61014261028c366004611a3f565b611007565b61016861029f366004611a58565b61102b565b6101426102b2366004611a3f565b611048565b6101426000805160206121e783398151915281565b6101427ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6000805160206121e783398151915261030c81336110af565b8780600080516020612227833981519152600c0154116103475760405162461bcd60e51b815260040161033e90611d23565b60405180910390fd5b61038b898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061111392505050565b505050505050505050565b60009081526000805160206121c7833981519152602052604090206001015490565b6103c182610396565b6103cb81336110af565b6103d58383611544565b505050565b6000805160206121e78339815191526103f381336110af565b8380600080516020612227833981519152600c0154116104255760405162461bcd60e51b815260040161033e90611d23565b826104725760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d7074792061727261790000000000000000604482015260640161033e565b60005b838110156105925761058a8686868481811061049357610493611d70565b90506020028101906104a59190611d86565b358787858181106104b8576104b8611d70565b90506020028101906104ca9190611d86565b602001358888868181106104e0576104e0611d70565b90506020028101906104f29190611d86565b6040013589898781811061050857610508611d70565b905060200281019061051a9190611d86565b606001358a8a8881811061053057610530611d70565b90506020028101906105429190611d86565b610550906080810190611da6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061111392505050565b600101610475565b505050505050565b6001600160a01b038116331461060a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161033e565b61061482826115db565b5050565b60008180600080516020612227833981519152600d01541161064c5760405162461bcd60e51b815260040161033e90611df4565b6000600080516020612227833981519152600d01848154811061067157610671611d70565b9060005260206000209060070201600401541191505b50919050565b6106cd6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8280600080516020612227833981519152600c0154116106ff5760405162461bcd60e51b815260040161033e90611d23565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4580546000805160206122278339815191529185918790811061074457610744611d70565b906000526020600020906005020160040180549050116107b65760405162461bcd60e51b815260206004820152602760248201527f52414952204552433732312052616e6765733a20496e76616c69642072616e676044820152660ca40d2dcc8caf60cb1b606482015260840161033e565b80600d0181600c0186815481106107cf576107cf611d70565b906000526020600020906005020160040185815481106107f1576107f1611d70565b90600052602060002001548154811061080c5761080c611d70565b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201805461087190611e3c565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90611e3c565b80156108ea5780601f106108bf576101008083540402835291602001916108ea565b820191906000526020600020905b8154815290600101906020018083116108cd57829003601f168201915b5050505050815250509250505092915050565b8480600080516020612227833981519152600d01541161092f5760405162461bcd60e51b815260040161033e90611df4565b6000805160206121e783398151915261094881336110af565b841580610956575060648510155b6109725760405162461bcd60e51b815260040161033e90611e70565b6000600080516020612227833981519152600d01888154811061099757610997611d70565b906000526020600020906007020190508060030154851115610a375760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a40161033e565b6003810154610a47906001611ed3565b841115610ad15760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a40161033e565b600281018590558315801590610ae957506004810154155b15610b3d5780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2610b9d565b83158015610b4f575060008160040154115b15610b9d57805460018201546040518a927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e92610b9492918252602082015260400190565b60405180910390a25b600481018490556005810186905560068101610bb98882611f2e565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd18888888888604051610bf1959493929190611fee565b60405180910390a15050505050505050565b6000806000805160206122278339815191529050600081600c018681548110610c2e57610c2e611d70565b9060005260206000209060050201600401805480602002602001604051908101604052809291908181526020018280548015610c8957602002820191906000526020600020905b815481526020019060010190808311610c75575b5050505050905060005b8151811015610dd7578583600d01838381518110610cb357610cb3611d70565b602002602001015181548110610ccb57610ccb611d70565b90600052602060002090600702016000015411158015610d2a57508583600d01838381518110610cfd57610cfd611d70565b602002602001015181548110610d1557610d15611d70565b90600052602060002090600702016001015410155b80610dbe57508483600d01838381518110610d4757610d47611d70565b602002602001015181548110610d5f57610d5f611d70565b90600052602060002090600702016000015411158015610dbe57508483600d01838381518110610d9157610d91611d70565b602002602001015181548110610da957610da9611d70565b90600052602060002090600702016001015410155b15610dcf5760009350505050610ddf565b600101610c93565b506001925050505b9392505050565b600082815260008051602061220783398151915260205260408120610e0b9083611670565b90505b92915050565b60009182526000805160206121c7833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610e8c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60008280600080516020612227833981519152600d015411610ec05760405162461bcd60e51b815260040161033e90611df4565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a468054600080516020612227833981519152919086908110610f0457610f04611d70565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054610f6990611e3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9590611e3c565b8015610fe25780601f10610fb757610100808354040283529160200191610fe2565b820191906000526020600020905b815481529060010190602001808311610fc557829003601f168201915b5050509190925250505060009586526016909101602052604090942054939492505050565b600081815260008051602061220783398151915260205260408120610e0e9061167c565b61103482610396565b61103e81336110af565b6103d583836115db565b60008180600080516020612227833981519152600d01541161107c5760405162461bcd60e51b815260040161033e90611df4565b505060009081527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4f602052604090205490565b6110b98282610e14565b610614576110d1816001600160a01b03166014611686565b6110dc836020611686565b6040516020016110ed929190612024565b60408051601f198184030181529082905262461bcd60e51b825261033e91600401612099565b831580611121575060648410155b61113d5760405162461bcd60e51b815260040161033e90611e70565b828510156111b35760405162461bcd60e51b815260206004820152603e60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e2072616e67652773206c656e6774680000606482015260840161033e565b818510156112295760405162461bcd60e51b815260206004820152603d60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e2072616e67652773206c656e677468000000606482015260840161033e565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a458054600080516020612227833981519152916000918990811061126f5761126f611d70565b600091825260208220600460059092020190810154909250156112f057600482018054600d850191906112a4906001906120ac565b815481106112b4576112b4611d70565b9060005260206000200154815481106112cf576112cf611d70565b90600052602060002090600702016001015460016112ed9190611ed3565b90505b600d8301805460018181018084556000938452602084206007909302909201929161131b91906120ac565b60018086015491925061132e8c86611ed3565b61133891906120ac565b11156113a35760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a2052616e6765206c656e677468206578636565646044820152737320636f6c6c656374696f6e206c696d6974732160601b606482015260840161033e565b82825560016113b28b85611ed3565b6113bc91906120ac565b600183015560028201889055600382018a905560048201879055861561142f578154600183015460048401546040805193845260208401929092529082015281907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2611480565b86600003611480578154600183015460405183927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e9261147792918252602082015260400190565b60405180910390a25b60058201899055600682016114958782611f2e565b508a85601601600083815260200190815260200160002081905550836004018190806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478b83600001548460010154856005015486600201548760040154886006018860405161152f9897969594939291906120bf565b60405180910390a15050505050505050505050565b61154e8282610e14565b6106145760008281526000805160206121c7833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020612207833981519152602052604090206103d59082611806565b6115e58282610e14565b156106145760008281526000805160206121c7833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020612207833981519152602052604090206103d5908261181b565b6000610e0b8383611830565b6000610e0e825490565b6060826000611696846002612182565b6116a1906002611ed3565b67ffffffffffffffff8111156116b9576116b9611be9565b6040519080825280601f01601f1916602001820160405280156116e3576020820181803683370190505b509050600360fc1b816000815181106116fe576116fe611d70565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061172d5761172d611d70565b60200101906001600160f81b031916908160001a9053506000611751856002612182565b61175c906001611ed3565b90505b60018111156117d4576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061179057611790611d70565b1a60f81b8282815181106117a6576117a6611d70565b60200101906001600160f81b031916908160001a90535060049290921c916117cd81612199565b905061175f565b5081156117fe5760405163e22e27eb60e01b8152600481018690526024810185905260440161033e565b949350505050565b6000610e0b836001600160a01b03841661185a565b6000610e0b836001600160a01b0384166118a9565b600082600001828154811061184757611847611d70565b9060005260206000200154905092915050565b60008181526001830160205260408120546118a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e0e565b506000610e0e565b600081815260018301602052604081205480156119925760006118cd6001836120ac565b85549091506000906118e1906001906120ac565b905080821461194657600086600001828154811061190157611901611d70565b906000526020600020015490508087600001848154811061192457611924611d70565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611957576119576121b0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e0e565b6000915050610e0e565b600080600080600080600060c0888a0312156119b757600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff808211156119f257600080fd5b818a0191508a601f830112611a0657600080fd5b813581811115611a1557600080fd5b8b6020828501011115611a2757600080fd5b60208301945080935050505092959891949750929550565b600060208284031215611a5157600080fd5b5035919050565b60008060408385031215611a6b57600080fd5b8235915060208301356001600160a01b0381168114611a8957600080fd5b809150509250929050565b600080600060408486031215611aa957600080fd5b83359250602084013567ffffffffffffffff80821115611ac857600080fd5b818601915086601f830112611adc57600080fd5b813581811115611aeb57600080fd5b8760208260051b8501011115611b0057600080fd5b6020830194508093505050509250925092565b60008060408385031215611b2657600080fd5b50508035926020909101359150565b60005b83811015611b50578181015183820152602001611b38565b50506000910152565b60008151808452611b71816020860160208601611b35565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c08501526117fe60e0850182611b59565b602081526000610e0b6020830184611b85565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215611c1757600080fd5b85359450602086013567ffffffffffffffff80821115611c3657600080fd5b818801915088601f830112611c4a57600080fd5b813581811115611c5c57611c5c611be9565b604051601f8201601f19908116603f01168101908382118183101715611c8457611c84611be9565b816040528281528b6020848701011115611c9d57600080fd5b826020860160208301376000928101602001929092525096999698505050506040850135946060810135946080909101359350915050565b600080600060608486031215611cea57600080fd5b505081359360208301359350604090920135919050565b604081526000611d146040830185611b85565b90508260208301529392505050565b6020808252602d908201527f52414952204552433732312052616e6765733a20436f6c6c656374696f6e206460408201526c1bd95cc81b9bdd08195e1a5cdd609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112611d9c57600080fd5b9190910192915050565b6000808335601e19843603018112611dbd57600080fd5b83018035915067ffffffffffffffff821115611dd857600080fd5b602001915036819003821315611ded57600080fd5b9250929050565b60208082526028908201527f52414952204552433732312052616e6765733a2052616e676520646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b600181811c90821680611e5057607f821691505b60208210810361068757634e487b7160e01b600052602260045260246000fd5b6020808252602d908201527f52414952204552433732313a204d696e696d756d20707269636520616c6c6f7760408201526c6564206973203130302077656960981b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e0e57610e0e611ebd565b601f8211156103d5576000816000526020600020601f850160051c81016020861015611f0f5750805b601f850160051c820191505b8181101561059257828155600101611f1b565b815167ffffffffffffffff811115611f4857611f48611be9565b611f5c81611f568454611e3c565b84611ee6565b602080601f831160018114611f915760008415611f795750858301515b600019600386901b1c1916600185901b178555610592565b600085815260208120601f198616915b82811015611fc057888601518255948401946001909101908401611fa1565b5085821015611fde5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a06020820152600061200760a0830187611b59565b604083019590955250606081019290925260809091015292915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161205c816017850160208801611b35565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161208d816028840160208801611b35565b01602801949350505050565b602081526000610e0b6020830184611b59565b81810381811115610e0e57610e0e611ebd565b60006101008a835260208a60208501528960408501528860608501528760808501528660a08501528160c0850152600086546120fa81611e3c565b938601849052610120936001828116801561211c576001811461213657612165565b60ff1984168988015282151560051b890187019450612165565b8a600052602060002060005b8481101561215d5781548b82018a0152908301908701612142565b8a0188019550505b505050508093505050508260e08301529998505050505050505050565b8082028115828204841417610e0e57610e0e611ebd565b6000816121a8576121a8611ebd565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db64f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d113fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39a2646970667358221220f5e29ddcc4c05676d8f11a5ffe466036efd2b550a25d2f57fbe47f028f34627164736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636e30b3d3116100a2578063ca15c87311610071578063ca15c8731461027e578063d547741f14610291578063e0544311146102a4578063e4fbb609146102b7578063fe6d8124146102cc57600080fd5b80636e30b3d31461020c5780639010d07c1461021f57806391d148541461024a578063c99931be1461025d57600080fd5b806335755a73116100e957806335755a731461019057806336568abe146101a3578063381f5ebb146101b65780633cd97a55146101d9578063673636b7146101f957600080fd5b8063175c4ef81461011b578063192e322c14610155578063248a9ca31461016a5780632f2ff15d1461017d575b600080fd5b6101427f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020015b60405180910390f35b61016861016336600461199c565b6102f3565b005b610142610178366004611a3f565b610396565b61016861018b366004611a58565b6103b8565b61016861019e366004611a94565b6103da565b6101686101b1366004611a58565b61059a565b6101c96101c4366004611a3f565b610618565b604051901515815260200161014c565b6101ec6101e7366004611b13565b61068d565b60405161014c9190611bd6565b610168610207366004611bff565b6108fd565b6101c961021a366004611cd5565b610c03565b61023261022d366004611b13565b610de6565b6040516001600160a01b03909116815260200161014c565b6101c9610258366004611a58565b610e14565b61027061026b366004611a3f565b610e4c565b60405161014c929190611d01565b61014261028c366004611a3f565b611007565b61016861029f366004611a58565b61102b565b6101426102b2366004611a3f565b611048565b6101426000805160206121e783398151915281565b6101427ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6000805160206121e783398151915261030c81336110af565b8780600080516020612227833981519152600c0154116103475760405162461bcd60e51b815260040161033e90611d23565b60405180910390fd5b61038b898989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061111392505050565b505050505050505050565b60009081526000805160206121c7833981519152602052604090206001015490565b6103c182610396565b6103cb81336110af565b6103d58383611544565b505050565b6000805160206121e78339815191526103f381336110af565b8380600080516020612227833981519152600c0154116104255760405162461bcd60e51b815260040161033e90611d23565b826104725760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d7074792061727261790000000000000000604482015260640161033e565b60005b838110156105925761058a8686868481811061049357610493611d70565b90506020028101906104a59190611d86565b358787858181106104b8576104b8611d70565b90506020028101906104ca9190611d86565b602001358888868181106104e0576104e0611d70565b90506020028101906104f29190611d86565b6040013589898781811061050857610508611d70565b905060200281019061051a9190611d86565b606001358a8a8881811061053057610530611d70565b90506020028101906105429190611d86565b610550906080810190611da6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061111392505050565b600101610475565b505050505050565b6001600160a01b038116331461060a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161033e565b61061482826115db565b5050565b60008180600080516020612227833981519152600d01541161064c5760405162461bcd60e51b815260040161033e90611df4565b6000600080516020612227833981519152600d01848154811061067157610671611d70565b9060005260206000209060070201600401541191505b50919050565b6106cd6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b8280600080516020612227833981519152600c0154116106ff5760405162461bcd60e51b815260040161033e90611d23565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4580546000805160206122278339815191529185918790811061074457610744611d70565b906000526020600020906005020160040180549050116107b65760405162461bcd60e51b815260206004820152602760248201527f52414952204552433732312052616e6765733a20496e76616c69642072616e676044820152660ca40d2dcc8caf60cb1b606482015260840161033e565b80600d0181600c0186815481106107cf576107cf611d70565b906000526020600020906005020160040185815481106107f1576107f1611d70565b90600052602060002001548154811061080c5761080c611d70565b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201805461087190611e3c565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90611e3c565b80156108ea5780601f106108bf576101008083540402835291602001916108ea565b820191906000526020600020905b8154815290600101906020018083116108cd57829003601f168201915b5050505050815250509250505092915050565b8480600080516020612227833981519152600d01541161092f5760405162461bcd60e51b815260040161033e90611df4565b6000805160206121e783398151915261094881336110af565b841580610956575060648510155b6109725760405162461bcd60e51b815260040161033e90611e70565b6000600080516020612227833981519152600d01888154811061099757610997611d70565b906000526020600020906007020190508060030154851115610a375760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a40161033e565b6003810154610a47906001611ed3565b841115610ad15760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a40161033e565b600281018590558315801590610ae957506004810154155b15610b3d5780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2610b9d565b83158015610b4f575060008160040154115b15610b9d57805460018201546040518a927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e92610b9492918252602082015260400190565b60405180910390a25b600481018490556005810186905560068101610bb98882611f2e565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd18888888888604051610bf1959493929190611fee565b60405180910390a15050505050505050565b6000806000805160206122278339815191529050600081600c018681548110610c2e57610c2e611d70565b9060005260206000209060050201600401805480602002602001604051908101604052809291908181526020018280548015610c8957602002820191906000526020600020905b815481526020019060010190808311610c75575b5050505050905060005b8151811015610dd7578583600d01838381518110610cb357610cb3611d70565b602002602001015181548110610ccb57610ccb611d70565b90600052602060002090600702016000015411158015610d2a57508583600d01838381518110610cfd57610cfd611d70565b602002602001015181548110610d1557610d15611d70565b90600052602060002090600702016001015410155b80610dbe57508483600d01838381518110610d4757610d47611d70565b602002602001015181548110610d5f57610d5f611d70565b90600052602060002090600702016000015411158015610dbe57508483600d01838381518110610d9157610d91611d70565b602002602001015181548110610da957610da9611d70565b90600052602060002090600702016001015410155b15610dcf5760009350505050610ddf565b600101610c93565b506001925050505b9392505050565b600082815260008051602061220783398151915260205260408120610e0b9083611670565b90505b92915050565b60009182526000805160206121c7833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610e8c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60008280600080516020612227833981519152600d015411610ec05760405162461bcd60e51b815260040161033e90611df4565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a468054600080516020612227833981519152919086908110610f0457610f04611d70565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054610f6990611e3c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9590611e3c565b8015610fe25780601f10610fb757610100808354040283529160200191610fe2565b820191906000526020600020905b815481529060010190602001808311610fc557829003601f168201915b5050509190925250505060009586526016909101602052604090942054939492505050565b600081815260008051602061220783398151915260205260408120610e0e9061167c565b61103482610396565b61103e81336110af565b6103d583836115db565b60008180600080516020612227833981519152600d01541161107c5760405162461bcd60e51b815260040161033e90611df4565b505060009081527f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a4f602052604090205490565b6110b98282610e14565b610614576110d1816001600160a01b03166014611686565b6110dc836020611686565b6040516020016110ed929190612024565b60408051601f198184030181529082905262461bcd60e51b825261033e91600401612099565b831580611121575060648410155b61113d5760405162461bcd60e51b815260040161033e90611e70565b828510156111b35760405162461bcd60e51b815260206004820152603e60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e2072616e67652773206c656e6774680000606482015260840161033e565b818510156112295760405162461bcd60e51b815260206004820152603d60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e2072616e67652773206c656e677468000000606482015260840161033e565b7f13fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a458054600080516020612227833981519152916000918990811061126f5761126f611d70565b600091825260208220600460059092020190810154909250156112f057600482018054600d850191906112a4906001906120ac565b815481106112b4576112b4611d70565b9060005260206000200154815481106112cf576112cf611d70565b90600052602060002090600702016001015460016112ed9190611ed3565b90505b600d8301805460018181018084556000938452602084206007909302909201929161131b91906120ac565b60018086015491925061132e8c86611ed3565b61133891906120ac565b11156113a35760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a2052616e6765206c656e677468206578636565646044820152737320636f6c6c656374696f6e206c696d6974732160601b606482015260840161033e565b82825560016113b28b85611ed3565b6113bc91906120ac565b600183015560028201889055600382018a905560048201879055861561142f578154600183015460048401546040805193845260208401929092529082015281907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2611480565b86600003611480578154600183015460405183927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e9261147792918252602082015260400190565b60405180910390a25b60058201899055600682016114958782611f2e565b508a85601601600083815260200190815260200160002081905550836004018190806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478b83600001548460010154856005015486600201548760040154886006018860405161152f9897969594939291906120bf565b60405180910390a15050505050505050505050565b61154e8282610e14565b6106145760008281526000805160206121c7833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a46000828152600080516020612207833981519152602052604090206103d59082611806565b6115e58282610e14565b156106145760008281526000805160206121c7833981519152602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600080516020612207833981519152602052604090206103d5908261181b565b6000610e0b8383611830565b6000610e0e825490565b6060826000611696846002612182565b6116a1906002611ed3565b67ffffffffffffffff8111156116b9576116b9611be9565b6040519080825280601f01601f1916602001820160405280156116e3576020820181803683370190505b509050600360fc1b816000815181106116fe576116fe611d70565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061172d5761172d611d70565b60200101906001600160f81b031916908160001a9053506000611751856002612182565b61175c906001611ed3565b90505b60018111156117d4576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061179057611790611d70565b1a60f81b8282815181106117a6576117a6611d70565b60200101906001600160f81b031916908160001a90535060049290921c916117cd81612199565b905061175f565b5081156117fe5760405163e22e27eb60e01b8152600481018690526024810185905260440161033e565b949350505050565b6000610e0b836001600160a01b03841661185a565b6000610e0b836001600160a01b0384166118a9565b600082600001828154811061184757611847611d70565b9060005260206000200154905092915050565b60008181526001830160205260408120546118a157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e0e565b506000610e0e565b600081815260018301602052604081205480156119925760006118cd6001836120ac565b85549091506000906118e1906001906120ac565b905080821461194657600086600001828154811061190157611901611d70565b906000526020600020015490508087600001848154811061192457611924611d70565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611957576119576121b0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e0e565b6000915050610e0e565b600080600080600080600060c0888a0312156119b757600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff808211156119f257600080fd5b818a0191508a601f830112611a0657600080fd5b813581811115611a1557600080fd5b8b6020828501011115611a2757600080fd5b60208301945080935050505092959891949750929550565b600060208284031215611a5157600080fd5b5035919050565b60008060408385031215611a6b57600080fd5b8235915060208301356001600160a01b0381168114611a8957600080fd5b809150509250929050565b600080600060408486031215611aa957600080fd5b83359250602084013567ffffffffffffffff80821115611ac857600080fd5b818601915086601f830112611adc57600080fd5b813581811115611aeb57600080fd5b8760208260051b8501011115611b0057600080fd5b6020830194508093505050509250925092565b60008060408385031215611b2657600080fd5b50508035926020909101359150565b60005b83811015611b50578181015183820152602001611b38565b50506000910152565b60008151808452611b71816020860160208601611b35565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c08501526117fe60e0850182611b59565b602081526000610e0b6020830184611b85565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215611c1757600080fd5b85359450602086013567ffffffffffffffff80821115611c3657600080fd5b818801915088601f830112611c4a57600080fd5b813581811115611c5c57611c5c611be9565b604051601f8201601f19908116603f01168101908382118183101715611c8457611c84611be9565b816040528281528b6020848701011115611c9d57600080fd5b826020860160208301376000928101602001929092525096999698505050506040850135946060810135946080909101359350915050565b600080600060608486031215611cea57600080fd5b505081359360208301359350604090920135919050565b604081526000611d146040830185611b85565b90508260208301529392505050565b6020808252602d908201527f52414952204552433732312052616e6765733a20436f6c6c656374696f6e206460408201526c1bd95cc81b9bdd08195e1a5cdd609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112611d9c57600080fd5b9190910192915050565b6000808335601e19843603018112611dbd57600080fd5b83018035915067ffffffffffffffff821115611dd857600080fd5b602001915036819003821315611ded57600080fd5b9250929050565b60208082526028908201527f52414952204552433732312052616e6765733a2052616e676520646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b600181811c90821680611e5057607f821691505b60208210810361068757634e487b7160e01b600052602260045260246000fd5b6020808252602d908201527f52414952204552433732313a204d696e696d756d20707269636520616c6c6f7760408201526c6564206973203130302077656960981b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e0e57610e0e611ebd565b601f8211156103d5576000816000526020600020601f850160051c81016020861015611f0f5750805b601f850160051c820191505b8181101561059257828155600101611f1b565b815167ffffffffffffffff811115611f4857611f48611be9565b611f5c81611f568454611e3c565b84611ee6565b602080601f831160018114611f915760008415611f795750858301515b600019600386901b1c1916600185901b178555610592565b600085815260208120601f198616915b82811015611fc057888601518255948401946001909101908401611fa1565b5085821015611fde5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a06020820152600061200760a0830187611b59565b604083019590955250606081019290925260809091015292915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161205c816017850160208801611b35565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161208d816028840160208801611b35565b01602801949350505050565b602081526000610e0b6020830184611b59565b81810381811115610e0e57610e0e611ebd565b60006101008a835260208a60208501528960408501528860608501528760808501528660a08501528160c0850152600086546120fa81611e3c565b938601849052610120936001828116801561211c576001811461213657612165565b60ff1984168988015282151560051b890187019450612165565b8a600052602060002060005b8481101561215d5781548b82018a0152908301908701612142565b8a0188019550505b505050508093505050508260e08301529998505050505050505050565b8082028115828204841417610e0e57610e0e611ebd565b6000816121a8576121a8611ebd565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d03c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db64f4f658137f4e10317e1a22624c2b114af7563a20fb2e3444ae2ac2342d457d113fbb056f2602120441ced10c19d8151fd41fd4b17a6646b53bc0f944eb07a39a2646970667358221220f5e29ddcc4c05676d8f11a5ffe466036efd2b550a25d2f57fbe47f028f34627164736f6c63430008190033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "errors": {
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)": {
        "params": {
          "end": "Contains the last NFT of the range collection",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "productIndex": "Contains the position where the product was indexed",
          "rangeIndex": "Contains the position where the range was indexed",
          "start": "Contains the start position of the range of nft collection",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      },
      "TradingLocked(uint256,uint256,uint256,uint256)": {
        "params": {
          "from": "Contains the starting NFT of the range that we want to lock",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "rangeIndex": "Contains the position where the range was indexed",
          "to": "Contains the last NFT of the range that we want to lock"
        }
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "params": {
          "from": "Contains the starting NFT of the range that we want to lock",
          "rangeIndex": "Contains the position where the range was indexed",
          "to": "Contains the last NFT of the range that we want to lock"
        }
      },
      "UpdatedRange(uint256,string,uint256,uint256,uint256)": {
        "params": {
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "rangeIndex": "Contains the position where the range was indexed",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "canCreateRange(uint256,uint256,uint256)": {
        "params": {
          "productId_": "Id for product",
          "rangeEnd_": "NFT to end the range with",
          "rangeStart_": "NFT to start the range with"
        },
        "returns": {
          "_0": "bool \t\tResponse"
        }
      },
      "createRange(uint256,uint256,uint256,uint256,uint256,string)": {
        "details": "This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection ",
        "params": {
          "collectionId": "Contains the identification for the product",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "rangeLength": "Number of tokens contained in the range",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      },
      "createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])": {
        "details": "This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection ",
        "params": {
          "collectionId": "Contains the identification for the product",
          "data": "An array with the data for all the ranges that we want to implement "
        }
      },
      "isRangeLocked(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeId": "Identification of the range to verify"
        },
        "returns": {
          "_0": "bool with the current status of the range lock\t\t\ttrue for lock and false for unlocked"
        }
      },
      "productRangeInfo(uint256,uint256)": {
        "params": {
          "collectionId": "Index of the product to verify",
          "rangeIndex": "Index of the range to verify"
        },
        "returns": {
          "data": "\t\t\tInformation about the range"
        }
      },
      "rangeInfo(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeId": "Identification of the range to verify"
        },
        "returns": {
          "data": "\t\t\tInformation about the range",
          "productIndex": "\tContains the index of the product in the range"
        }
      },
      "rangeToProduct(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeIndex_": "Identification of the range to verify"
        },
        "returns": {
          "_0": "uint which indicates the index of the product"
        }
      },
      "updateRange(uint256,string,uint256,uint256,uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing rangeThis function is only available to an account with a `CREATOR` role",
        "params": {
          "lockedTokens_": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price_": "Contains the selling price for the range of NFT",
          "rangeId": "Identification of the range to verify",
          "tokensAllowed_": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      }
    },
    "title": "This is contract to manage the Rair token ranges facet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range is correctly created"
      },
      "TradingLocked(uint256,uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range trading is effectively locked  "
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range trading is effectively unlocked "
      },
      "UpdatedRange(uint256,string,uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range is correctly updated"
      }
    },
    "kind": "user",
    "methods": {
      "canCreateRange(uint256,uint256,uint256)": {
        "notice": "Checks if the information for the range is valid"
      },
      "createRange(uint256,uint256,uint256,uint256,uint256,string)": {
        "notice": "This function that will create the NFT range if the requirements are meet"
      },
      "createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])": {
        "notice": "This function will create as many ranges as the data array requires"
      },
      "isRangeLocked(uint256)": {
        "notice": "This functions shows is the range is currently locked or not "
      },
      "productRangeInfo(uint256,uint256)": {
        "notice": "This functions shows the information for the range of a product"
      },
      "rangeInfo(uint256)": {
        "notice": "This functions allow us to check the information of the range"
      },
      "rangeToProduct(uint256)": {
        "notice": "This functions return us the product that containt the selected range"
      },
      "updateRange(uint256,string,uint256,uint256,uint256)": {
        "notice": "This functions allow us to update the information about a range"
      }
    },
    "notice": "You can use this contract to administrate ranges, transfers & minting of the tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}