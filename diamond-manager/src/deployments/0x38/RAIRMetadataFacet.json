{
  "address": "0xBb6278856f43e3A3E4Edb4DBA71b4CdABB694A1b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "PermanentURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "UpdatedContractURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedProductURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedRangeURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "UpdatedTokenURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newExtension",
          "type": "string"
        }
      ],
      "name": "UpdatedURIExtension",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "freezeMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndexToBaseURI",
          "type": "bool"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndexToProductURI",
          "type": "bool"
        }
      ],
      "name": "setCollectionURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "extension",
          "type": "string"
        }
      ],
      "name": "setMetadataExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "appendTokenIndex",
          "type": "bool"
        }
      ],
      "name": "setRangeURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setUniqueURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "newURIs",
          "type": "string[]"
        }
      ],
      "name": "setUniqueURIBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "tokenToCollectionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ec7266c9bdf0fe9711fb513348cab3d0dd44834353f77caf21f964f07d2e6ea",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xBb6278856f43e3A3E4Edb4DBA71b4CdABB694A1b",
    "transactionIndex": 55,
    "gasUsed": "1548656",
    "logsBloom": "0x
    "blockHash": "0xffc5615824517826c7e9740e8c9a03fcdd07474d84046e5d2cbf1ce717ef2a40",
    "transactionHash": "0x6ec7266c9bdf0fe9711fb513348cab3d0dd44834353f77caf21f964f07d2e6ea",
    "logs": [],
    "blockNumber": 22146606,
    "cumulativeGasUsed": "7852134",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f7be3b3cacdde8ebeaf5c5bbbf1719e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"UpdatedContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedProductURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataExtension\",\"type\":\"string\"}],\"name\":\"UpdatedRangeURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"UpdatedTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newExtension\",\"type\":\"string\"}],\"name\":\"UpdatedURIExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndexToBaseURI\",\"type\":\"bool\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndexToProductURI\",\"type\":\"bool\"}],\"name\":\"setCollectionURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"}],\"name\":\"setMetadataExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"appendTokenIndex\",\"type\":\"bool\"}],\"name\":\"setRangeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setUniqueURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"newURIs\",\"type\":\"string[]\"}],\"name\":\"setUniqueURIBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"tokenToCollectionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"events\":{\"UpdatedBaseURI(string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the tokens appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new  base identifier for all the tokens\"}},\"UpdatedContractURI(string)\":{\"params\":{\"newURI\":\"Contains the new identifier for the contract \"}},\"UpdatedProductURI(uint256,string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the token appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new identifier for the product\",\"productId\":\"Contains the index of the product to change\"}},\"UpdatedRangeURI(uint256,string,bool,string)\":{\"params\":{\"appendTokenIndex\":\"Contains the index of the token appended to the URI\",\"metadataExtension\":\"File extension (if exists)\",\"newURI\":\"Contains the new identifier for the product\",\"rangeId\":\"Contains the index of the product to change\"}},\"UpdatedTokenURI(uint256,string)\":{\"params\":{\"newURI\":\"Contains the new identifier for the token\",\"tokenId\":\"Contains the index of the token appended to the URI\"}},\"UpdatedURIExtension(string)\":{\"details\":\"It will be appended ONLY if the token ID has to also be appended\",\"params\":{\"newExtension\":\"The new extension for all the URIs\"}}},\"kind\":\"dev\",\"methods\":{\"contractURI()\":{\"returns\":{\"_0\":\"string with the URI of the contract \"}},\"freezeMetadata(uint256)\":{\"details\":\"This function is only available to an account with a `CREATOR` role\",\"params\":{\"tokenId\":\"Token Index that will be given an URI\"}},\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bytes that indicates if an account has or not an admin role\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Contains the indexed position to verify inside the role members list\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"address that indicates the address indexed in that position\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"uint256 that indicates the total accounts with that role\"}},\"grantRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to grant\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address thay we want to verify\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bool that indicates if an account has or not a role\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Currently you can only renounce to your own roles\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role to remove from our account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to revoke\"}},\"setBaseURI(string,bool)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleCan be overriden by the specific token URI\",\"params\":{\"appendTokenIndexToBaseURI\":\"URI to be used\",\"newURI\":\"URI to be used\"}},\"setCollectionURI(uint256,string,bool)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance\",\"params\":{\"appendTokenIndexToProductURI\":\"If true, it will append the token index to the URI\",\"newURI\":\"New URI to be given\",\"productId\":\"Token Index that will be given an URI\"}},\"setContractURI(string)\":{\"details\":\"This function is only available to an account with a `CREATOR` role\",\"params\":{\"newURI\":\"New URI to be given\"}},\"setMetadataExtension(string)\":{\"details\":\"Must include the . before the extension\",\"params\":{\"extension\":\"Extension to be added at the end of all contract wide tokens\"}},\"setRangeURI(uint256,string,bool)\":{\"details\":\"Emits an event so there's provenance\",\"params\":{\"appendTokenIndex\":\"Flag to append the token index at the end of the new URI\",\"newURI\":\"New URI to be given\",\"rangeId\":\"Token Index that will be given an URI\"}},\"setUniqueURI(uint256,string)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance\",\"params\":{\"newURI\":\"New URI to be given\",\"tokenId\":\"Token Index that will be given an URI\"}},\"setUniqueURIBatch(uint256[],string[])\":{\"details\":\"This function is only available to an account with a `CREATOR` roleUses the single function so it also emits an eventThis function requires that all the tokens have a corresponding URI\",\"params\":{\"newURIs\":\"New URIs to be set\",\"tokenIds\":\"Token Indexes that will be given an URI\"}},\"tokenToCollectionIndex(uint256)\":{\"params\":{\"token\":\"Token ID to find\"},\"returns\":{\"tokenIndex\":\"which contains the corresponding token index\"}},\"tokenURI(uint256)\":{\"details\":\"Will return unique token URI or product URI or contract URI\",\"params\":{\"tokenId\":\"Token Index to look for\"},\"returns\":{\"_0\":\"string with the URI of the toke that we are using\"}}},\"title\":\"RAIR Metadata facet contract\",\"version\":1},\"userdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when we change an admin role\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we grant a role\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we revoke a role\"},\"UpdatedBaseURI(string,bool,string)\":{\"notice\":\"This event stores in the blockchain when the base code of all the tokens has an update in its URI\"},\"UpdatedContractURI(string)\":{\"notice\":\"This event stores in the blockchain when a contract has a change in its URI\"},\"UpdatedProductURI(uint256,string,bool,string)\":{\"notice\":\"This event stores in the blockchain when a product has a change in its URI\"},\"UpdatedRangeURI(uint256,string,bool,string)\":{\"notice\":\"This event stores in the blockchain when a range has a change in its URI\"},\"UpdatedTokenURI(uint256,string)\":{\"notice\":\"This event stores in the blockchain when a token has a change in its URI\"},\"UpdatedURIExtension(string)\":{\"notice\":\"This event informs the new extension all metadata URIs will have appended at the end\"}},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"This function allow us to see the current URI of the contract\"},\"freezeMetadata(uint256)\":{\"notice\":\"This function use OpenSea's to freeze the metadata\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allow us to check the admin role that contains a role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to check the address of an indexed position for the role list\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to check total members that has an selected role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow us to grant a role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"Allow us to check the if and account has a selected role\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow us to renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow us to revoke a role to an account\"},\"setBaseURI(string,bool)\":{\"notice\":\"Sets the Base URI for ALL tokens\"},\"setCollectionURI(uint256,string,bool)\":{\"notice\":\"Gives an individual token an unique URI\"},\"setContractURI(string)\":{\"notice\":\"This function allow us to set a new contract URI\"},\"setMetadataExtension(string)\":{\"notice\":\"Updates the metadata extension added at the end of all tokens\"},\"setRangeURI(uint256,string,bool)\":{\"notice\":\"Gives all tokens within a range a specific URI\"},\"setUniqueURI(uint256,string)\":{\"notice\":\"Gives an individual token an unique URI\"},\"setUniqueURIBatch(uint256[],string[])\":{\"notice\":\"Updates the unique URI of all the tokens, but in a single transaction\"},\"tokenToCollectionIndex(uint256)\":{\"notice\":\"Returns the token index inside the product\"},\"tokenURI(uint256)\":{\"notice\":\"Returns a token's URI\"}},\"notice\":\"You can use this contract to administrate the metadata asociated to the Rair facet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol\":\"RAIRMetadataFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xae3476961d281055b3535afa8076256f120f977d33874ac8279b946395d8640d\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// August 2022 - Metadata File Extension Update\\n\\tmapping(uint => string) rangeURI;\\n\\tmapping(uint => bool) appendTokenIndexToRangeURI;\\n\\tstring _metadataExtension;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\t/// @notice this funtion set the storage of the diamonds 721 contracts \\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title  This is contract to manage the access control of the RAIR token facet\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xcedc7b5933774fa60e490c8ad19f95a5b2f45caa51a1955a9413e01c5e725636\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport './AppStorage.sol';\\n\\n/// @title  RAIR Metadata facet contract\\n/// @notice You can use this contract to administrate the metadata asociated to the Rair facet\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract RAIRMetadataFacet is AccessControlAppStorageEnumerable721 {\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\tusing Strings for uint256;\\n\\n\\t/// @notice This event stores in the blockchain when the base code of all the tokens has an update in its URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new  base identifier for all the tokens\\n\\t/// @param  appendTokenIndex \\tContains the index of the tokens appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedBaseURI(string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a token has a change in its URI\\n\\t/// @param  tokenId \\t\\t\\tContains the index of the token appended to the URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the token\\n\\tevent UpdatedTokenURI(uint tokenId, string newURI);\\n\\t/// @notice This event stores in the blockchain when a product has a change in its URI\\n\\t/// @param \\tproductId \\t\\t\\tContains the index of the product to change\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the product\\n\\t/// @param  appendTokenIndex \\tContains the index of the token appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedProductURI(uint productId, string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a range has a change in its URI\\n\\t/// @param \\trangeId \\t\\t\\tContains the index of the product to change\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the product\\n\\t/// @param  appendTokenIndex \\tContains the index of the token appended to the URI\\n\\t/// @param \\tmetadataExtension \\tFile extension (if exists)\\n\\tevent UpdatedRangeURI(uint rangeId, string newURI, bool appendTokenIndex, string metadataExtension);\\n\\t/// @notice This event stores in the blockchain when a contract has a change in its URI\\n    /// @param  newURI \\t\\t\\t\\tContains the new identifier for the contract \\n\\tevent UpdatedContractURI(string newURI);\\n\\t/// @notice This event informs the new extension all metadata URIs will have appended at the end\\n\\t/// @dev \\tIt will be appended ONLY if the token ID has to also be appended\\n\\t/// @param \\tnewExtension The new extension for all the URIs\\n    event UpdatedURIExtension(string newExtension);\\n\\n\\n\\t// For OpenSea's Freezing\\n\\tevent PermanentURI(string _value, uint256 indexed _id);\\n\\n\\t/// @notice This function allows us to check if the token exist or not\\n\\t/// @param\\ttokenId\\tContains the index of the token that we want to verify \\n\\t/// @return bool Answer true if the token exist or false if not \\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn s._owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/// @notice\\tReturns the token index inside the product\\n\\t/// @param\\ttoken\\tToken ID to find\\n\\t/// @return tokenIndex which contains the corresponding token index\\n\\tfunction tokenToCollectionIndex(uint token) public view returns (uint tokenIndex) {\\n\\t\\treturn token - s.products[s.tokenToProduct[token]].startingToken;\\n\\t}\\n\\n\\t/// @notice\\tUpdates the unique URI of all the tokens, but in a single transaction\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tUses the single function so it also emits an event\\n\\t/// @dev \\tThis function requires that all the tokens have a corresponding URI\\n\\t/// @param\\ttokenIds\\tToken Indexes that will be given an URI\\n\\t/// @param\\tnewURIs\\t\\tNew URIs to be set\\n\\tfunction setUniqueURIBatch(uint[] calldata tokenIds, string[] calldata newURIs) external onlyRole(CREATOR) {\\n\\t\\trequire(tokenIds.length == newURIs.length, \\\"RAIR ERC721: Token IDs and URIs should have the same length\\\");\\n\\t\\tfor (uint i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\tsetUniqueURI(tokenIds[i], newURIs[i]);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\ttokenId\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\tNew URI to be given\\n\\tfunction setUniqueURI(uint tokenId, string calldata newURI) public onlyRole(CREATOR) {\\n\\t\\ts.uniqueTokenURI[tokenId] = newURI;\\n\\t\\temit UpdatedTokenURI(tokenId, newURI);\\n\\t}\\n\\n\\t/// @notice  Updates the metadata extension added at the end of all tokens\\n    /// @dev     Must include the . before the extension\\n    /// @param extension     Extension to be added at the end of all contract wide tokens\\n    function setMetadataExtension(string calldata extension) external onlyRole(CREATOR) {\\n        require(bytes(extension)[0] == '.', \\\"RAIR ERC721: Extension must start with a '.'\\\");\\n        s._metadataExtension = extension;\\n        emit UpdatedURIExtension(s._metadataExtension);\\n    }\\n\\n\\t/// @notice\\tGives all tokens within a range a specific URI\\n    /// @dev\\tEmits an event so there's provenance\\n    /// @param\\trangeId\\t\\t\\t\\tToken Index that will be given an URI\\n    /// @param\\tnewURI\\t\\t    \\tNew URI to be given\\n    /// @param\\tappendTokenIndex\\tFlag to append the token index at the end of the new URI\\n    function setRangeURI(\\n        uint rangeId,\\n        string calldata newURI,\\n        bool appendTokenIndex\\n    ) public onlyRole(CREATOR) {\\n        s.rangeURI[rangeId] = newURI;\\n        s.appendTokenIndexToRangeURI[rangeId] = appendTokenIndex;\\n        emit UpdatedRangeURI(rangeId, newURI, appendTokenIndex, s._metadataExtension);\\n    }\\n\\n\\t/// @notice\\tGives an individual token an unique URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tEmits an event so there's provenance\\n\\t/// @param\\tproductId\\t\\t\\t\\t\\t\\tToken Index that will be given an URI\\n\\t/// @param\\tnewURI\\t\\t\\t\\t\\t\\t\\tNew URI to be given\\n\\t/// @param\\tappendTokenIndexToProductURI \\tIf true, it will append the token index to the URI\\n\\tfunction setCollectionURI(uint productId, string calldata newURI, bool appendTokenIndexToProductURI) public onlyRole(CREATOR) {\\n\\t\\ts.productURI[productId] = newURI;\\n\\t\\ts.appendTokenIndexToProductURI[productId] = appendTokenIndexToProductURI;\\n\\t\\temit UpdatedProductURI(productId, newURI, appendTokenIndexToProductURI, s._metadataExtension);\\n\\t}\\n\\n\\t/// @notice\\tThis function use OpenSea's to freeze the metadata\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param tokenId Token Index that will be given an URI\\n\\tfunction freezeMetadata(uint tokenId) public onlyRole(CREATOR) {\\n\\t\\temit PermanentURI(tokenURI(tokenId), tokenId);\\n\\t}\\n\\n\\t/// @notice\\tThis function allow us to set a new contract URI\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param newURI New URI to be given\\n\\tfunction setContractURI(string calldata newURI) external onlyRole(CREATOR) {\\n\\t\\ts.contractMetadataURI = newURI;\\n\\t\\temit UpdatedContractURI(newURI);\\n\\t}\\n\\n\\t/// @notice\\tThis function allow us to see the current URI of the contract\\n\\t/// @return string with the URI of the contract \\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn s.contractMetadataURI;\\n\\t}\\n\\t\\n\\t/// @notice\\tSets the Base URI for ALL tokens\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev\\tCan be overriden by the specific token URI\\n\\t/// @param\\tnewURI\\tURI to be used\\n\\t/// @param\\tappendTokenIndexToBaseURI\\tURI to be used\\n\\tfunction setBaseURI(string calldata newURI, bool appendTokenIndexToBaseURI) external onlyRole(CREATOR) {\\n\\t\\ts.baseURI = newURI;\\n\\t\\ts.appendTokenIndexToBaseURI = appendTokenIndexToBaseURI;\\n\\t\\temit UpdatedBaseURI(newURI, appendTokenIndexToBaseURI, s._metadataExtension);\\n\\t}\\n\\n\\t/// @notice\\tReturns a token's URI\\n    /// @dev\\tWill return unique token URI or product URI or contract URI\\n    /// @param\\ttokenId\\t\\tToken Index to look for\\n\\t/// @return string with the URI of the toke that we are using\\n    function tokenURI(uint tokenId)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        // Unique token URI\\n        string memory URI = s.uniqueTokenURI[tokenId];\\n        if (bytes(URI).length > 0) {\\n            return URI;\\n        }\\n\\n        // Range wide URI\\n        URI = s.rangeURI[s.tokenToRange[tokenId]];\\n        if (bytes(URI).length > 0) {\\n            if (s.appendTokenIndexToRangeURI[s.tokenToRange[tokenId]]) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            URI,\\n                            tokenToCollectionIndex(tokenId).toString(),\\n                            s._metadataExtension\\n                        )\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        // Collection wide URI\\n        URI = s.productURI[s.tokenToProduct[tokenId]];\\n        if (bytes(URI).length > 0) {\\n            if (s.appendTokenIndexToProductURI[s.tokenToProduct[tokenId]]) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            URI,\\n                            tokenToCollectionIndex(tokenId).toString(),\\n                            s._metadataExtension\\n                        )\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        URI = s.baseURI;\\n        if (s.appendTokenIndexToBaseURI) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        URI,\\n                        tokenId.toString(),\\n                        s._metadataExtension\\n                    )\\n                );\\n        }\\n        return URI;\\n    }\\n}\",\"keccak256\":\"0x6dba96607b4e3c5fdcc3bda3ac6e48086e8390c5fd79c2343fdaacf2f58d8fa7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b0f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80639f6350e6116100ad578063ca15c87311610071578063ca15c8731461028a578063d547741f1461029d578063d6215ace146102b0578063e4fbb609146102c3578063e8a3d485146102d857600080fd5b80639f6350e61461021e578063ab9aae3514610231578063b64b21ca14610244578063c1d78b4a14610257578063c87b56dd1461026a57600080fd5b80634dcf6ad6116100f45780634dcf6ad61461019757806381f460ef146101aa5780639010d07c146101bd57806391d14854146101e8578063938e3d7b1461020b57600080fd5b80631c899d1a14610126578063248a9ca31461013b5780632f2ff15d1461017157806336568abe14610184575b600080fd5b6101396101343660046112dc565b6102e0565b005b61015e610149366004611328565b6000908152600a602052604090206001015490565b6040519081526020015b60405180910390f35b61013961017f366004611341565b610354565b610139610192366004611341565b61037f565b6101396101a5366004611328565b610402565b6101396101b8366004611392565b61045f565b6101d06101cb3660046113f0565b6104f4565b6040516001600160a01b039091168152602001610168565b6101fb6101f6366004611341565b610515565b6040519015158152602001610168565b610139610219366004611412565b610540565b61013961022c366004611412565b6105a5565b61015e61023f366004611328565b61068b565b610139610252366004611454565b6106cc565b6101396102653660046114ed565b610738565b61027d610278366004611328565b61082b565b604051610168919061157d565b61015e610298366004611328565b610b71565b6101396102ab366004611341565b610b88565b6101396102be366004611392565b610bae565b61015e600080516020611aba83398151915281565b61027d610c34565b600080516020611aba8339815191526102f98133610cc9565b6000848152601260205260409020610312838583611646565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f984848460405161034693929190611730565b60405180910390a150505050565b6000828152600a60205260409020600101546103708133610cc9565b61037a8383610d2d565b505050565b6001600160a01b03811633146103f45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103fe8282610dc7565b5050565b600080516020611aba83398151915261041b8133610cc9565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076104468461082b565b604051610453919061157d565b60405180910390a25050565b600080516020611aba8339815191526104788133610cc9565b6000858152601a60205260409020610491848683611646565b506000858152601b602052604090819020805460ff1916841515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda43906104e5908790879087908790601c906117d0565b60405180910390a15050505050565b6000828152600b6020526040812061050c9083610e42565b90505b92915050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611aba8339815191526105598133610cc9565b6017610566838583611646565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c18383604051610598929190611810565b60405180910390a1505050565b600080516020611aba8339815191526105be8133610cc9565b828260008181106105d1576105d1611824565b9050013560f81c60f81b6001600160f81b031916601760f91b1461064c5760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b60648201526084016103eb565b601c610659838583611646565b506040517faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da9061059890601c9061183a565b600081815260106020526040812054600e805490919081106106af576106af611824565b9060005260206000209060050201600001548261050f9190611863565b600080516020611aba8339815191526106e58133610cc9565b600c6106f2848683611646565b506015805460ff19168315151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d9061034690869086908690601c90611876565b600080516020611aba8339815191526107518133610cc9565b8382146107c65760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e677468000000000060648201526084016103eb565b60005b84811015610823576108118686838181106107e6576107e6611824565b905060200201358585848181106107ff576107ff611824565b905060200281019061013491906118af565b8061081b816118f6565b9150506107c9565b505050505050565b600081815260126020526040812080546060929190610849906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610875906115c6565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b505050505090506000815111156108d95792915050565b6000838152601160209081526040808320548352601a909152902080546108ff906115c6565b80601f016020809104026020016040519081016040528092919081815260200182805461092b906115c6565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505090506000815111156109ea576000838152601160209081526040808320548352601b90915290205460ff161561050f57806109bf6109ba8561068b565b610e4e565b6040516109d3929190601c9060200161190f565b604051602081830303815290604052915050919050565b6000838152601060209081526040808320548352601390915290208054610a10906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3c906115c6565b8015610a895780601f10610a5e57610100808354040283529160200191610a89565b820191906000526020600020905b815481529060010190602001808311610a6c57829003601f168201915b50505050509050600081511115610acb576000838152601060209081526040808320548352601490915290205460ff161561050f57806109bf6109ba8561068b565b600c8054610ad8906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b04906115c6565b8015610b515780601f10610b2657610100808354040283529160200191610b51565b820191906000526020600020905b815481529060010190602001808311610b3457829003601f168201915b5050601554939450505060ff90911615905061050f57806109bf84610e4e565b6000818152600b6020526040812061050f90610f57565b6000828152600a6020526040902060010154610ba48133610cc9565b61037a8383610dc7565b600080516020611aba833981519152610bc78133610cc9565b6000858152601360205260409020610be0848683611646565b5060008581526014602052604090819020805460ff1916841515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f43906104e5908790879087908790601c906117d0565b606060006017018054610c46906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c72906115c6565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050905090565b610cd38282610515565b6103fe57610ceb816001600160a01b03166014610f61565b610cf6836020610f61565b604051602001610d079291906119af565b60408051601f198184030181529082905262461bcd60e51b82526103eb9160040161157d565b610d378282610515565b6103fe576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d6f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b6020526040902061037a90826110fd565b610dd18282610515565b156103fe576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b6020526040902061037a9082611112565b600061050c8383611127565b606081600003610e755750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9f5780610e89816118f6565b9150610e989050600a83611a3a565b9150610e79565b60008167ffffffffffffffff811115610eba57610eba6115b0565b6040519080825280601f01601f191660200182016040528015610ee4576020820181803683370190505b5090505b8415610f4f57610ef9600183611863565b9150610f06600a86611a4e565b610f11906030611a62565b60f81b818381518110610f2657610f26611824565b60200101906001600160f81b031916908160001a905350610f48600a86611a3a565b9450610ee8565b949350505050565b600061050f825490565b60606000610f70836002611a75565b610f7b906002611a62565b67ffffffffffffffff811115610f9357610f936115b0565b6040519080825280601f01601f191660200182016040528015610fbd576020820181803683370190505b509050600360fc1b81600081518110610fd857610fd8611824565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061100757611007611824565b60200101906001600160f81b031916908160001a905350600061102b846002611a75565b611036906001611a62565b90505b60018111156110ae576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061106a5761106a611824565b1a60f81b82828151811061108057611080611824565b60200101906001600160f81b031916908160001a90535060049490941c936110a781611a8c565b9050611039565b50831561050c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103eb565b600061050c836001600160a01b038416611151565b600061050c836001600160a01b0384166111a0565b600082600001828154811061113e5761113e611824565b9060005260206000200154905092915050565b60008181526001830160205260408120546111985750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050f565b50600061050f565b600081815260018301602052604081205480156112895760006111c4600183611863565b85549091506000906111d890600190611863565b905081811461123d5760008660000182815481106111f8576111f8611824565b906000526020600020015490508087600001848154811061121b5761121b611824565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061124e5761124e611aa3565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050f565b600091505061050f565b60008083601f8401126112a557600080fd5b50813567ffffffffffffffff8111156112bd57600080fd5b6020830191508360208285010111156112d557600080fd5b9250929050565b6000806000604084860312156112f157600080fd5b83359250602084013567ffffffffffffffff81111561130f57600080fd5b61131b86828701611293565b9497909650939450505050565b60006020828403121561133a57600080fd5b5035919050565b6000806040838503121561135457600080fd5b8235915060208301356001600160a01b038116811461137257600080fd5b809150509250929050565b8035801515811461138d57600080fd5b919050565b600080600080606085870312156113a857600080fd5b84359350602085013567ffffffffffffffff8111156113c657600080fd5b6113d287828801611293565b90945092506113e590506040860161137d565b905092959194509250565b6000806040838503121561140357600080fd5b50508035926020909101359150565b6000806020838503121561142557600080fd5b823567ffffffffffffffff81111561143c57600080fd5b61144885828601611293565b90969095509350505050565b60008060006040848603121561146957600080fd5b833567ffffffffffffffff81111561148057600080fd5b61148c86828701611293565b909450925061149f90506020850161137d565b90509250925092565b60008083601f8401126114ba57600080fd5b50813567ffffffffffffffff8111156114d257600080fd5b6020830191508360208260051b85010111156112d557600080fd5b6000806000806040858703121561150357600080fd5b843567ffffffffffffffff8082111561151b57600080fd5b611527888389016114a8565b9096509450602087013591508082111561154057600080fd5b5061154d878288016114a8565b95989497509550505050565b60005b8381101561157457818101518382015260200161155c565b50506000910152565b602081526000825180602084015261159c816040850160208701611559565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806115da57607f821691505b6020821081036115fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037a57600081815260208120601f850160051c810160208610156116275750805b601f850160051c820191505b8181101561082357828155600101611633565b67ffffffffffffffff83111561165e5761165e6115b0565b6116728361166c83546115c6565b83611600565b6000601f8411600181146116a6576000851561168e5750838201355b600019600387901b1c1916600186901b178355611700565b600083815260209020601f19861690835b828110156116d757868501358255602094850194600190920191016116b7565b50868210156116f45760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b83815260406020820152600061174a604083018486611707565b95945050505050565b60008154611760816115c6565b80855260206001838116801561177d5760018114611797576117c5565b60ff1985168884015283151560051b8801830195506117c5565b866000528260002060005b858110156117bd5781548a82018601529083019084016117a2565b890184019650505b505050505092915050565b8581526080602082015260006117ea608083018688611707565b841515604084015282810360608401526118048185611753565b98975050505050505050565b602081526000610f4f602083018486611707565b634e487b7160e01b600052603260045260246000fd5b60208152600061050c6020830184611753565b634e487b7160e01b600052601160045260246000fd5b8181038181111561050f5761050f61184d565b60608152600061188a606083018688611707565b841515602084015282810360408401526118a48185611753565b979650505050505050565b6000808335601e198436030181126118c657600080fd5b83018035915067ffffffffffffffff8211156118e157600080fd5b6020019150368190038213156112d557600080fd5b6000600182016119085761190861184d565b5060010190565b6000845160206119228285838a01611559565b8551918401916119358184848a01611559565b8554920191600090611946816115c6565b6001828116801561195e57600181146119735761199f565b60ff198416875282151583028701945061199f565b896000528560002060005b848110156119975781548982015290830190870161197e565b505082870194505b50929a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119e7816017850160208801611559565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a18816028840160208801611559565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082611a4957611a49611a24565b500490565b600082611a5d57611a5d611a24565b500690565b8082018082111561050f5761050f61184d565b808202811582820484141761050f5761050f61184d565b600081611a9b57611a9b61184d565b506000190190565b634e487b7160e01b600052603160045260246000fdfe3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6a26469706673582212204991aeb5dd715eb85ac7a719e9d3a2b1cc46615cc3a35231c7c47ea13518f70d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80639f6350e6116100ad578063ca15c87311610071578063ca15c8731461028a578063d547741f1461029d578063d6215ace146102b0578063e4fbb609146102c3578063e8a3d485146102d857600080fd5b80639f6350e61461021e578063ab9aae3514610231578063b64b21ca14610244578063c1d78b4a14610257578063c87b56dd1461026a57600080fd5b80634dcf6ad6116100f45780634dcf6ad61461019757806381f460ef146101aa5780639010d07c146101bd57806391d14854146101e8578063938e3d7b1461020b57600080fd5b80631c899d1a14610126578063248a9ca31461013b5780632f2ff15d1461017157806336568abe14610184575b600080fd5b6101396101343660046112dc565b6102e0565b005b61015e610149366004611328565b6000908152600a602052604090206001015490565b6040519081526020015b60405180910390f35b61013961017f366004611341565b610354565b610139610192366004611341565b61037f565b6101396101a5366004611328565b610402565b6101396101b8366004611392565b61045f565b6101d06101cb3660046113f0565b6104f4565b6040516001600160a01b039091168152602001610168565b6101fb6101f6366004611341565b610515565b6040519015158152602001610168565b610139610219366004611412565b610540565b61013961022c366004611412565b6105a5565b61015e61023f366004611328565b61068b565b610139610252366004611454565b6106cc565b6101396102653660046114ed565b610738565b61027d610278366004611328565b61082b565b604051610168919061157d565b61015e610298366004611328565b610b71565b6101396102ab366004611341565b610b88565b6101396102be366004611392565b610bae565b61015e600080516020611aba83398151915281565b61027d610c34565b600080516020611aba8339815191526102f98133610cc9565b6000848152601260205260409020610312838583611646565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f984848460405161034693929190611730565b60405180910390a150505050565b6000828152600a60205260409020600101546103708133610cc9565b61037a8383610d2d565b505050565b6001600160a01b03811633146103f45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103fe8282610dc7565b5050565b600080516020611aba83398151915261041b8133610cc9565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b556572076104468461082b565b604051610453919061157d565b60405180910390a25050565b600080516020611aba8339815191526104788133610cc9565b6000858152601a60205260409020610491848683611646565b506000858152601b602052604090819020805460ff1916841515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda43906104e5908790879087908790601c906117d0565b60405180910390a15050505050565b6000828152600b6020526040812061050c9083610e42565b90505b92915050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611aba8339815191526105598133610cc9565b6017610566838583611646565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c18383604051610598929190611810565b60405180910390a1505050565b600080516020611aba8339815191526105be8133610cc9565b828260008181106105d1576105d1611824565b9050013560f81c60f81b6001600160f81b031916601760f91b1461064c5760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b60648201526084016103eb565b601c610659838583611646565b506040517faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da9061059890601c9061183a565b600081815260106020526040812054600e805490919081106106af576106af611824565b9060005260206000209060050201600001548261050f9190611863565b600080516020611aba8339815191526106e58133610cc9565b600c6106f2848683611646565b506015805460ff19168315151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d9061034690869086908690601c90611876565b600080516020611aba8339815191526107518133610cc9565b8382146107c65760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e677468000000000060648201526084016103eb565b60005b84811015610823576108118686838181106107e6576107e6611824565b905060200201358585848181106107ff576107ff611824565b905060200281019061013491906118af565b8061081b816118f6565b9150506107c9565b505050505050565b600081815260126020526040812080546060929190610849906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610875906115c6565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b505050505090506000815111156108d95792915050565b6000838152601160209081526040808320548352601a909152902080546108ff906115c6565b80601f016020809104026020016040519081016040528092919081815260200182805461092b906115c6565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505090506000815111156109ea576000838152601160209081526040808320548352601b90915290205460ff161561050f57806109bf6109ba8561068b565b610e4e565b6040516109d3929190601c9060200161190f565b604051602081830303815290604052915050919050565b6000838152601060209081526040808320548352601390915290208054610a10906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3c906115c6565b8015610a895780601f10610a5e57610100808354040283529160200191610a89565b820191906000526020600020905b815481529060010190602001808311610a6c57829003601f168201915b50505050509050600081511115610acb576000838152601060209081526040808320548352601490915290205460ff161561050f57806109bf6109ba8561068b565b600c8054610ad8906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610b04906115c6565b8015610b515780601f10610b2657610100808354040283529160200191610b51565b820191906000526020600020905b815481529060010190602001808311610b3457829003601f168201915b5050601554939450505060ff90911615905061050f57806109bf84610e4e565b6000818152600b6020526040812061050f90610f57565b6000828152600a6020526040902060010154610ba48133610cc9565b61037a8383610dc7565b600080516020611aba833981519152610bc78133610cc9565b6000858152601360205260409020610be0848683611646565b5060008581526014602052604090819020805460ff1916841515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f43906104e5908790879087908790601c906117d0565b606060006017018054610c46906115c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c72906115c6565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b5050505050905090565b610cd38282610515565b6103fe57610ceb816001600160a01b03166014610f61565b610cf6836020610f61565b604051602001610d079291906119af565b60408051601f198184030181529082905262461bcd60e51b82526103eb9160040161157d565b610d378282610515565b6103fe576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d6f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b6020526040902061037a90826110fd565b610dd18282610515565b156103fe576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b6020526040902061037a9082611112565b600061050c8383611127565b606081600003610e755750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9f5780610e89816118f6565b9150610e989050600a83611a3a565b9150610e79565b60008167ffffffffffffffff811115610eba57610eba6115b0565b6040519080825280601f01601f191660200182016040528015610ee4576020820181803683370190505b5090505b8415610f4f57610ef9600183611863565b9150610f06600a86611a4e565b610f11906030611a62565b60f81b818381518110610f2657610f26611824565b60200101906001600160f81b031916908160001a905350610f48600a86611a3a565b9450610ee8565b949350505050565b600061050f825490565b60606000610f70836002611a75565b610f7b906002611a62565b67ffffffffffffffff811115610f9357610f936115b0565b6040519080825280601f01601f191660200182016040528015610fbd576020820181803683370190505b509050600360fc1b81600081518110610fd857610fd8611824565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061100757611007611824565b60200101906001600160f81b031916908160001a905350600061102b846002611a75565b611036906001611a62565b90505b60018111156110ae576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061106a5761106a611824565b1a60f81b82828151811061108057611080611824565b60200101906001600160f81b031916908160001a90535060049490941c936110a781611a8c565b9050611039565b50831561050c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103eb565b600061050c836001600160a01b038416611151565b600061050c836001600160a01b0384166111a0565b600082600001828154811061113e5761113e611824565b9060005260206000200154905092915050565b60008181526001830160205260408120546111985750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050f565b50600061050f565b600081815260018301602052604081205480156112895760006111c4600183611863565b85549091506000906111d890600190611863565b905081811461123d5760008660000182815481106111f8576111f8611824565b906000526020600020015490508087600001848154811061121b5761121b611824565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061124e5761124e611aa3565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050f565b600091505061050f565b60008083601f8401126112a557600080fd5b50813567ffffffffffffffff8111156112bd57600080fd5b6020830191508360208285010111156112d557600080fd5b9250929050565b6000806000604084860312156112f157600080fd5b83359250602084013567ffffffffffffffff81111561130f57600080fd5b61131b86828701611293565b9497909650939450505050565b60006020828403121561133a57600080fd5b5035919050565b6000806040838503121561135457600080fd5b8235915060208301356001600160a01b038116811461137257600080fd5b809150509250929050565b8035801515811461138d57600080fd5b919050565b600080600080606085870312156113a857600080fd5b84359350602085013567ffffffffffffffff8111156113c657600080fd5b6113d287828801611293565b90945092506113e590506040860161137d565b905092959194509250565b6000806040838503121561140357600080fd5b50508035926020909101359150565b6000806020838503121561142557600080fd5b823567ffffffffffffffff81111561143c57600080fd5b61144885828601611293565b90969095509350505050565b60008060006040848603121561146957600080fd5b833567ffffffffffffffff81111561148057600080fd5b61148c86828701611293565b909450925061149f90506020850161137d565b90509250925092565b60008083601f8401126114ba57600080fd5b50813567ffffffffffffffff8111156114d257600080fd5b6020830191508360208260051b85010111156112d557600080fd5b6000806000806040858703121561150357600080fd5b843567ffffffffffffffff8082111561151b57600080fd5b611527888389016114a8565b9096509450602087013591508082111561154057600080fd5b5061154d878288016114a8565b95989497509550505050565b60005b8381101561157457818101518382015260200161155c565b50506000910152565b602081526000825180602084015261159c816040850160208701611559565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806115da57607f821691505b6020821081036115fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561037a57600081815260208120601f850160051c810160208610156116275750805b601f850160051c820191505b8181101561082357828155600101611633565b67ffffffffffffffff83111561165e5761165e6115b0565b6116728361166c83546115c6565b83611600565b6000601f8411600181146116a6576000851561168e5750838201355b600019600387901b1c1916600186901b178355611700565b600083815260209020601f19861690835b828110156116d757868501358255602094850194600190920191016116b7565b50868210156116f45760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b83815260406020820152600061174a604083018486611707565b95945050505050565b60008154611760816115c6565b80855260206001838116801561177d5760018114611797576117c5565b60ff1985168884015283151560051b8801830195506117c5565b866000528260002060005b858110156117bd5781548a82018601529083019084016117a2565b890184019650505b505050505092915050565b8581526080602082015260006117ea608083018688611707565b841515604084015282810360608401526118048185611753565b98975050505050505050565b602081526000610f4f602083018486611707565b634e487b7160e01b600052603260045260246000fd5b60208152600061050c6020830184611753565b634e487b7160e01b600052601160045260246000fd5b8181038181111561050f5761050f61184d565b60608152600061188a606083018688611707565b841515602084015282810360408401526118a48185611753565b979650505050505050565b6000808335601e198436030181126118c657600080fd5b83018035915067ffffffffffffffff8211156118e157600080fd5b6020019150368190038213156112d557600080fd5b6000600182016119085761190861184d565b5060010190565b6000845160206119228285838a01611559565b8551918401916119358184848a01611559565b8554920191600090611946816115c6565b6001828116801561195e57600181146119735761199f565b60ff198416875282151583028701945061199f565b896000528560002060005b848110156119975781548982015290830190870161197e565b505082870194505b50929a9950505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119e7816017850160208801611559565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a18816028840160208801611559565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082611a4957611a49611a24565b500490565b600082611a5d57611a5d611a24565b500690565b8082018082111561050f5761050f61184d565b808202811582820484141761050f5761050f61184d565b600081611a9b57611a9b61184d565b506000190190565b634e487b7160e01b600052603160045260246000fdfe3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6a26469706673582212204991aeb5dd715eb85ac7a719e9d3a2b1cc46615cc3a35231c7c47ea13518f70d64736f6c63430008110033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "events": {
      "UpdatedBaseURI(string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the tokens appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new  base identifier for all the tokens"
        }
      },
      "UpdatedContractURI(string)": {
        "params": {
          "newURI": "Contains the new identifier for the contract "
        }
      },
      "UpdatedProductURI(uint256,string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the token appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new identifier for the product",
          "productId": "Contains the index of the product to change"
        }
      },
      "UpdatedRangeURI(uint256,string,bool,string)": {
        "params": {
          "appendTokenIndex": "Contains the index of the token appended to the URI",
          "metadataExtension": "File extension (if exists)",
          "newURI": "Contains the new identifier for the product",
          "rangeId": "Contains the index of the product to change"
        }
      },
      "UpdatedTokenURI(uint256,string)": {
        "params": {
          "newURI": "Contains the new identifier for the token",
          "tokenId": "Contains the index of the token appended to the URI"
        }
      },
      "UpdatedURIExtension(string)": {
        "details": "It will be appended ONLY if the token ID has to also be appended",
        "params": {
          "newExtension": "The new extension for all the URIs"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "contractURI()": {
        "returns": {
          "_0": "string with the URI of the contract "
        }
      },
      "freezeMetadata(uint256)": {
        "details": "This function is only available to an account with a `CREATOR` role",
        "params": {
          "tokenId": "Token Index that will be given an URI"
        }
      },
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bytes that indicates if an account has or not an admin role"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Contains the indexed position to verify inside the role members list",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "address that indicates the address indexed in that position"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "uint256 that indicates the total accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address thay we want to verify",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bool that indicates if an account has or not a role"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Currently you can only renounce to your own roles",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role to remove from our account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to revoke"
        }
      },
      "setBaseURI(string,bool)": {
        "details": "This function is only available to an account with a `CREATOR` roleCan be overriden by the specific token URI",
        "params": {
          "appendTokenIndexToBaseURI": "URI to be used",
          "newURI": "URI to be used"
        }
      },
      "setCollectionURI(uint256,string,bool)": {
        "details": "This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance",
        "params": {
          "appendTokenIndexToProductURI": "If true, it will append the token index to the URI",
          "newURI": "New URI to be given",
          "productId": "Token Index that will be given an URI"
        }
      },
      "setContractURI(string)": {
        "details": "This function is only available to an account with a `CREATOR` role",
        "params": {
          "newURI": "New URI to be given"
        }
      },
      "setMetadataExtension(string)": {
        "details": "Must include the . before the extension",
        "params": {
          "extension": "Extension to be added at the end of all contract wide tokens"
        }
      },
      "setRangeURI(uint256,string,bool)": {
        "details": "Emits an event so there's provenance",
        "params": {
          "appendTokenIndex": "Flag to append the token index at the end of the new URI",
          "newURI": "New URI to be given",
          "rangeId": "Token Index that will be given an URI"
        }
      },
      "setUniqueURI(uint256,string)": {
        "details": "This function is only available to an account with a `CREATOR` roleEmits an event so there's provenance",
        "params": {
          "newURI": "New URI to be given",
          "tokenId": "Token Index that will be given an URI"
        }
      },
      "setUniqueURIBatch(uint256[],string[])": {
        "details": "This function is only available to an account with a `CREATOR` roleUses the single function so it also emits an eventThis function requires that all the tokens have a corresponding URI",
        "params": {
          "newURIs": "New URIs to be set",
          "tokenIds": "Token Indexes that will be given an URI"
        }
      },
      "tokenToCollectionIndex(uint256)": {
        "params": {
          "token": "Token ID to find"
        },
        "returns": {
          "tokenIndex": "which contains the corresponding token index"
        }
      },
      "tokenURI(uint256)": {
        "details": "Will return unique token URI or product URI or contract URI",
        "params": {
          "tokenId": "Token Index to look for"
        },
        "returns": {
          "_0": "string with the URI of the toke that we are using"
        }
      }
    },
    "title": "RAIR Metadata facet contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when we change an admin role"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we grant a role"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we revoke a role"
      },
      "UpdatedBaseURI(string,bool,string)": {
        "notice": "This event stores in the blockchain when the base code of all the tokens has an update in its URI"
      },
      "UpdatedContractURI(string)": {
        "notice": "This event stores in the blockchain when a contract has a change in its URI"
      },
      "UpdatedProductURI(uint256,string,bool,string)": {
        "notice": "This event stores in the blockchain when a product has a change in its URI"
      },
      "UpdatedRangeURI(uint256,string,bool,string)": {
        "notice": "This event stores in the blockchain when a range has a change in its URI"
      },
      "UpdatedTokenURI(uint256,string)": {
        "notice": "This event stores in the blockchain when a token has a change in its URI"
      },
      "UpdatedURIExtension(string)": {
        "notice": "This event informs the new extension all metadata URIs will have appended at the end"
      }
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "This function allow us to see the current URI of the contract"
      },
      "freezeMetadata(uint256)": {
        "notice": "This function use OpenSea's to freeze the metadata"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allow us to check the admin role that contains a role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to check the address of an indexed position for the role list"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to check total members that has an selected role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow us to grant a role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "Allow us to check the if and account has a selected role"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow us to renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow us to revoke a role to an account"
      },
      "setBaseURI(string,bool)": {
        "notice": "Sets the Base URI for ALL tokens"
      },
      "setCollectionURI(uint256,string,bool)": {
        "notice": "Gives an individual token an unique URI"
      },
      "setContractURI(string)": {
        "notice": "This function allow us to set a new contract URI"
      },
      "setMetadataExtension(string)": {
        "notice": "Updates the metadata extension added at the end of all tokens"
      },
      "setRangeURI(uint256,string,bool)": {
        "notice": "Gives all tokens within a range a specific URI"
      },
      "setUniqueURI(uint256,string)": {
        "notice": "Gives an individual token an unique URI"
      },
      "setUniqueURIBatch(uint256[],string[])": {
        "notice": "Updates the unique URI of all the tokens, but in a single transaction"
      },
      "tokenToCollectionIndex(uint256)": {
        "notice": "Returns the token index inside the product"
      },
      "tokenURI(uint256)": {
        "notice": "Returns a token's URI"
      }
    },
    "notice": "You can use this contract to administrate the metadata asociated to the Rair facet",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8040,
        "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage721)8024_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(product)7913_storage)dyn_storage": {
        "base": "t_struct(product)7913_storage",
        "encoding": "dynamic_array",
        "label": "struct product[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(range)7901_storage)dyn_storage": {
        "base": "t_struct(range)7901_storage",
        "encoding": "dynamic_array",
        "label": "struct range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2617_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2617_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5792_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5792_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2617_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2616,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2316_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage721)8024_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage721",
        "members": [
          {
            "astId": 7915,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7917,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7921,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 7925,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 7929,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 7935,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 7941,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 7945,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7948,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 7952,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7957,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)5792_storage)"
          },
          {
            "astId": 7962,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2617_storage)"
          },
          {
            "astId": 7964,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 7966,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "factoryAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 7968,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "royaltyFee",
            "offset": 20,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 7972,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "products",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(product)7913_storage)dyn_storage"
          },
          {
            "astId": 7976,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "ranges",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(range)7901_storage)dyn_storage"
          },
          {
            "astId": 7980,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "tokenToProduct",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7984,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "tokenToRange",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7988,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "uniqueTokenURI",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 7992,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "productURI",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 7996,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "appendTokenIndexToProductURI",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 7998,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "appendTokenIndexToBaseURI",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          },
          {
            "astId": 8003,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "tokensByProduct",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 8005,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "contractMetadataURI",
            "offset": 0,
            "slot": "23",
            "type": "t_string_storage"
          },
          {
            "astId": 8009,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeToProduct",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 8013,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_minted",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 8017,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeURI",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 8021,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "appendTokenIndexToRangeURI",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 8023,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_metadataExtension",
            "offset": 0,
            "slot": "28",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_struct(RoleData)5792_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 5789,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5791,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2316_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2311,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2315,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(product)7913_storage": {
        "encoding": "inplace",
        "label": "struct product",
        "members": [
          {
            "astId": 7903,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "startingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7905,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "endingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7907,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7909,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7912,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(range)7901_storage": {
        "encoding": "inplace",
        "label": "struct range",
        "members": [
          {
            "astId": 7888,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7890,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7892,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7894,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7896,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7898,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7900,
            "contract": "contracts/tokens/RAIR Token Facets/RAIRMetadataFacet.sol:RAIRMetadataFacet",
            "label": "rangeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}