{
  "address": "0x956741C287C1c3b0Ba47f471C95870543Fe62d03",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "CreatedRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        }
      ],
      "name": "TradingLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "TradingUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeStart_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeEnd_",
          "type": "uint256"
        }
      ],
      "name": "canCreateRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "createRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeLength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct RAIRRangesFacet.rangeData[]",
          "name": "data",
          "type": "tuple[]"
        }
      ],
      "name": "createRangeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        }
      ],
      "name": "isRangeLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "productRangeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct range",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        }
      ],
      "name": "rangeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rangeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rangePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rangeName",
              "type": "string"
            }
          ],
          "internalType": "struct range",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeIndex_",
          "type": "uint256"
        }
      ],
      "name": "rangeToProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensAllowed_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedTokens_",
          "type": "uint256"
        }
      ],
      "name": "updateRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5ae5a830f6e94c8c8a770ba830d1e4105afb1b732d71beab343b223273f95a0",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x956741C287C1c3b0Ba47f471C95870543Fe62d03",
    "transactionIndex": 2,
    "gasUsed": "1855262",
    "logsBloom": "0x
    "blockHash": "0x1fd5880dec4fe0db4d5cf01d753536d8ad7390000dc792d1843a7bf4f377d73a",
    "transactionHash": "0xd5ae5a830f6e94c8c8a770ba830d1e4105afb1b732d71beab343b223273f95a0",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38608069,
        "transactionHash": "0xd5ae5a830f6e94c8c8a770ba830d1e4105afb1b732d71beab343b223273f95a0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000107a609d302e00000000000000000000000000000000000000000000000000490dc839fb72a263000000000000000000000000000000000000000000001034bcb2ea1f8ca4aa3600000000000000000000000000000000000000000000000048fd4dd95e427463000000000000000000000000000000000000000000001034bcc3648029d4d836",
        "logIndex": 4,
        "blockHash": "0x1fd5880dec4fe0db4d5cf01d753536d8ad7390000dc792d1843a7bf4f377d73a"
      }
    ],
    "blockNumber": 38608069,
    "cumulativeGasUsed": "1975992",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "4fa33fb3fce3a9fdbebfcf9eaaf1c131",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"CreatedRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"name\":\"TradingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"TradingUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"name\":\"UpdatedRange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd_\",\"type\":\"uint256\"}],\"name\":\"canCreateRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"createRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct RAIRRangesFacet.rangeData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"createRangeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"}],\"name\":\"isRangeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"productRangeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct range\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"}],\"name\":\"rangeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rangeName\",\"type\":\"string\"}],\"internalType\":\"struct range\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeIndex_\",\"type\":\"uint256\"}],\"name\":\"rangeToProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllowed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens_\",\"type\":\"uint256\"}],\"name\":\"updateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"events\":{\"CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)\":{\"params\":{\"end\":\"Contains the last NFT of the range collection\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"productIndex\":\"Contains the position where the product was indexed\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"start\":\"Contains the start position of the range of nft collection\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"contains the new status of the role\",\"previousAdminRole\":\"contains the previous status of the role\",\"role\":\"Contains the role we want to update\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to grant the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to revoke the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"TradingLocked(uint256,uint256,uint256,uint256)\":{\"params\":{\"from\":\"Contains the starting NFT of the range that we want to lock\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"to\":\"Contains the last NFT of the range that we want to lock\"}},\"TradingUnlocked(uint256,uint256,uint256)\":{\"params\":{\"from\":\"Contains the starting NFT of the range that we want to lock\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"to\":\"Contains the last NFT of the range that we want to lock\"}},\"UpdatedRange(uint256,string,uint256,uint256,uint256)\":{\"params\":{\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"rangeIndex\":\"Contains the position where the range was indexed\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}}},\"kind\":\"dev\",\"methods\":{\"canCreateRange(uint256,uint256,uint256)\":{\"params\":{\"productId_\":\"Contains the identification for the product\",\"rangeEnd_\":\"Contains the tentative NFT to use as ending point of the range\",\"rangeStart_\":\"Contains the tentative NFT to use as starting point of the range \"},\"returns\":{\"_0\":\"bool With the answer if the range cant be creater or not\"}},\"createRange(uint256,uint256,uint256,uint256,uint256,string)\":{\"details\":\"This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection \",\"params\":{\"collectionId\":\"Contains the identification for the product\",\"lockedTokens\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price\":\"Contains the selling price for the range of NFT\",\"rangeLength\":\"Number of tokens contained in the range\",\"tokensAllowed\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}},\"createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])\":{\"details\":\"This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection \",\"params\":{\"collectionId\":\"Contains the identification for the product\",\"data\":\"An array with the data for all the ranges that we want to implement \"}},\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bytes that indicates if an account has or not an admin role\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Contains the indexed position to verify inside the role members list\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"address that indicates the address indexed in that position\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"uint256 that indicates the total accounts with that role\"}},\"grantRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to grant\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address thay we want to verify\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bool that indicates if an account has or not a role\"}},\"isRangeLocked(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeId\":\"Identification of the range to verify\"},\"returns\":{\"_0\":\"bool with the current status of the range lock\\t\\t\\ttrue for lock and false for unlocked\"}},\"productRangeInfo(uint256,uint256)\":{\"params\":{\"collectionId\":\"Index of the product to verify\",\"rangeIndex\":\"Index of the range to verify\"},\"returns\":{\"data\":\"\\t\\t\\tInformation about the range\"}},\"rangeInfo(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeId\":\"Identification of the range to verify\"},\"returns\":{\"data\":\"\\t\\t\\tInformation about the range\",\"productIndex\":\"\\tContains the index of the product in the range\"}},\"rangeToProduct(uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing range \",\"params\":{\"rangeIndex_\":\"Identification of the range to verify\"},\"returns\":{\"_0\":\"uint which indicates the index of the product\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Currently you can only renounce to your own roles\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role to remove from our account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to revoke\"}},\"updateRange(uint256,string,uint256,uint256,uint256)\":{\"details\":\"This function requires that the rangeIndex_ points to an existing rangeThis function is only available to an account with a `CREATOR` role\",\"params\":{\"lockedTokens_\":\"Contains all the NFT tokens in the range that are unavailable for sell\",\"name\":\"Contains the name for the created NFT collection range\",\"price_\":\"Contains the selling price for the range of NFT\",\"rangeId\":\"Identification of the range to verify\",\"tokensAllowed_\":\"Contains all the allowed NFT tokens in the range that are available for sell\"}}},\"title\":\"This is contract to manage the Rair token ranges facet\",\"version\":1},\"userdoc\":{\"events\":{\"CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range is correctly created\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when we change an admin role\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we grant a role\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we revoke a role\"},\"TradingLocked(uint256,uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range trading is effectively locked  \"},\"TradingUnlocked(uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range trading is effectively unlocked \"},\"UpdatedRange(uint256,string,uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when the NFT range is correctly updated\"}},\"kind\":\"user\",\"methods\":{\"canCreateRange(uint256,uint256,uint256)\":{\"notice\":\"This functions allow us to know if a desidred range can be created or not\"},\"createRange(uint256,uint256,uint256,uint256,uint256,string)\":{\"notice\":\"This function that will create the NFT range if the requirements are meet\"},\"createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])\":{\"notice\":\"This function will create as many ranges as the data array requires\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allow us to check the admin role that contains a role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to check the address of an indexed position for the role list\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to check total members that has an selected role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow us to grant a role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"Allow us to check the if and account has a selected role\"},\"isRangeLocked(uint256)\":{\"notice\":\"This functions shows is the range is currently locked or not \"},\"productRangeInfo(uint256,uint256)\":{\"notice\":\"This functions shows the information for the range of a product\"},\"rangeInfo(uint256)\":{\"notice\":\"This functions allow us to check the information of the range\"},\"rangeToProduct(uint256)\":{\"notice\":\"This functions return us the product that containt the selected range\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow us to renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow us to revoke a role to an account\"},\"updateRange(uint256,string,uint256,uint256,uint256)\":{\"notice\":\"This functions allow us to update the information about a range\"}},\"notice\":\"You can use this contract to administrate ranges, transfers & minting of the tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR Token Facets/RangesFacet.sol\":\"RAIRRangesFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xdaebcf9440203930cebc6e8decfbddac015b0fda8ebd26b18d6bb8d6af0ffeee\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// August 2022 - Metadata File Extension Update\\n\\tmapping(uint => string) rangeURI;\\n\\tmapping(uint => bool) appendTokenIndexToRangeURI;\\n\\tstring _metadataExtension;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\t/// @notice this funtion set the storage of the diamonds 721 contracts \\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title  This is contract to manage the access control of the RAIR token facet\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x8d36cbe7a75ffb8f011626f88c6287cb99b291b7b9b15cec90d9b283a25c736c\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/RangesFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport './AppStorage.sol';\\n/// @title  This is contract to manage the Rair token ranges facet\\n/// @notice You can use this contract to administrate ranges, transfers & minting of the tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract RAIRRangesFacet is AccessControlAppStorageEnumerable721 {\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\n\\t/// @notice This event stores in the blockchain when the NFT range is correctly created\\n    /// @param  productIndex Contains the position where the product was indexed\\n\\t/// @param  start Contains the start position of the range of nft collection\\n\\t/// @param  end Contains the last NFT of the range collection\\n\\t/// @param  price Contains the selling price for the range of NFT\\n\\t/// @param  tokensAllowed Contains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param  name Contains the name for the created NFT collection range\\n\\t/// @param  rangeIndex Contains the position where the range was indexed\\n\\tevent CreatedRange(uint productIndex, uint start, uint end, uint price, uint tokensAllowed, uint lockedTokens, string name, uint rangeIndex);\\n\\t/// @notice This event stores in the blockchain when the NFT range is correctly updated\\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  name Contains the name for the created NFT collection range\\n\\t/// @param  price Contains the selling price for the range of NFT\\n\\t/// @param  tokensAllowed Contains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\tevent UpdatedRange(uint rangeIndex, string name, uint price, uint tokensAllowed, uint lockedTokens);\\n\\t/// @notice This event stores in the blockchain when the NFT range trading is effectively locked  \\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  from Contains the starting NFT of the range that we want to lock\\n\\t/// @param  to Contains the last NFT of the range that we want to lock\\n\\t/// @param  lockedTokens Contains all the NFT tokens in the range that are unavailable for sell\\n\\tevent TradingLocked(uint indexed rangeIndex, uint from, uint to, uint lockedTokens);\\n\\t/// @notice This event stores in the blockchain when the NFT range trading is effectively unlocked \\n    /// @param  rangeIndex Contains the position where the range was indexed\\n\\t/// @param  from Contains the starting NFT of the range that we want to lock\\n\\t/// @param  to Contains the last NFT of the range that we want to lock\\n\\tevent TradingUnlocked(uint indexed rangeIndex, uint from, uint to);\\n\\n\\t// Auxiliary struct used to avoid Stack too deep errors\\n\\tstruct rangeData {\\n\\t\\tuint rangeLength;\\n\\t\\tuint price;\\n\\t\\tuint tokensAllowed;\\n\\t\\tuint lockedTokens;\\n\\t\\tstring name;\\n\\t}\\n\\n\\t/// @notice Verifies that the range exists\\n\\t/// @param\\trangeID\\tIdentification of the range to verify\\n\\tmodifier rangeExists(uint rangeID) {\\n\\t\\trequire(s.ranges.length > rangeID, \\\"RAIR ERC721 Ranges: Range does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice This functions verify if the current colecction exist or not\\n\\t/// @param\\tcollectionId\\tIdentification of the collection that we want to use\\n\\tmodifier collectionExists(uint collectionId) {\\n\\t\\trequire(s.products.length > collectionId, \\\"RAIR ERC721 Ranges: Collection does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice This functions return us the product that containt the selected range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeIndex_\\t\\tIdentification of the range to verify\\n\\t/// @return uint which indicates the index of the product\\n\\tfunction rangeToProduct(uint rangeIndex_) public view rangeExists(rangeIndex_) returns (uint) {\\n\\t\\treturn s.rangeToProduct[rangeIndex_];\\n\\t}\\n\\n\\t/// @notice This functions allow us to check the information of the range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeId\\tIdentification of the range to verify\\n\\t/// @return data \\t\\t\\tInformation about the range\\n\\t/// @return productIndex \\tContains the index of the product in the range\\n\\tfunction rangeInfo(uint rangeId) external view rangeExists(rangeId) returns(range memory data, uint productIndex) {\\n\\t\\tdata = s.ranges[rangeId];\\n\\t\\tproductIndex = s.rangeToProduct[rangeId];\\n\\t}\\n\\n\\t/// @notice This functions shows is the range is currently locked or not \\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range \\n\\t/// @param\\trangeId\\tIdentification of the range to verify\\n\\t/// @return bool with the current status of the range lock\\n\\t///\\t\\t\\ttrue for lock and false for unlocked\\n\\tfunction isRangeLocked(uint rangeId) external view rangeExists(rangeId) returns (bool) {\\n\\t\\treturn s.ranges[rangeId].lockedTokens > 0;\\n\\t}\\n\\n\\t/// @notice This functions shows the information for the range of a product\\n\\t/// @param\\tcollectionId\\tIndex of the product to verify\\n\\t/// @param\\trangeIndex\\t\\tIndex of the range to verify\\n\\t/// @return data \\t\\t\\tInformation about the range\\n\\tfunction productRangeInfo(uint collectionId, uint rangeIndex) external view collectionExists(collectionId) returns(range memory data) {\\n\\t\\trequire(s.products[collectionId].rangeList.length > rangeIndex, \\\"RAIR ERC721 Ranges: Invalid range index\\\");\\n\\t\\tdata = s.ranges[s.products[collectionId].rangeList[rangeIndex]];\\n\\t}\\n\\n\\t/// @notice This functions allow us to update the information about a range\\n\\t/// @dev \\tThis function requires that the rangeIndex_ points to an existing range\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param\\trangeId\\t\\t\\tIdentification of the range to verify\\n\\t/// @param\\tname\\t\\t\\tContains the name for the created NFT collection range\\n\\t/// @param\\tprice_\\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param\\ttokensAllowed_\\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param\\tlockedTokens_\\tContains all the NFT tokens in the range that are unavailable for sell\\n\\tfunction updateRange(\\n\\t\\tuint rangeId,\\n\\t\\tstring memory name,\\n\\t\\tuint price_,\\n\\t\\tuint tokensAllowed_,\\n\\t\\tuint lockedTokens_\\n\\t) public rangeExists(rangeId) onlyRole(CREATOR) {\\n\\t\\trequire(\\n\\t\\t\\tprice_ == 0 || price_ >= 100,\\n\\t\\t\\t\\\"RAIR ERC721: Minimum price allowed is 100 wei\\\"\\n\\t\\t);\\n\\t\\trange storage selectedRange = s.ranges[rangeId];\\n\\t\\trequire(\\n            tokensAllowed_ <= selectedRange.mintableTokens,\\n            \\\"RAIR ERC721: Allowed tokens should be less than the number of mintable tokens\\\"\\n        );\\n        require(\\n            lockedTokens_ <= selectedRange.mintableTokens + 1,\\n\\t\\t\\t// The +1 allows for permanent lock of the range\\n            \\\"RAIR ERC721: Locked tokens should be less than the number of mintable tokens\\\"\\n        );\\n\\t\\tselectedRange.tokensAllowed = tokensAllowed_;\\n\\t\\tif (lockedTokens_ > 0 && selectedRange.lockedTokens == 0) {\\n            emit TradingLocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd,\\n                lockedTokens_\\n            );\\n        } else if (lockedTokens_ == 0 && selectedRange.lockedTokens > 0) {\\n            emit TradingUnlocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd\\n            );\\n        }\\n\\t\\tselectedRange.lockedTokens = lockedTokens_;\\n        selectedRange.rangePrice = price_;\\n        selectedRange.rangeName = name;\\n\\t\\temit UpdatedRange(rangeId, name, price_, tokensAllowed_, lockedTokens_);\\n\\t}\\n\\n\\t/// @notice This functions allow us to know if a desidred range can be created or not\\n\\t/// @param\\tproductId_\\tContains the identification for the product\\n\\t/// @param\\trangeStart_\\tContains the tentative NFT to use as starting point of the range \\n\\t/// @param\\trangeEnd_\\tContains the tentative NFT to use as ending point of the range\\n\\t/// @return bool With the answer if the range cant be creater or not\\n\\tfunction canCreateRange(uint productId_, uint rangeStart_, uint rangeEnd_) public view returns (bool) {\\n\\t\\tuint[] memory rangeList = s.products[productId_].rangeList;\\n\\t\\tfor (uint i = 0; i < rangeList.length; i++) {\\n\\t\\t\\tif ((s.ranges[rangeList[i]].rangeStart <= rangeStart_ &&\\n\\t\\t\\t\\t\\ts.ranges[rangeList[i]].rangeEnd >= rangeStart_) || \\n\\t\\t\\t\\t(s.ranges[rangeList[i]].rangeStart <= rangeEnd_ &&\\n\\t\\t\\t\\t\\ts.ranges[rangeList[i]].rangeEnd >= rangeEnd_)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\t/// @notice This is a internal function that will create the NFT range if the requirements are meet\\n\\t/// @param\\tproductId_\\t\\tContains the identification for the product\\n\\t/// @param\\trangeLength_\\tNumber of tokens contained in the range\\n\\t/// @param \\tprice_ \\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\ttokensAllowed_ \\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\tlockedTokens_ \\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\tname_ \\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction _createRange(\\n\\t\\tuint productId_,\\n\\t\\tuint rangeLength_,\\n\\t\\tuint price_,\\n\\t\\tuint tokensAllowed_,\\n\\t\\tuint lockedTokens_,\\n\\t\\tstring memory name_\\n\\t) internal {\\n\\t\\t// Sanity checks\\n\\t\\t// 0 to make the offer free, over 100 to make sure paid offers can split the funds correctly\\n\\t\\trequire(price_ == 0 || price_ >= 100, \\\"RAIR ERC721: Minimum price allowed is 100 wei\\\");\\n\\t\\trequire(rangeLength_ >= tokensAllowed_, \\\"RAIR ERC721: Allowed tokens should be less than range's length\\\");\\n\\t\\trequire(rangeLength_ >= lockedTokens_, \\\"RAIR ERC721: Locked tokens should be less than range's length\\\");\\n\\t\\tproduct storage selectedProduct = s.products[productId_];\\n\\t\\tuint lastTokenFromPreviousRange;\\n\\t\\tif (selectedProduct.rangeList.length > 0) {\\n\\t\\t\\tlastTokenFromPreviousRange = s.ranges[selectedProduct.rangeList[selectedProduct.rangeList.length - 1]].rangeEnd + 1;\\n\\t\\t}\\n\\n\\t\\trange storage newRange = s.ranges.push();\\n\\t\\tuint rangeIndex = s.ranges.length - 1;\\n\\n\\t\\trequire(lastTokenFromPreviousRange + rangeLength_ - 1 <= selectedProduct.endingToken , \\\"RAIR ERC721: Range length exceeds collection limits!\\\");\\n\\n\\t\\tnewRange.rangeStart = lastTokenFromPreviousRange;\\n\\t\\t// -1 because it includes the starting token\\n\\t\\tnewRange.rangeEnd = lastTokenFromPreviousRange + rangeLength_ - 1;\\n\\t\\tnewRange.tokensAllowed = tokensAllowed_;\\n\\t\\tnewRange.mintableTokens = rangeLength_;\\n\\t\\tnewRange.lockedTokens = lockedTokens_;\\n\\t\\tif (lockedTokens_ > 0) {\\n\\t\\t\\temit TradingLocked(rangeIndex, newRange.rangeStart, newRange.rangeEnd, newRange.lockedTokens);\\n\\t\\t} else if (lockedTokens_ == 0) {\\n\\t\\t\\temit TradingUnlocked(rangeIndex, newRange.rangeStart, newRange.rangeEnd);\\n\\t\\t}\\n\\t\\tnewRange.rangePrice = price_;\\n\\t\\tnewRange.rangeName = name_;\\n\\t\\ts.rangeToProduct[rangeIndex] = productId_;\\n\\t\\tselectedProduct.rangeList.push(rangeIndex);\\n\\n\\t\\temit CreatedRange(\\n\\t\\t\\tproductId_,\\n\\t\\t\\tnewRange.rangeStart,\\n\\t\\t\\tnewRange.rangeEnd,\\n\\t\\t\\tnewRange.rangePrice,\\n\\t\\t\\tnewRange.tokensAllowed,\\n\\t\\t\\tnewRange.lockedTokens,\\n\\t\\t\\tnewRange.rangeName,\\n\\t\\t\\trangeIndex\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function that will create the NFT range if the requirements are meet\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev \\tThis function require thar the collection ID match a valid collection \\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\trangeLength\\t\\tNumber of tokens contained in the range\\n\\t/// @param \\tprice \\t\\t\\tContains the selling price for the range of NFT\\n\\t/// @param \\ttokensAllowed \\tContains all the allowed NFT tokens in the range that are available for sell\\n\\t/// @param \\tlockedTokens \\tContains all the NFT tokens in the range that are unavailable for sell\\n\\t/// @param \\tname \\t\\t\\tContains the name for the created NFT collection range\\n\\tfunction createRange(\\n\\t\\tuint collectionId,\\n\\t\\tuint rangeLength,\\n\\t\\tuint price,\\n\\t\\tuint tokensAllowed,\\n\\t\\tuint lockedTokens,\\n\\t\\tstring calldata name\\n\\t) external onlyRole(CREATOR) collectionExists(collectionId) {\\n\\t\\t_createRange(collectionId, rangeLength, price, tokensAllowed, lockedTokens, name);\\n\\t}\\n\\n\\t/// @notice This function will create as many ranges as the data array requires\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @dev \\tThis function require thar the collection ID match a valid collection \\n\\t/// @param\\tcollectionId\\tContains the identification for the product\\n\\t/// @param\\tdata \\t\\t\\tAn array with the data for all the ranges that we want to implement \\n\\tfunction createRangeBatch(\\n\\t\\tuint collectionId,\\n\\t\\trangeData[] calldata data\\n\\t) external onlyRole(CREATOR) collectionExists(collectionId) {\\n\\t\\trequire(data.length > 0, \\\"RAIR ERC721: Empty array\\\");\\n\\t\\tfor (uint i = 0; i < data.length; i++) {\\n\\t\\t\\t_createRange(collectionId, data[i].rangeLength, data[i].price, data[i].tokensAllowed, data[i].lockedTokens, data[i].name);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xf4feb3ffd65b3a19f58e157d32fa3c669e626e5bebeb83874e334d15401c82fe\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80636e30b3d311610097578063ca15c87311610066578063ca15c87314610251578063d547741f14610264578063e054431114610277578063e4fbb6091461028a57600080fd5b80636e30b3d3146101df5780639010d07c146101f257806391d148541461021d578063c99931be1461023057600080fd5b806336568abe116100d357806336568abe14610176578063381f5ebb146101895780633cd97a55146101ac578063673636b7146101cc57600080fd5b8063192e322c14610105578063248a9ca31461011a5780632f2ff15d1461015057806335755a7314610163575b600080fd5b6101186101133660046117fe565b61029f565b005b61013d6101283660046118a1565b6000908152600a602052604090206001015490565b6040519081526020015b60405180910390f35b61011861015e3660046118ba565b610333565b6101186101713660046118f6565b61035e565b6101186101843660046118ba565b610519565b61019c6101973660046118a1565b610597565b6040519015158152602001610147565b6101bf6101ba366004611975565b6105f0565b6040516101479190611a40565b6101186101da366004611a69565b610821565b61019c6101ed366004611b3f565b610b0a565b610205610200366004611975565b610ce7565b6040516001600160a01b039091168152602001610147565b61019c61022b3660046118ba565b610d08565b61024361023e3660046118a1565b610d33565b604051610147929190611b6b565b61013d61025f3660046118a1565b610ead565b6101186102723660046118ba565b610ec4565b61013d6102853660046118a1565b610eea565b61013d60008051602061204683398151915281565b6000805160206120468339815191526102b88133610f24565b600e54889081106102e45760405162461bcd60e51b81526004016102db90611b8d565b60405180910390fd5b610328898989898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f8892505050565b505050505050505050565b6000828152600a602052604090206001015461034f8133610f24565b61035983836113a1565b505050565b6000805160206120468339815191526103778133610f24565b600e548490811061039a5760405162461bcd60e51b81526004016102db90611b8d565b826103e75760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d707479206172726179000000000000000060448201526064016102db565b60005b83811015610511576104ff8686868481811061040857610408611bda565b905060200281019061041a9190611bf0565b3587878581811061042d5761042d611bda565b905060200281019061043f9190611bf0565b6020013588888681811061045557610455611bda565b90506020028101906104679190611bf0565b6040013589898781811061047d5761047d611bda565b905060200281019061048f9190611bf0565b606001358a8a888181106104a5576104a5611bda565b90506020028101906104b79190611bf0565b6104c5906080810190611c10565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f8892505050565b8061050981611c74565b9150506103ea565b505050505050565b6001600160a01b03811633146105895760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102db565b610593828261143b565b5050565b600f54600090829081106105bd5760405162461bcd60e51b81526004016102db90611c8d565b600080600f0184815481106105d4576105d4611bda565b9060005260206000209060070201600401541191505b50919050565b6106306040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600e54839081106106535760405162461bcd60e51b81526004016102db90611b8d565b826000600e01858154811061066a5761066a611bda565b906000526020600020906005020160040180549050116106dc5760405162461bcd60e51b815260206004820152602760248201527f52414952204552433732312052616e6765733a20496e76616c69642072616e676044820152660ca40d2dcc8caf60cb1b60648201526084016102db565b600e8054600f9190869081106106f4576106f4611bda565b9060005260206000209060050201600401848154811061071657610716611bda565b90600052602060002001548154811061073157610731611bda565b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201805461079690611cd5565b80601f01602080910402602001604051908101604052809291908181526020018280546107c290611cd5565b801561080f5780601f106107e45761010080835404028352916020019161080f565b820191906000526020600020905b8154815290600101906020018083116107f257829003601f168201915b50505050508152505091505092915050565b600f54859081106108445760405162461bcd60e51b81526004016102db90611c8d565b60008051602061204683398151915261085d8133610f24565b84158061086b575060648510155b6108875760405162461bcd60e51b81526004016102db90611d09565b600080600f01888154811061089e5761089e611bda565b90600052602060002090600702019050806003015485111561093e5760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a4016102db565b600381015461094e906001611d56565b8411156109d85760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a4016102db565b6002810185905583158015906109f057506004810154155b15610a445780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2610aa4565b83158015610a56575060008160040154115b15610aa457805460018201546040518a927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e92610a9b92918252602082015260400190565b60405180910390a25b600481018490556005810186905560068101610ac08882611daf565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd18888888888604051610af8959493929190611e6f565b60405180910390a15050505050505050565b6000806000600e018581548110610b2357610b23611bda565b9060005260206000209060050201600401805480602002602001604051908101604052809291908181526020018280548015610b7e57602002820191906000526020600020905b815481526020019060010190808311610b6a575b5050505050905060005b8151811015610cd957846000600f01838381518110610ba957610ba9611bda565b602002602001015181548110610bc157610bc1611bda565b90600052602060002090600702016000015411158015610c215750846000600f01838381518110610bf457610bf4611bda565b602002602001015181548110610c0c57610c0c611bda565b90600052602060002090600702016001015410155b80610cb75750836000600f01838381518110610c3f57610c3f611bda565b602002602001015181548110610c5757610c57611bda565b90600052602060002090600702016000015411158015610cb75750836000600f01838381518110610c8a57610c8a611bda565b602002602001015181548110610ca257610ca2611bda565b90600052602060002090600702016001015410155b15610cc757600092505050610ce0565b80610cd181611c74565b915050610b88565b5060019150505b9392505050565b6000828152600b60205260408120610cff90836114b6565b90505b92915050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d736040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600f5460009083908110610d995760405162461bcd60e51b81526004016102db90611c8d565b600f805485908110610dad57610dad611bda565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054610e1290611cd5565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3e90611cd5565b8015610e8b5780601f10610e6057610100808354040283529160200191610e8b565b820191906000526020600020905b815481529060010190602001808311610e6e57829003601f168201915b5050509190925250505060009485526018602052604090942054939492505050565b6000818152600b60205260408120610d02906114c2565b6000828152600a6020526040902060010154610ee08133610f24565b610359838361143b565b600f5460009082908110610f105760405162461bcd60e51b81526004016102db90611c8d565b505060009081526018602052604090205490565b610f2e8282610d08565b61059357610f46816001600160a01b031660146114cc565b610f518360206114cc565b604051602001610f62929190611ea5565b60408051601f198184030181529082905262461bcd60e51b82526102db91600401611f1a565b831580610f96575060648410155b610fb25760405162461bcd60e51b81526004016102db90611d09565b828510156110285760405162461bcd60e51b815260206004820152603e60248201527f52414952204552433732313a20416c6c6f77656420746f6b656e732073686f7560448201527f6c64206265206c657373207468616e2072616e67652773206c656e677468000060648201526084016102db565b8185101561109e5760405162461bcd60e51b815260206004820152603d60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e2072616e67652773206c656e67746800000060648201526084016102db565b600080600e0187815481106110b5576110b5611bda565b6000918252602082206004600590920201908101549092501561113457600482018054600f91906110e890600190611f2d565b815481106110f8576110f8611bda565b90600052602060002001548154811061111357611113611bda565b90600052602060002090600702016001015460016111319190611d56565b90505b600f80546001818101808455600093845260079092027f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020192916111789190611f2d565b60018086015491925061118b8b86611d56565b6111959190611f2d565b11156112005760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a2052616e6765206c656e677468206578636565646044820152737320636f6c6c656374696f6e206c696d6974732160601b60648201526084016102db565b828255600161120f8a85611d56565b6112199190611f2d565b6001830155600282018790556003820189905560048201869055851561128c578154600183015460048401546040805193845260208401929092529082015281907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a26112dd565b856000036112dd578154600183015460405183927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e926112d492918252602082015260400190565b60405180910390a25b60058201889055600682016112f28682611daf565b50896000601801600083815260200190815260200160002081905550836004018190806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478a83600001548460010154856005015486600201548760040154886006018860405161138d989796959493929190611f40565b60405180910390a150505050505050505050565b6113ab8282610d08565b610593576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113e33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103599082611668565b6114458282610d08565b15610593576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b60205260409020610359908261167d565b6000610cff8383611692565b6000610d02825490565b606060006114db836002612001565b6114e6906002611d56565b67ffffffffffffffff8111156114fe576114fe611a53565b6040519080825280601f01601f191660200182016040528015611528576020820181803683370190505b509050600360fc1b8160008151811061154357611543611bda565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061157257611572611bda565b60200101906001600160f81b031916908160001a9053506000611596846002612001565b6115a1906001611d56565b90505b6001811115611619576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115d5576115d5611bda565b1a60f81b8282815181106115eb576115eb611bda565b60200101906001600160f81b031916908160001a90535060049490941c9361161281612018565b90506115a4565b508315610cff5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102db565b6000610cff836001600160a01b0384166116bc565b6000610cff836001600160a01b03841661170b565b60008260000182815481106116a9576116a9611bda565b9060005260206000200154905092915050565b600081815260018301602052604081205461170357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d02565b506000610d02565b600081815260018301602052604081205480156117f457600061172f600183611f2d565b855490915060009061174390600190611f2d565b90508181146117a857600086600001828154811061176357611763611bda565b906000526020600020015490508087600001848154811061178657611786611bda565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117b9576117b961202f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d02565b6000915050610d02565b600080600080600080600060c0888a03121561181957600080fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8082111561185457600080fd5b818a0191508a601f83011261186857600080fd5b81358181111561187757600080fd5b8b602082850101111561188957600080fd5b60208301945080935050505092959891949750929550565b6000602082840312156118b357600080fd5b5035919050565b600080604083850312156118cd57600080fd5b8235915060208301356001600160a01b03811681146118eb57600080fd5b809150509250929050565b60008060006040848603121561190b57600080fd5b83359250602084013567ffffffffffffffff8082111561192a57600080fd5b818601915086601f83011261193e57600080fd5b81358181111561194d57600080fd5b8760208260051b850101111561196257600080fd5b6020830194508093505050509250925092565b6000806040838503121561198857600080fd5b50508035926020909101359150565b60005b838110156119b257818101518382015260200161199a565b50506000910152565b600081518084526119d3816020860160208601611997565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a0830152600060c082015160e060c0850152611a3860e08501826119bb565b949350505050565b602081526000610cff60208301846119e7565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215611a8157600080fd5b85359450602086013567ffffffffffffffff80821115611aa057600080fd5b818801915088601f830112611ab457600080fd5b813581811115611ac657611ac6611a53565b604051601f8201601f19908116603f01168101908382118183101715611aee57611aee611a53565b816040528281528b6020848701011115611b0757600080fd5b826020860160208301376000928101602001929092525096999698505050506040850135946060810135946080909101359350915050565b600080600060608486031215611b5457600080fd5b505081359360208301359350604090920135919050565b604081526000611b7e60408301856119e7565b90508260208301529392505050565b6020808252602d908201527f52414952204552433732312052616e6765733a20436f6c6c656374696f6e206460408201526c1bd95cc81b9bdd08195e1a5cdd609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112611c0657600080fd5b9190910192915050565b6000808335601e19843603018112611c2757600080fd5b83018035915067ffffffffffffffff821115611c4257600080fd5b602001915036819003821315611c5757600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201611c8657611c86611c5e565b5060010190565b60208082526028908201527f52414952204552433732312052616e6765733a2052616e676520646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b600181811c90821680611ce957607f821691505b6020821081036105ea57634e487b7160e01b600052602260045260246000fd5b6020808252602d908201527f52414952204552433732313a204d696e696d756d20707269636520616c6c6f7760408201526c6564206973203130302077656960981b606082015260800190565b80820180821115610d0257610d02611c5e565b601f82111561035957600081815260208120601f850160051c81016020861015611d905750805b601f850160051c820191505b8181101561051157828155600101611d9c565b815167ffffffffffffffff811115611dc957611dc9611a53565b611ddd81611dd78454611cd5565b84611d69565b602080601f831160018114611e125760008415611dfa5750858301515b600019600386901b1c1916600185901b178555610511565b600085815260208120601f198616915b82811015611e4157888601518255948401946001909101908401611e22565b5085821015611e5f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a060208201526000611e8860a08301876119bb565b604083019590955250606081019290925260809091015292915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611edd816017850160208801611997565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f0e816028840160208801611997565b01602801949350505050565b602081526000610cff60208301846119bb565b81810381811115610d0257610d02611c5e565b60006101008a835260208a818501528960408501528860608501528760808501528660a08501528160c085015260008654611f7a81611cd5565b9386018490526101209360018281168015611f9c5760018114611fb657611fe4565b60ff1984168988015282151560051b890187019450611fe4565b8a6000528560002060005b84811015611fdc5781548b82018a0152908301908701611fc1565b8a0188019550505b505050508093505050508260e08301529998505050505050505050565b8082028115828204841417610d0257610d02611c5e565b60008161202757612027611c5e565b506000190190565b634e487b7160e01b600052603160045260246000fdfe3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6a2646970667358221220a02060bf889784e382ab033924b451bd280c3a149a1fb5e10de019a99785f4b264736f6c63430008130033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "events": {
      "CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)": {
        "params": {
          "end": "Contains the last NFT of the range collection",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "productIndex": "Contains the position where the product was indexed",
          "rangeIndex": "Contains the position where the range was indexed",
          "start": "Contains the start position of the range of nft collection",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "contains the new status of the role",
          "previousAdminRole": "contains the previous status of the role",
          "role": "Contains the role we want to update"
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to grant the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to revoke the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "TradingLocked(uint256,uint256,uint256,uint256)": {
        "params": {
          "from": "Contains the starting NFT of the range that we want to lock",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "rangeIndex": "Contains the position where the range was indexed",
          "to": "Contains the last NFT of the range that we want to lock"
        }
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "params": {
          "from": "Contains the starting NFT of the range that we want to lock",
          "rangeIndex": "Contains the position where the range was indexed",
          "to": "Contains the last NFT of the range that we want to lock"
        }
      },
      "UpdatedRange(uint256,string,uint256,uint256,uint256)": {
        "params": {
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "rangeIndex": "Contains the position where the range was indexed",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "canCreateRange(uint256,uint256,uint256)": {
        "params": {
          "productId_": "Contains the identification for the product",
          "rangeEnd_": "Contains the tentative NFT to use as ending point of the range",
          "rangeStart_": "Contains the tentative NFT to use as starting point of the range "
        },
        "returns": {
          "_0": "bool With the answer if the range cant be creater or not"
        }
      },
      "createRange(uint256,uint256,uint256,uint256,uint256,string)": {
        "details": "This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection ",
        "params": {
          "collectionId": "Contains the identification for the product",
          "lockedTokens": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price": "Contains the selling price for the range of NFT",
          "rangeLength": "Number of tokens contained in the range",
          "tokensAllowed": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      },
      "createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])": {
        "details": "This function is only available to an account with a `CREATOR` roleThis function require thar the collection ID match a valid collection ",
        "params": {
          "collectionId": "Contains the identification for the product",
          "data": "An array with the data for all the ranges that we want to implement "
        }
      },
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bytes that indicates if an account has or not an admin role"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Contains the indexed position to verify inside the role members list",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "address that indicates the address indexed in that position"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "uint256 that indicates the total accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address thay we want to verify",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bool that indicates if an account has or not a role"
        }
      },
      "isRangeLocked(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeId": "Identification of the range to verify"
        },
        "returns": {
          "_0": "bool with the current status of the range lock\t\t\ttrue for lock and false for unlocked"
        }
      },
      "productRangeInfo(uint256,uint256)": {
        "params": {
          "collectionId": "Index of the product to verify",
          "rangeIndex": "Index of the range to verify"
        },
        "returns": {
          "data": "\t\t\tInformation about the range"
        }
      },
      "rangeInfo(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeId": "Identification of the range to verify"
        },
        "returns": {
          "data": "\t\t\tInformation about the range",
          "productIndex": "\tContains the index of the product in the range"
        }
      },
      "rangeToProduct(uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing range ",
        "params": {
          "rangeIndex_": "Identification of the range to verify"
        },
        "returns": {
          "_0": "uint which indicates the index of the product"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Currently you can only renounce to your own roles",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role to remove from our account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to revoke"
        }
      },
      "updateRange(uint256,string,uint256,uint256,uint256)": {
        "details": "This function requires that the rangeIndex_ points to an existing rangeThis function is only available to an account with a `CREATOR` role",
        "params": {
          "lockedTokens_": "Contains all the NFT tokens in the range that are unavailable for sell",
          "name": "Contains the name for the created NFT collection range",
          "price_": "Contains the selling price for the range of NFT",
          "rangeId": "Identification of the range to verify",
          "tokensAllowed_": "Contains all the allowed NFT tokens in the range that are available for sell"
        }
      }
    },
    "title": "This is contract to manage the Rair token ranges facet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatedRange(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range is correctly created"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when we change an admin role"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we grant a role"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we revoke a role"
      },
      "TradingLocked(uint256,uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range trading is effectively locked  "
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range trading is effectively unlocked "
      },
      "UpdatedRange(uint256,string,uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when the NFT range is correctly updated"
      }
    },
    "kind": "user",
    "methods": {
      "canCreateRange(uint256,uint256,uint256)": {
        "notice": "This functions allow us to know if a desidred range can be created or not"
      },
      "createRange(uint256,uint256,uint256,uint256,uint256,string)": {
        "notice": "This function that will create the NFT range if the requirements are meet"
      },
      "createRangeBatch(uint256,(uint256,uint256,uint256,uint256,string)[])": {
        "notice": "This function will create as many ranges as the data array requires"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allow us to check the admin role that contains a role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to check the address of an indexed position for the role list"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to check total members that has an selected role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow us to grant a role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "Allow us to check the if and account has a selected role"
      },
      "isRangeLocked(uint256)": {
        "notice": "This functions shows is the range is currently locked or not "
      },
      "productRangeInfo(uint256,uint256)": {
        "notice": "This functions shows the information for the range of a product"
      },
      "rangeInfo(uint256)": {
        "notice": "This functions allow us to check the information of the range"
      },
      "rangeToProduct(uint256)": {
        "notice": "This functions return us the product that containt the selected range"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow us to renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow us to revoke a role to an account"
      },
      "updateRange(uint256,string,uint256,uint256,uint256)": {
        "notice": "This functions allow us to update the information about a range"
      }
    },
    "notice": "You can use this contract to administrate ranges, transfers & minting of the tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10262,
        "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage721)10246_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(product)10135_storage)dyn_storage": {
        "base": "t_struct(product)10135_storage",
        "encoding": "dynamic_array",
        "label": "struct product[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(range)10123_storage)dyn_storage": {
        "base": "t_struct(range)10123_storage",
        "encoding": "dynamic_array",
        "label": "struct range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3640_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7394_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3325_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage721)10246_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage721",
        "members": [
          {
            "astId": 10137,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10139,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10143,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10147,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10151,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10157,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 10163,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 10167,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10170,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10174,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10179,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)"
          },
          {
            "astId": 10184,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)"
          },
          {
            "astId": 10186,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 10188,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "factoryAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 10190,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "royaltyFee",
            "offset": 20,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 10194,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "products",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(product)10135_storage)dyn_storage"
          },
          {
            "astId": 10198,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "ranges",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(range)10123_storage)dyn_storage"
          },
          {
            "astId": 10202,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "tokenToProduct",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10206,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "tokenToRange",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10210,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "uniqueTokenURI",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10214,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "productURI",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10218,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "appendTokenIndexToProductURI",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10220,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "appendTokenIndexToBaseURI",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          },
          {
            "astId": 10225,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "tokensByProduct",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 10227,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "contractMetadataURI",
            "offset": 0,
            "slot": "23",
            "type": "t_string_storage"
          },
          {
            "astId": 10231,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeToProduct",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10235,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_minted",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10239,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeURI",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10243,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "appendTokenIndexToRangeURI",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10245,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_metadataExtension",
            "offset": 0,
            "slot": "28",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_struct(RoleData)7394_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 7391,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7393,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3320,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3324,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(product)10135_storage": {
        "encoding": "inplace",
        "label": "struct product",
        "members": [
          {
            "astId": 10125,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "startingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10127,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "endingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10129,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10131,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10134,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(range)10123_storage": {
        "encoding": "inplace",
        "label": "struct range",
        "members": [
          {
            "astId": 10110,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10112,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10114,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10116,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10118,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10120,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10122,
            "contract": "contracts/tokens/RAIR Token Facets/RangesFacet.sol:RAIRRangesFacet",
            "label": "rangeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}