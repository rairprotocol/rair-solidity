{
  "address": "0xA8338a2078A7e869b177825718cAa018A8adDCe4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "ProductCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "RangeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "TradingUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRADER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexInRange",
          "type": "uint256"
        }
      ],
      "name": "mintFromRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "rangeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "indexInRange",
          "type": "uint256[]"
        }
      ],
      "name": "mintFromRangeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "nextMintableTokenInRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b5360bfb338321b7c0931d850bca0cf025a73f86853e696d3873e209f9a0ca4",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xA8338a2078A7e869b177825718cAa018A8adDCe4",
    "transactionIndex": 13,
    "gasUsed": "2336878",
    "logsBloom": "0x
    "blockHash": "0xc6f474a98b9b02eab528a8c6132556b31c4fa7ead2e6302ac3b0ff04866e2acf",
    "transactionHash": "0x1b5360bfb338321b7c0931d850bca0cf025a73f86853e696d3873e209f9a0ca4",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 38601799,
        "transactionHash": "0x1b5360bfb338321b7c0931d850bca0cf025a73f86853e696d3873e209f9a0ca4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000011eed11789dbf8000000000000000000000000000000000000000000000000493672ce4ce78513000000000000000000000000000000000000000000001033917b1160cff9653c000000000000000000000000000000000000000000000000492483fd355da91b000000000000000000000000000000000000000000001033918d0031e7834134",
        "logIndex": 74,
        "blockHash": "0xc6f474a98b9b02eab528a8c6132556b31c4fa7ead2e6302ac3b0ff04866e2acf"
      }
    ],
    "blockNumber": 38601799,
    "cumulativeGasUsed": "3893346",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bf669b2060c289e970e5f0b3838c1436",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"ProductCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"RangeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"TradingUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInRange\",\"type\":\"uint256\"}],\"name\":\"mintFromRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexInRange\",\"type\":\"uint256[]\"}],\"name\":\"mintFromRangeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"nextMintableTokenInRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"Contains the address of the user approved for move the token\",\"owner\":\"Contains the address of the owner of the tokens\",\"tokenId\":\"Contains the id of the transfered token\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"Boolean flag to approve or disapprove the operator\",\"operator\":\"Contains the address of the user approved for move all the tokens\",\"owner\":\"Contains the address of the owner of the tokens\"}},\"ProductCompleted(uint256)\":{\"params\":{\"productIndex\":\"Contains the position where the product was indexed\"}},\"RangeCompleted(uint256,uint256)\":{\"params\":{\"productIndex\":\"Contains the indexed location for the product\",\"rangeIndex\":\"Contains the position where the range was indexed \"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"contains the new status of the role\",\"previousAdminRole\":\"contains the previous status of the role\",\"role\":\"Contains the role we want to update\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to grant the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to revoke the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"TradingUnlocked(uint256,uint256,uint256)\":{\"params\":{\"from\":\"Containt the date of begining of the range\",\"rangeIndex\":\"Contains the position where the range is indexed\",\"to\":\"Contain the date of end for the range\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"Contains the sender of the transaction\",\"to\":\"Contains the destiny address of the transaction\",\"tokenId\":\"Contains the id of the token to transfer\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"to\":\"Contains the facet addresses and function selectors\",\"tokenId\":\"Contains the facet addresses and function selectors\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"Contains the address of the owner of tokens that we want to verify\"},\"returns\":{\"_0\":\"uint256  with the total of the owned tokens\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"Contains the token of the id to be added to the account\"},\"returns\":{\"_0\":\"address which has the authorization to move the token\"}},\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bytes that indicates if an account has or not an admin role\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Contains the indexed position to verify inside the role members list\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"address that indicates the address indexed in that position\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"uint256 that indicates the total accounts with that role\"}},\"grantRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to grant\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address thay we want to verify\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bool that indicates if an account has or not a role\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Overrides the OpenZeppelin standard by allowing anyone with the TRADER role to transfer tokens\",\"params\":{\"operator\":\"Operator of the tokens.\",\"owner\":\"Owner of the tokens.\"},\"returns\":{\"_0\":\"bool \\t\\tNotify if the operator is approved or not for move all the tokens\"}},\"mintFromRange(address,uint256,uint256)\":{\"details\":\"Only an account with the `MINTER` role is available to use this function\",\"params\":{\"indexInRange\":\"Contains the facet addresses and function selectors\",\"rangeId\":\"Contains the facet addresses and function selectors\",\"to\":\"Contains the facet addresses and function selectors\"}},\"mintFromRangeBatch(address[],uint256,uint256[])\":{\"params\":{\"indexInRange\":\"Contains array of ranges that will be used to index the minted NFT\",\"rangeId\":\"Contains the id of the range that we want to use for minting \",\"to\":\"Contains the address that will own the minted token\"}},\"name()\":{\"returns\":{\"_0\":\"string with the name of the token\"}},\"nextMintableTokenInRange(uint256)\":{\"params\":{\"rangeIndex\":\"Contains index of the range that we want to veify\"},\"returns\":{\"_0\":\"uint which containts the immediately next token absent of owner\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"Contains the facet addresses and function selectors\"},\"returns\":{\"_0\":\"address Which contains the owner of the token \"}},\"renounceRole(bytes32,address)\":{\"details\":\"Currently you can only renounce to your own roles\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role to remove from our account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to revoke\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"Contains the address of the owner of the token\",\"to\":\"Contains the address of the receiver of the token\",\"tokenId\":\"Contains the ID of the token to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"_data\":\"Contains any adicional info or massage\",\"from\":\"Contains the address of the owner of the token\",\"to\":\"Contains the address of the receiver of the token\",\"tokenId\":\"Contains the ID of the token to transfer\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"Contains the status of approved or not for the operator\",\"operator\":\"Contains the address with authorization to move the tokens\"}},\"symbol()\":{\"returns\":{\"_0\":\"string with the symbol of the token\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"Contains the index position that we want to check\"},\"returns\":{\"_0\":\"uint256 which contains the token indexed in that position \"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Contains the index of the list of owned token that we want to check\",\"owner\":\"Contains the address of the owner of tokens that we want to verify\"},\"returns\":{\"_0\":\"uint256 which contains the owned token \"}},\"totalSupply()\":{\"returns\":{\"_0\":\"uint256 which contains the total amount of tokens \"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"Contains the address of the owner of the token\",\"to\":\"Contains the address of the receiver of the token\",\"tokenId\":\"Contains the ID of the token to transfer\"}}},\"title\":\"This is contract to manage the ERC721 NFT facet \",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"This event stores in the blockchain when an user is approved to move a token\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"This event stores in the blockchain when a owner is approved to move all the tokens\"},\"ProductCompleted(uint256)\":{\"notice\":\"This event stores in the blockchain when a product is succesfully finished\"},\"RangeCompleted(uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when a range is succesfully established\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when we change an admin role\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we grant a role\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we revoke a role\"},\"TradingUnlocked(uint256,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when a trading is unlocked\"},\"Transfer(address,address,uint256)\":{\"notice\":\"This event stores in the blockchain when a trasfer is made\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"This function grants permision to an account for move one specific token\"},\"balanceOf(address)\":{\"notice\":\"This function allow us to check the balance of an account\"},\"getApproved(uint256)\":{\"notice\":\"This function allow us to see the address approved for an specific token\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allow us to check the admin role that contains a role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to check the address of an indexed position for the role list\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to check total members that has an selected role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow us to grant a role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"Allow us to check the if and account has a selected role\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries if an operator can act on behalf of an owner on all of their tokens\"},\"mintFromRange(address,uint256,uint256)\":{\"notice\":\"This function allow us to mint from a range\"},\"mintFromRangeBatch(address[],uint256,uint256[])\":{\"notice\":\"This function allow us to mint a token form a batch of ranges\"},\"name()\":{\"notice\":\"This function allow us to check the name of the token\"},\"nextMintableTokenInRange(uint256)\":{\"notice\":\"This function returns immediately next token without owner in the range\"},\"ownerOf(uint256)\":{\"notice\":\"This functions allow us to know the address that owns the token\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow us to renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow us to revoke a role to an account\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This function grants permision to an account for move any token\"},\"symbol()\":{\"notice\":\"This function allow us to check the symbol of the token\"},\"tokenByIndex(uint256)\":{\"notice\":\"This function allow us to verify the token indexed in a selected position \"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"This function allow us to check the balance of an account for a specific indexed token \"},\"totalSupply()\":{\"notice\":\"This function allow us to check the total amount of tokens\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"This function is used to transfer tokens from an account to another \"}},\"notice\":\"You can use this contract to administrate ranges, transfers & minting of the tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR Token Facets/ERC721Facet.sol\":\"ERC721Facet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xdaebcf9440203930cebc6e8decfbddac015b0fda8ebd26b18d6bb8d6af0ffeee\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// August 2022 - Metadata File Extension Update\\n\\tmapping(uint => string) rangeURI;\\n\\tmapping(uint => bool) appendTokenIndexToRangeURI;\\n\\tstring _metadataExtension;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\t/// @notice this funtion set the storage of the diamonds 721 contracts \\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title  This is contract to manage the access control of the RAIR token facet\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x8d36cbe7a75ffb8f011626f88c6287cb99b291b7b9b15cec90d9b283a25c736c\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/ERC721Facet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\nimport './AppStorage.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n/// @title  This is contract to manage the ERC721 NFT facet \\n/// @notice You can use this contract to administrate ranges, transfers & minting of the tokens\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract ERC721Facet is AccessControlAppStorageEnumerable721 {\\n\\tusing Address for address;\\n\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\n\\t/// @notice This event stores in the blockchain when a product is succesfully finished\\n    /// @param  productIndex Contains the position where the product was indexed\\n\\tevent ProductCompleted(uint indexed productIndex);\\n\\t/// @notice This event stores in the blockchain when a range is succesfully established\\n    /// @param  rangeIndex Contains the position where the range was indexed \\n\\t/// @param  productIndex Contains the indexed location for the product\\n\\tevent RangeCompleted(uint indexed rangeIndex, uint productIndex);\\n\\t/// @notice This event stores in the blockchain when a trading is unlocked\\n\\t/// @param  rangeIndex Contains the position where the range is indexed\\n    /// @param  from Containt the date of begining of the range\\n\\t/// @param  to Contain the date of end for the range\\n\\tevent TradingUnlocked(uint indexed rangeIndex, uint from, uint to);\\n\\t/// @notice This event stores in the blockchain when a trasfer is made\\n    /// @param  from Contains the sender of the transaction\\n\\t/// @param  to Contains the destiny address of the transaction\\n\\t/// @param  tokenId Contains the id of the token to transfer\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\t/// @notice This event stores in the blockchain when an user is approved to move a token\\n    /// @param  owner Contains the address of the owner of the tokens\\n\\t/// @param  approved Contains the address of the user approved for move the token\\n\\t/// @param \\ttokenId Contains the id of the transfered token\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\t/// @notice This event stores in the blockchain when a owner is approved to move all the tokens\\n    /// @param  owner \\t\\tContains the address of the owner of the tokens\\n\\t/// @param  operator \\tContains the address of the user approved for move all the tokens\\n\\t/// @param\\tapproved \\tBoolean flag to approve or disapprove the operator\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\t\\n\\t/// @notice This function allow us to check the name of the token\\n\\t/// @return string with the name of the token\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn s._name;\\n\\t}\\n\\n\\t/// @notice This function allow us to check the symbol of the token\\n\\t/// @return string with the symbol of the token\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn s._symbol;\\n\\t}\\n\\n\\t/// @notice This function allow us to check the balance of an account\\n\\t/// @param \\towner Contains the address of the owner of tokens that we want to verify\\n\\t/// @return uint256  with the total of the owned tokens\\n\\tfunction balanceOf(address owner) public view returns (uint256) {\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn s._balances[owner];\\n\\t}\\n\\n\\t/// @notice This function allow us to check the balance of an account for a specific indexed token \\n\\t/// @param \\towner Contains the address of the owner of tokens that we want to verify\\n\\t/// @param \\tindex Contains the index of the list of owned token that we want to check\\n\\t/// @return uint256 which contains the owned token \\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n\\t\\trequire(index < balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n\\t\\treturn s._ownedTokens[owner][index];\\n\\t}\\n\\n\\t/// @notice This function allow us to check the total amount of tokens\\n\\t/// @return uint256 which contains the total amount of tokens \\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn s._allTokens.length;\\n\\t}\\n\\n\\t/// @notice This function allow us to verify the token indexed in a selected position \\n\\t/// @param \\tindex Contains the index position that we want to check\\n\\t/// @return uint256 which contains the token indexed in that position \\n\\tfunction tokenByIndex(uint256 index) public view returns (uint256) {\\n\\t\\trequire(index < totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n\\t\\treturn s._allTokens[index];\\n\\t}\\n\\n\\t/// @notice Queries if an operator can act on behalf of an owner on all of their tokens\\n\\t/// @dev Overrides the OpenZeppelin standard by allowing anyone with the TRADER role to transfer tokens\\n\\t/// @param \\towner \\t\\tOwner of the tokens.\\n\\t/// @param \\toperator \\tOperator of the tokens.\\n\\t/// @return bool \\t\\tNotify if the operator is approved or not for move all the tokens\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n\\t\\treturn (hasRole(TRADER, operator) || s._operatorApprovals[owner][operator]);\\n\\t}\\n\\n\\t/// @notice This function returns immediately next token without owner in the range\\n\\t/// @param \\trangeIndex Contains index of the range that we want to veify\\n\\t/// @return uint which containts the immediately next token absent of owner\\n\\tfunction nextMintableTokenInRange(uint rangeIndex) public view returns (uint) {\\n\\t\\trequire(s.ranges.length > rangeIndex, \\\"RAIR ERC721 Ranges: Range does not exist\\\");\\n\\t\\trange memory selectedRange = s.ranges[rangeIndex];\\n\\t\\tproduct memory selectedProduct = s.products[s.rangeToProduct[rangeIndex]];\\n\\t\\tfor (uint i = selectedRange.rangeStart; i < selectedRange.rangeEnd; i++) {\\n\\t\\t\\tif (!_exists(selectedProduct.startingToken + i)) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(false, 'RAIR ERC721: There are no tokens available for minting');\\n\\t}\\n\\n\\t/// @notice This function allow us to mint a token form a specific range\\n\\t/// @param to Contains the address that will own the minted token\\n\\t/// @param rangeId Contains the id of the range that we want to use for minting \\n\\t/// @param indexInRange Contains the position where the minted token will be indexed\\n\\tfunction _mintFromRange(address to, uint rangeId, uint indexInRange) internal {\\n\\t\\trequire(s.ranges.length > rangeId, \\\"RAIR ERC721: Range does not exist\\\");\\n\\t\\trange storage selectedRange = s.ranges[rangeId];\\n\\t\\tproduct storage selectedProduct = s.products[s.rangeToProduct[rangeId]];\\n\\t\\trequire(selectedProduct.mintableTokens > 0, 'RAIR ERC721: Cannot mint more tokens from this product!');\\n\\t\\trequire(selectedRange.mintableTokens > 0, 'RAIR ERC721: Cannot mint more tokens from this range!');\\n\\t\\trequire(selectedRange.tokensAllowed > 0, 'RAIR ERC721: Not allowed to mint more tokens from this range!');\\n\\t\\trequire(indexInRange >= selectedRange.rangeStart && indexInRange <= selectedRange.rangeEnd, \\\"RAIR ERC721: Invalid token index\\\");\\n\\t\\t_safeMint(to, selectedProduct.startingToken + indexInRange, '');\\n\\t\\t\\n\\t\\tif (selectedRange.tokensAllowed > 0) {\\n\\t\\t\\tselectedRange.tokensAllowed--;\\n\\t\\t}\\n\\t\\tif (selectedRange.mintableTokens > 0) {\\n\\t\\t\\tselectedRange.mintableTokens--;\\n\\t\\t\\tif (selectedRange.mintableTokens == 0) {\\n\\t\\t\\t\\temit RangeCompleted(rangeId, s.rangeToProduct[rangeId]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (selectedRange.lockedTokens > 0) {\\n\\t\\t\\tselectedRange.lockedTokens--;\\n\\t\\t\\tif (selectedRange.lockedTokens == 0) {\\n\\t\\t\\t\\temit TradingUnlocked(rangeId, selectedRange.rangeStart, selectedRange.rangeEnd);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (selectedProduct.mintableTokens > 0) {\\n\\t\\t\\tselectedProduct.mintableTokens--;\\n\\t\\t\\tif (selectedProduct.mintableTokens == 0) {\\n\\t\\t\\t\\temit ProductCompleted(s.rangeToProduct[rangeId]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ts.tokenToProduct[selectedProduct.startingToken + indexInRange] = s.rangeToProduct[rangeId];\\n\\t\\ts.tokenToRange[selectedProduct.startingToken + indexInRange] = rangeId;\\n\\t\\ts.tokensByProduct[s.rangeToProduct[rangeId]].push(selectedProduct.startingToken + indexInRange);\\n\\t}\\n\\n\\t/// @notice This function allow us to mint a token form a batch of ranges\\n\\t/// @param to Contains the address that will own the minted token\\n\\t/// @param rangeId Contains the id of the range that we want to use for minting \\n\\t/// @param indexInRange Contains array of ranges that will be used to index the minted NFT\\n\\tfunction mintFromRangeBatch(\\n\\t\\taddress[] calldata to,\\n\\t\\tuint rangeId,\\n\\t\\tuint[] calldata indexInRange\\n\\t) external onlyRole(MINTER) {\\n\\t\\trequire(to.length > 0, \\\"RAIR ERC721: Empty array\\\");\\n\\t\\trequire(to.length == indexInRange.length, \\\"RAIR ERC721: Both arrays should have the same length\\\");\\n\\t\\tfor (uint i = 0; i < to.length; i++) {\\n\\t\\t\\t_mintFromRange(to[i], rangeId, indexInRange[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice This function allow us to mint from a range\\n\\t/// @param to Contains the facet addresses and function selectors\\n\\t///\\t@dev\\tOnly an account with the `MINTER` role is available to use this function\\n\\t/// @param rangeId Contains the facet addresses and function selectors\\n\\t/// @param indexInRange Contains the facet addresses and function selectors\\n\\tfunction mintFromRange(address to, uint rangeId, uint indexInRange) external onlyRole(MINTER) {\\n\\t\\t_mintFromRange(to, rangeId, indexInRange);\\n\\t}\\n\\n\\t/// @notice This function allow us to check if an user is approved for spend the token or the owner \\n\\t/// @param spender Contains the addres which status and permision we want to validate\\n\\t/// @param tokenId Contains the id of the token that we want to spend\\n\\t/// @return bool with the status of true is the account has the owner or approved role\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/// @notice This function grants permision to an account for move one specific token\\n\\t/// @param to Contains the facet addresses and function selectors\\n\\t/// @param tokenId Contains the facet addresses and function selectors\\n\\tfunction approve(address to, uint256 tokenId) public {\\n\\t\\taddress owner = ownerOf(tokenId);\\n\\t\\trequire(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n\\t\\t\\t\\\"ERC721: approve caller is not owner nor approved for all\\\"\\n\\t\\t);\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/// @notice This function grants permision to an account for move any token\\n\\t/// @param operator Contains the address with authorization to move the tokens\\n\\t/// @param approved Contains the status of approved or not for the operator\\n\\tfunction setApprovalForAll(address operator, bool approved) public {\\n\\t\\t_setApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/// @notice This function grants permision to an account for move any token\\n\\t/// @param owner Contains the address of the owner of the token \\n\\t/// @param operator Contains the address with authorization to move the tokens\\n\\t/// @param approved Contains the status of approved or not for the operator\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual {\\n\\t\\trequire(owner != operator, \\\"ERC721: approve to caller\\\");\\n\\t\\ts._operatorApprovals[owner][operator] = approved;\\n\\t\\temit ApprovalForAll(owner, operator, approved);\\n\\t}\\n\\n\\t/// @notice This function grants permision to an account for move one specific token\\n\\t/// @param to Contains the address that we want to grant the permision fot the token\\n\\t/// @param tokenId Contains the id of the token to be approved\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\ts._tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/// @notice This function allow us to see the address approved for an specific token\\n\\t/// @param tokenId Contains the token of the id to be added to the account\\n\\t/// @return address which has the authorization to move the token\\n\\tfunction getApproved(uint256 tokenId) public view returns (address) {\\n\\t\\trequire(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\t\\treturn s._tokenApprovals[tokenId];\\n\\t}\\n\\t\\n\\t/// @notice This function allow us to know if the token exist or not\\n\\t/// @param tokenId Contains the id of the token that we want to verify\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn s._owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/// @notice This function allow us to mint a token\\n\\t/// @param to Contains the address which will mint the token\\n\\t/// @param tokenId constains the indexed identification of the token \\n\\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\\n\\t\\t_safeMint(to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice This function allow us to mint a token\\n\\t/// @param to Contains the address which will mint the token\\n\\t/// @param tokenId Constains the indexed identification of the token\\n\\t/// @param _data Constains the additional message fot the receiver of the token\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_mint(to, tokenId);\\n\\t\\trequire(\\n\\t\\t\\t_checkOnERC721Received(address(0), to, tokenId, _data),\\n\\t\\t\\t\\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice This function allow us to mint \\n\\t/// @param to Contains the address which will mint the token\\n\\t/// @param tokenId constains the indexed identification of the token \\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\trequire(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n\\t\\trequire(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\ts._balances[to] += 1;\\n\\t\\ts._owners[tokenId] = to;\\n\\t\\ts._minted[tokenId] = true;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/// @notice This functions allow us to know the address that owns the token\\n\\t/// @param tokenId Contains the facet addresses and function selectors\\n\\t/// @return address Which contains the owner of the token \\n\\tfunction ownerOf(uint256 tokenId) public view returns (address) {\\n\\t\\taddress owner = s._owners[tokenId];\\n\\t\\trequire(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/// @notice Hook being called before every transfer\\n\\t/// @dev\\tTransfer locking happens here!\\n\\t/// @param\\t_from\\t\\tToken's original owner\\n\\t/// @param\\t_to\\t\\t\\tToken's new owner\\n\\t/// @param\\t_tokenId\\tToken's ID\\n\\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal {\\n\\t\\t// If it's not minting or burning \\n\\t\\tif (_from != address(0) && _to != address(0)) {\\n\\t\\t\\t_checkRole(TRADER, msg.sender);\\n\\t\\t\\trequire(s.ranges[s.tokenToRange[_tokenId]].lockedTokens == 0, \\\"RAIR ERC721: Cannot transfer from a locked range!\\\");\\n\\t\\t}\\n\\t\\tif (_from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(_tokenId);\\n\\t\\t} else if (_from != _to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(_from, _tokenId);\\n\\t\\t}\\n\\t\\tif (_to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(_tokenId);\\n\\t\\t} else if (_to != _from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(_to, _tokenId);\\n\\t\\t}\\n\\t\\t//require(hasRole(TRADER, _from), 'RAIR ERC721: Transfers cannot be made outside RAIR marketplaces!');\\n\\t}\\n\\n\\t/**\\n\\t * @dev   Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = balanceOf(to);\\n\\t\\ts._ownedTokens[to][length] = tokenId;\\n\\t\\ts._ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev   Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\ts._allTokensIndex[tokenId] = s._allTokens.length;\\n\\t\\ts._allTokens.push(tokenId);\\n\\t}\\n\\n\\t/// @notice This function will remove a token from the owner account \\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = s._ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = s._ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\ts._ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\ts._ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete s._ownedTokensIndex[tokenId];\\n\\t\\tdelete s._ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/// @notice This function will remove a token for the extension's data structures\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = s._allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = s._allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = s._allTokens[lastTokenIndex];\\n\\n\\t\\ts._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\ts._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete s._allTokensIndex[tokenId];\\n\\t\\ts._allTokens.pop();\\n\\t}\\n\\n\\t/// @notice This function is used to transfer tokens from an account to another \\n\\t/// @param  from Contains the address of the owner of the token\\n\\t/// @param  to Contains the address of the receiver of the token\\n\\t/// @param  tokenId Contains the ID of the token to transfer\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public {\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/// @notice This function grant permision to approved accounts to transfer a token \\n\\t/**\\n\\t * @dev \\tSee {IERC721-safeTransferFrom}.\\n\\t */\\n\\t/// @param  from \\tContains the address of the owner of the token\\n\\t/// @param  to \\t\\tContains the address of the receiver of the token\\n\\t/// @param  tokenId\\tContains the ID of the token to transfer\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice This function grant permision to approved accounts to transfer a token \\n\\t/**\\n\\t * @dev \\tSee {IERC721-safeTransferFrom}.\\n\\t */\\n\\t/// @param  from \\tContains the address of the owner of the token\\n\\t/// @param  to \\t\\tContains the address of the receiver of the token\\n\\t/// @param  tokenId\\tContains the ID of the token to transfer\\n\\t/// @param  _data \\tContains any adicional info or massage\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public {\\n\\t\\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/// @notice This funtion allow us to safetely transfer a token to a valid recipient \\n\\t/**\\n\\t * @dev \\tSafely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\t/// @param from \\tContains the address of the owner of the token\\n\\t/// @param to \\t\\tContains the address of the receiver of the token\\n\\t/// @param tokenId  Contains the ID of the token to transfer\\n\\t/// @param _data\\tContains any adicional info or massage\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\trequire(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t}\\n\\n\\t/// @notice This function is use to trasfer a owned token to a selected addresss\\n\\t/**\\n\\t * @dev \\tTransfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\t/// @param  from \\tContains the address of the owner of the token\\n\\t/// @param  to \\t\\tContains the address of the receiver of the token\\n\\t/// @param  tokenId  Contains the ID of the token to transfer\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal {\\n\\t\\trequire(ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\t\\trequire(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\ts._balances[from] -= 1;\\n\\t\\ts._balances[to] += 1;\\n\\t\\ts._owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/// @param from \\tContains the address of the sender\\n\\t/// @param to \\t\\tContains the address of the receiver\\n\\t/// @param tokenId  Contains the ID of the token to send\\n\\t/// @param _data \\tContains any adicional info or massage \\n\\t/// @return bool \\tThat show us if the transaction was successful or not\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver.onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xdcd4dc1b1d29721a0b21ea7cd6e9a547538e4ccb8fb4b9f7d8fd54809c83d15e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612950806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80635e79824d116100f9578063b88d4fde11610097578063e4fbb60911610071578063e4fbb609146103b4578063e7662243146103db578063e985e9c5146103ee578063fe6d81241461040157600080fd5b8063b88d4fde1461037b578063ca15c8731461038e578063d547741f146103a157600080fd5b80639010d07c116100d35780639010d07c1461032a57806391d148541461033d57806395d89b4114610360578063a22cb4651461036857600080fd5b80635e79824d146102f15780636352211e1461030457806370a082311461031757600080fd5b8063248a9ca3116101665780632f745c59116101405780632f745c59146102a557806336568abe146102b857806342842e0e146102cb5780634f6ccce7146102de57600080fd5b8063248a9ca31461025c578063265423701461027f5780632f2ff15d1461029257600080fd5b806306fdde03146101ae578063081812fc146101cc578063095ea7b3146101f7578063175c4ef81461020c57806318160ddd1461024157806323b872dd14610249575b600080fd5b6101b6610428565b6040516101c3919061234a565b60405180910390f35b6101df6101da36600461235d565b6104bc565b6040516001600160a01b0390911681526020016101c3565b61020a610205366004612392565b610556565b005b6102337f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101c3565b600854610233565b61020a6102573660046123bc565b61066b565b61023361026a36600461235d565b6000908152600a602052604090206001015490565b61020a61028d366004612444565b61069c565b61020a6102a03660046124be565b6107ef565b6102336102b3366004612392565b610815565b61020a6102c63660046124be565b6108ae565b61020a6102d93660046123bc565b61092c565b6102336102ec36600461235d565b610947565b6102336102ff36600461235d565b6109db565b6101df61031236600461235d565b610d4d565b6102336103253660046124ea565b610dc4565b6101df610338366004612505565b610e4b565b61035061034b3660046124be565b610e6a565b60405190151581526020016101c3565b6101b6610e95565b61020a610376366004612527565b610ea7565b61020a610389366004612579565b610eb2565b61023361039c36600461235d565b610eea565b61020a6103af3660046124be565b610f01565b6102337f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b61020a6103e9366004612655565b610f27565b6103506103fc366004612688565b610f5d565b6102337ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6060600080018054610439906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906126b2565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661053a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061056182610d4d565b9050806001600160a01b0316836001600160a01b0316036105ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610531565b336001600160a01b03821614806105ea57506105ea8133610f5d565b61065c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610531565b6106668383610fbe565b505050565b610675338261102c565b6106915760405162461bcd60e51b8152600401610531906126ec565b610666838383611103565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc96106c781336112aa565b846107145760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d70747920617272617900000000000000006044820152606401610531565b8482146107805760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a20426f7468206172726179732073686f756c64206044820152730d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60631b6064820152608401610531565b60005b858110156107e6576107d48787838181106107a0576107a061273d565b90506020020160208101906107b591906124ea565b868686858181106107c8576107c861273d565b9050602002013561130e565b806107de81612769565b915050610783565b50505050505050565b6000828152600a602052604090206001015461080b81336112aa565b61066683836117cd565b600061082083610dc4565b82106108825760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610531565b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b6001600160a01b038116331461091e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610531565b6109288282611867565b5050565b61066683838360405180602001604052806000815250610eb2565b600061095260085490565b82106109b55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610531565b60088054839081106109c9576109c961273d565b90600052602060002001549050919050565b600f546000908210610a405760405162461bcd60e51b815260206004820152602860248201527f52414952204552433732312052616e6765733a2052616e676520646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401610531565b600080600f018381548110610a5757610a5761273d565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054610abc906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae8906126b2565b8015610b355780601f10610b0a57610100808354040283529160200191610b35565b820191906000526020600020905b815481529060010190602001808311610b1857829003601f168201915b50505091909252505050600084815260186020526040812054600e805493945091928110610b6557610b6561273d565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610bac906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd8906126b2565b8015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c7d57602002820191906000526020600020905b815481526020019060010190808311610c69575b5050509190925250508351919250505b8260200151811015610ce5578151610cc790610caa908390612782565b6000908152600260205260409020546001600160a01b0316151590565b610cd357949350505050565b80610cdd81612769565b915050610c8d565b5060405162461bcd60e51b815260206004820152603660248201527f52414952204552433732313a20546865726520617265206e6f20746f6b656e7360448201527520617661696c61626c6520666f72206d696e74696e6760501b6064820152608401610531565b6000818152600260205260408120546001600160a01b0316806108a85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610531565b60006001600160a01b038216610e2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610531565b506001600160a01b031660009081526003602052604090205490565b6000828152600b60205260408120610e6390836118e2565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060006001018054610439906126b2565b6109283383836118ee565b610ebc338361102c565b610ed85760405162461bcd60e51b8152600401610531906126ec565b610ee4848484846119bc565b50505050565b6000818152600b602052604081206108a8906119ef565b6000828152600a6020526040902060010154610f1d81336112aa565b6106668383611867565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9610f5281336112aa565b610ee484848461130e565b6000610f897f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce83610e6a565b80610e635750506001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ff382610d4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166110a55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610531565b60006110b083610d4d565b9050806001600160a01b0316846001600160a01b031614806110eb5750836001600160a01b03166110e0846104bc565b6001600160a01b0316145b806110fb57506110fb8185610f5d565b949350505050565b826001600160a01b031661111682610d4d565b6001600160a01b03161461117a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610531565b6001600160a01b0382166111dc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610531565b6111e78383836119f9565b6111f2600082610fbe565b6001600160a01b038316600090815260036020526040812080546001929061121b908490612795565b90915550506001600160a01b0382166000908152600360205260408120805460019290611249908490612782565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6112b48282610e6a565b610928576112cc816001600160a01b03166014611b9f565b6112d7836020611b9f565b6040516020016112e89291906127a8565b60408051601f198184030181529082905262461bcd60e51b82526105319160040161234a565b600f5482106113695760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736044820152601d60fa1b6064820152608401610531565b600080600f0183815481106113805761138061273d565b6000918252602080832086845260189091526040832054600e805460079094029092019450909181106113b5576113b561273d565b90600052602060002090600502019050600081600201541161143f5760405162461bcd60e51b815260206004820152603760248201527f52414952204552433732313a2043616e6e6f74206d696e74206d6f726520746f60448201527f6b656e732066726f6d20746869732070726f64756374210000000000000000006064820152608401610531565b60008260030154116114b15760405162461bcd60e51b815260206004820152603560248201527f52414952204552433732313a2043616e6e6f74206d696e74206d6f726520746f6044820152746b656e732066726f6d20746869732072616e67652160581b6064820152608401610531565b600082600201541161152b5760405162461bcd60e51b815260206004820152603d60248201527f52414952204552433732313a204e6f7420616c6c6f77656420746f206d696e7460448201527f206d6f726520746f6b656e732066726f6d20746869732072616e6765210000006064820152608401610531565b81548310801590611540575081600101548311155b61158c5760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e6465786044820152606401610531565b6115b5858483600001546115a09190612782565b60405180602001604052806000815250611d3b565b6002820154156115d7576002820180549060006115d18361281d565b91905055505b600382015415611650576003820180549060006115f38361281d565b91905055508160030154600003611650576000848152601860205260409081902054905185917fc9ab1ba86a360ece15473f1c6edd6402b347ae87bf9bc3c0172518fd811673999161164791815260200190565b60405180910390a25b6004820154156116c65760048201805490600061166c8361281d565b919050555081600401546000036116c6578154600183015460405186927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e926116bd92918252602082015260400190565b60405180910390a25b60028101541561172b576002810180549060006116e28361281d565b9190505550806002015460000361172b5760008481526018602052604080822054905190917fe213303292163b95c0f90623eb8bc1f2c15b6d888051c10cc662e78204ff042291a25b6000848152601860205260408120548254909160109161174c908790612782565b81526020019081526020016000208190555083600060110160008584600001546117769190612782565b81526020808201929092526040908101600090812093909355868352601882528083205483526016909152902081546117b0908590612782565b815460018101835560009283526020909220909101555050505050565b6117d78282610e6a565b610928576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561180f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206106669082611d6e565b6118718282610e6a565b15610928576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206106669082611d83565b6000610e638383611d98565b816001600160a01b0316836001600160a01b03160361194f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610531565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119c7848484611103565b6119d384848484611dc2565b610ee45760405162461bcd60e51b815260040161053190612834565b60006108a8825490565b6001600160a01b03831615801590611a1957506001600160a01b03821615155b15611ae757611a487f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce336112aa565b600081815260116020526040902054600f80549091908110611a6c57611a6c61273d565b906000526020600020906007020160040154600014611ae75760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a2043616e6e6f74207472616e736665722066726f6044820152706d2061206c6f636b65642072616e67652160781b6064820152608401610531565b6001600160a01b038316611b4257611b3d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b65565b816001600160a01b0316836001600160a01b031614611b6557611b658382611ec3565b6001600160a01b038216611b7c5761066681611f60565b826001600160a01b0316826001600160a01b031614610666576106668282612012565b60606000611bae836002612886565b611bb9906002612782565b67ffffffffffffffff811115611bd157611bd1612563565b6040519080825280601f01601f191660200182016040528015611bfb576020820181803683370190505b509050600360fc1b81600081518110611c1657611c1661273d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c4557611c4561273d565b60200101906001600160f81b031916908160001a9053506000611c69846002612886565b611c74906001612782565b90505b6001811115611cec576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ca857611ca861273d565b1a60f81b828281518110611cbe57611cbe61273d565b60200101906001600160f81b031916908160001a90535060049490941c93611ce58161281d565b9050611c77565b508315610e635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610531565b611d458383612056565b611d526000848484611dc2565b6106665760405162461bcd60e51b815260040161053190612834565b6000610e63836001600160a01b0384166121b8565b6000610e63836001600160a01b038416612207565b6000826000018281548110611daf57611daf61273d565b9060005260206000200154905092915050565b60006001600160a01b0384163b15611eb857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e0690339089908890889060040161289d565b6020604051808303816000875af1925050508015611e41575060408051601f3d908101601f19168201909252611e3e918101906128da565b60015b611e9e573d808015611e6f576040519150601f19603f3d011682016040523d82523d6000602084013e611e74565b606091505b508051600003611e965760405162461bcd60e51b815260040161053190612834565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110fb565b506001949350505050565b60006001611ed084610dc4565b611eda9190612795565b600083815260076020526040902054909150808214611f2d576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611f7290600190612795565b60008381526009602052604081205460088054939450909284908110611f9a57611f9a61273d565b906000526020600020015490508060006008018381548110611fbe57611fbe61273d565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611ff657611ff6612904565b6001900381819060005260206000200160009055905550505050565b600061201d83610dc4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166120ac5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610531565b6000818152600260205260409020546001600160a01b0316156121115760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610531565b61211d600083836119f9565b6001600160a01b0382166000908152600360205260408120805460019290612146908490612782565b9091555050600081815260026020908152604080832080546001600160a01b0319166001600160a01b0387169081179091556019909252808320805460ff19166001179055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120546121ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108a8565b5060006108a8565b600081815260018301602052604081205480156122f057600061222b600183612795565b855490915060009061223f90600190612795565b90508181146122a457600086600001828154811061225f5761225f61273d565b90600052602060002001549050808760000184815481106122825761228261273d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122b5576122b5612904565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108a8565b60009150506108a8565b60005b838110156123155781810151838201526020016122fd565b50506000910152565b600081518084526123368160208601602086016122fa565b601f01601f19169290920160200192915050565b602081526000610e63602083018461231e565b60006020828403121561236f57600080fd5b5035919050565b80356001600160a01b038116811461238d57600080fd5b919050565b600080604083850312156123a557600080fd5b6123ae83612376565b946020939093013593505050565b6000806000606084860312156123d157600080fd5b6123da84612376565b92506123e860208501612376565b9150604084013590509250925092565b60008083601f84011261240a57600080fd5b50813567ffffffffffffffff81111561242257600080fd5b6020830191508360208260051b850101111561243d57600080fd5b9250929050565b60008060008060006060868803121561245c57600080fd5b853567ffffffffffffffff8082111561247457600080fd5b61248089838a016123f8565b90975095506020880135945060408801359150808211156124a057600080fd5b506124ad888289016123f8565b969995985093965092949392505050565b600080604083850312156124d157600080fd5b823591506124e160208401612376565b90509250929050565b6000602082840312156124fc57600080fd5b610e6382612376565b6000806040838503121561251857600080fd5b50508035926020909101359150565b6000806040838503121561253a57600080fd5b61254383612376565b91506020830135801515811461255857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561258f57600080fd5b61259885612376565b93506125a660208601612376565b925060408501359150606085013567ffffffffffffffff808211156125ca57600080fd5b818701915087601f8301126125de57600080fd5b8135818111156125f0576125f0612563565b604051601f8201601f19908116603f0116810190838211818310171561261857612618612563565b816040528281528a602084870101111561263157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561266a57600080fd5b61267384612376565b95602085013595506040909401359392505050565b6000806040838503121561269b57600080fd5b6126a483612376565b91506124e160208401612376565b600181811c908216806126c657607f821691505b6020821081036126e657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161277b5761277b612753565b5060010190565b808201808211156108a8576108a8612753565b818103818111156108a8576108a8612753565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127e08160178501602088016122fa565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128118160288401602088016122fa565b01602801949350505050565b60008161282c5761282c612753565b506000190190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b80820281158282048414176108a8576108a8612753565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128d09083018461231e565b9695505050505050565b6000602082840312156128ec57600080fd5b81516001600160e01b031981168114610e6357600080fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122020d7fac139895ceb6a6d57fb1b2388277c62d2a6cd227d78684f3c1db7944fae64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80635e79824d116100f9578063b88d4fde11610097578063e4fbb60911610071578063e4fbb609146103b4578063e7662243146103db578063e985e9c5146103ee578063fe6d81241461040157600080fd5b8063b88d4fde1461037b578063ca15c8731461038e578063d547741f146103a157600080fd5b80639010d07c116100d35780639010d07c1461032a57806391d148541461033d57806395d89b4114610360578063a22cb4651461036857600080fd5b80635e79824d146102f15780636352211e1461030457806370a082311461031757600080fd5b8063248a9ca3116101665780632f745c59116101405780632f745c59146102a557806336568abe146102b857806342842e0e146102cb5780634f6ccce7146102de57600080fd5b8063248a9ca31461025c578063265423701461027f5780632f2ff15d1461029257600080fd5b806306fdde03146101ae578063081812fc146101cc578063095ea7b3146101f7578063175c4ef81461020c57806318160ddd1461024157806323b872dd14610249575b600080fd5b6101b6610428565b6040516101c3919061234a565b60405180910390f35b6101df6101da36600461235d565b6104bc565b6040516001600160a01b0390911681526020016101c3565b61020a610205366004612392565b610556565b005b6102337f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101c3565b600854610233565b61020a6102573660046123bc565b61066b565b61023361026a36600461235d565b6000908152600a602052604090206001015490565b61020a61028d366004612444565b61069c565b61020a6102a03660046124be565b6107ef565b6102336102b3366004612392565b610815565b61020a6102c63660046124be565b6108ae565b61020a6102d93660046123bc565b61092c565b6102336102ec36600461235d565b610947565b6102336102ff36600461235d565b6109db565b6101df61031236600461235d565b610d4d565b6102336103253660046124ea565b610dc4565b6101df610338366004612505565b610e4b565b61035061034b3660046124be565b610e6a565b60405190151581526020016101c3565b6101b6610e95565b61020a610376366004612527565b610ea7565b61020a610389366004612579565b610eb2565b61023361039c36600461235d565b610eea565b61020a6103af3660046124be565b610f01565b6102337f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b61020a6103e9366004612655565b610f27565b6103506103fc366004612688565b610f5d565b6102337ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b6060600080018054610439906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610465906126b2565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661053a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061056182610d4d565b9050806001600160a01b0316836001600160a01b0316036105ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610531565b336001600160a01b03821614806105ea57506105ea8133610f5d565b61065c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610531565b6106668383610fbe565b505050565b610675338261102c565b6106915760405162461bcd60e51b8152600401610531906126ec565b610666838383611103565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc96106c781336112aa565b846107145760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d70747920617272617900000000000000006044820152606401610531565b8482146107805760405162461bcd60e51b815260206004820152603460248201527f52414952204552433732313a20426f7468206172726179732073686f756c64206044820152730d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60631b6064820152608401610531565b60005b858110156107e6576107d48787838181106107a0576107a061273d565b90506020020160208101906107b591906124ea565b868686858181106107c8576107c861273d565b9050602002013561130e565b806107de81612769565b915050610783565b50505050505050565b6000828152600a602052604090206001015461080b81336112aa565b61066683836117cd565b600061082083610dc4565b82106108825760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610531565b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b6001600160a01b038116331461091e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610531565b6109288282611867565b5050565b61066683838360405180602001604052806000815250610eb2565b600061095260085490565b82106109b55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610531565b60088054839081106109c9576109c961273d565b90600052602060002001549050919050565b600f546000908210610a405760405162461bcd60e51b815260206004820152602860248201527f52414952204552433732312052616e6765733a2052616e676520646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401610531565b600080600f018381548110610a5757610a5761273d565b90600052602060002090600702016040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682018054610abc906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae8906126b2565b8015610b355780601f10610b0a57610100808354040283529160200191610b35565b820191906000526020600020905b815481529060010190602001808311610b1857829003601f168201915b50505091909252505050600084815260186020526040812054600e805493945091928110610b6557610b6561273d565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610bac906126b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd8906126b2565b8015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610c7d57602002820191906000526020600020905b815481526020019060010190808311610c69575b5050509190925250508351919250505b8260200151811015610ce5578151610cc790610caa908390612782565b6000908152600260205260409020546001600160a01b0316151590565b610cd357949350505050565b80610cdd81612769565b915050610c8d565b5060405162461bcd60e51b815260206004820152603660248201527f52414952204552433732313a20546865726520617265206e6f20746f6b656e7360448201527520617661696c61626c6520666f72206d696e74696e6760501b6064820152608401610531565b6000818152600260205260408120546001600160a01b0316806108a85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610531565b60006001600160a01b038216610e2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610531565b506001600160a01b031660009081526003602052604090205490565b6000828152600b60205260408120610e6390836118e2565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060006001018054610439906126b2565b6109283383836118ee565b610ebc338361102c565b610ed85760405162461bcd60e51b8152600401610531906126ec565b610ee4848484846119bc565b50505050565b6000818152600b602052604081206108a8906119ef565b6000828152600a6020526040902060010154610f1d81336112aa565b6106668383611867565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9610f5281336112aa565b610ee484848461130e565b6000610f897f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce83610e6a565b80610e635750506001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ff382610d4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166110a55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610531565b60006110b083610d4d565b9050806001600160a01b0316846001600160a01b031614806110eb5750836001600160a01b03166110e0846104bc565b6001600160a01b0316145b806110fb57506110fb8185610f5d565b949350505050565b826001600160a01b031661111682610d4d565b6001600160a01b03161461117a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610531565b6001600160a01b0382166111dc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610531565b6111e78383836119f9565b6111f2600082610fbe565b6001600160a01b038316600090815260036020526040812080546001929061121b908490612795565b90915550506001600160a01b0382166000908152600360205260408120805460019290611249908490612782565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6112b48282610e6a565b610928576112cc816001600160a01b03166014611b9f565b6112d7836020611b9f565b6040516020016112e89291906127a8565b60408051601f198184030181529082905262461bcd60e51b82526105319160040161234a565b600f5482106113695760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736044820152601d60fa1b6064820152608401610531565b600080600f0183815481106113805761138061273d565b6000918252602080832086845260189091526040832054600e805460079094029092019450909181106113b5576113b561273d565b90600052602060002090600502019050600081600201541161143f5760405162461bcd60e51b815260206004820152603760248201527f52414952204552433732313a2043616e6e6f74206d696e74206d6f726520746f60448201527f6b656e732066726f6d20746869732070726f64756374210000000000000000006064820152608401610531565b60008260030154116114b15760405162461bcd60e51b815260206004820152603560248201527f52414952204552433732313a2043616e6e6f74206d696e74206d6f726520746f6044820152746b656e732066726f6d20746869732072616e67652160581b6064820152608401610531565b600082600201541161152b5760405162461bcd60e51b815260206004820152603d60248201527f52414952204552433732313a204e6f7420616c6c6f77656420746f206d696e7460448201527f206d6f726520746f6b656e732066726f6d20746869732072616e6765210000006064820152608401610531565b81548310801590611540575081600101548311155b61158c5760405162461bcd60e51b815260206004820181905260248201527f52414952204552433732313a20496e76616c696420746f6b656e20696e6465786044820152606401610531565b6115b5858483600001546115a09190612782565b60405180602001604052806000815250611d3b565b6002820154156115d7576002820180549060006115d18361281d565b91905055505b600382015415611650576003820180549060006115f38361281d565b91905055508160030154600003611650576000848152601860205260409081902054905185917fc9ab1ba86a360ece15473f1c6edd6402b347ae87bf9bc3c0172518fd811673999161164791815260200190565b60405180910390a25b6004820154156116c65760048201805490600061166c8361281d565b919050555081600401546000036116c6578154600183015460405186927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e926116bd92918252602082015260400190565b60405180910390a25b60028101541561172b576002810180549060006116e28361281d565b9190505550806002015460000361172b5760008481526018602052604080822054905190917fe213303292163b95c0f90623eb8bc1f2c15b6d888051c10cc662e78204ff042291a25b6000848152601860205260408120548254909160109161174c908790612782565b81526020019081526020016000208190555083600060110160008584600001546117769190612782565b81526020808201929092526040908101600090812093909355868352601882528083205483526016909152902081546117b0908590612782565b815460018101835560009283526020909220909101555050505050565b6117d78282610e6a565b610928576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561180f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206106669082611d6e565b6118718282610e6a565b15610928576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206106669082611d83565b6000610e638383611d98565b816001600160a01b0316836001600160a01b03160361194f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610531565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119c7848484611103565b6119d384848484611dc2565b610ee45760405162461bcd60e51b815260040161053190612834565b60006108a8825490565b6001600160a01b03831615801590611a1957506001600160a01b03821615155b15611ae757611a487f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce336112aa565b600081815260116020526040902054600f80549091908110611a6c57611a6c61273d565b906000526020600020906007020160040154600014611ae75760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a2043616e6e6f74207472616e736665722066726f6044820152706d2061206c6f636b65642072616e67652160781b6064820152608401610531565b6001600160a01b038316611b4257611b3d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b65565b816001600160a01b0316836001600160a01b031614611b6557611b658382611ec3565b6001600160a01b038216611b7c5761066681611f60565b826001600160a01b0316826001600160a01b031614610666576106668282612012565b60606000611bae836002612886565b611bb9906002612782565b67ffffffffffffffff811115611bd157611bd1612563565b6040519080825280601f01601f191660200182016040528015611bfb576020820181803683370190505b509050600360fc1b81600081518110611c1657611c1661273d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c4557611c4561273d565b60200101906001600160f81b031916908160001a9053506000611c69846002612886565b611c74906001612782565b90505b6001811115611cec576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ca857611ca861273d565b1a60f81b828281518110611cbe57611cbe61273d565b60200101906001600160f81b031916908160001a90535060049490941c93611ce58161281d565b9050611c77565b508315610e635760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610531565b611d458383612056565b611d526000848484611dc2565b6106665760405162461bcd60e51b815260040161053190612834565b6000610e63836001600160a01b0384166121b8565b6000610e63836001600160a01b038416612207565b6000826000018281548110611daf57611daf61273d565b9060005260206000200154905092915050565b60006001600160a01b0384163b15611eb857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e0690339089908890889060040161289d565b6020604051808303816000875af1925050508015611e41575060408051601f3d908101601f19168201909252611e3e918101906128da565b60015b611e9e573d808015611e6f576040519150601f19603f3d011682016040523d82523d6000602084013e611e74565b606091505b508051600003611e965760405162461bcd60e51b815260040161053190612834565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110fb565b506001949350505050565b60006001611ed084610dc4565b611eda9190612795565b600083815260076020526040902054909150808214611f2d576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611f7290600190612795565b60008381526009602052604081205460088054939450909284908110611f9a57611f9a61273d565b906000526020600020015490508060006008018381548110611fbe57611fbe61273d565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611ff657611ff6612904565b6001900381819060005260206000200160009055905550505050565b600061201d83610dc4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166120ac5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610531565b6000818152600260205260409020546001600160a01b0316156121115760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610531565b61211d600083836119f9565b6001600160a01b0382166000908152600360205260408120805460019290612146908490612782565b9091555050600081815260026020908152604080832080546001600160a01b0319166001600160a01b0387169081179091556019909252808320805460ff19166001179055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120546121ff575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108a8565b5060006108a8565b600081815260018301602052604081205480156122f057600061222b600183612795565b855490915060009061223f90600190612795565b90508181146122a457600086600001828154811061225f5761225f61273d565b90600052602060002001549050808760000184815481106122825761228261273d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122b5576122b5612904565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108a8565b60009150506108a8565b60005b838110156123155781810151838201526020016122fd565b50506000910152565b600081518084526123368160208601602086016122fa565b601f01601f19169290920160200192915050565b602081526000610e63602083018461231e565b60006020828403121561236f57600080fd5b5035919050565b80356001600160a01b038116811461238d57600080fd5b919050565b600080604083850312156123a557600080fd5b6123ae83612376565b946020939093013593505050565b6000806000606084860312156123d157600080fd5b6123da84612376565b92506123e860208501612376565b9150604084013590509250925092565b60008083601f84011261240a57600080fd5b50813567ffffffffffffffff81111561242257600080fd5b6020830191508360208260051b850101111561243d57600080fd5b9250929050565b60008060008060006060868803121561245c57600080fd5b853567ffffffffffffffff8082111561247457600080fd5b61248089838a016123f8565b90975095506020880135945060408801359150808211156124a057600080fd5b506124ad888289016123f8565b969995985093965092949392505050565b600080604083850312156124d157600080fd5b823591506124e160208401612376565b90509250929050565b6000602082840312156124fc57600080fd5b610e6382612376565b6000806040838503121561251857600080fd5b50508035926020909101359150565b6000806040838503121561253a57600080fd5b61254383612376565b91506020830135801515811461255857600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561258f57600080fd5b61259885612376565b93506125a660208601612376565b925060408501359150606085013567ffffffffffffffff808211156125ca57600080fd5b818701915087601f8301126125de57600080fd5b8135818111156125f0576125f0612563565b604051601f8201601f19908116603f0116810190838211818310171561261857612618612563565b816040528281528a602084870101111561263157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561266a57600080fd5b61267384612376565b95602085013595506040909401359392505050565b6000806040838503121561269b57600080fd5b6126a483612376565b91506124e160208401612376565b600181811c908216806126c657607f821691505b6020821081036126e657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161277b5761277b612753565b5060010190565b808201808211156108a8576108a8612753565b818103818111156108a8576108a8612753565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127e08160178501602088016122fa565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516128118160288401602088016122fa565b01602801949350505050565b60008161282c5761282c612753565b506000190190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b80820281158282048414176108a8576108a8612753565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128d09083018461231e565b9695505050505050565b6000602082840312156128ec57600080fd5b81516001600160e01b031981168114610e6357600080fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122020d7fac139895ceb6a6d57fb1b2388277c62d2a6cd227d78684f3c1db7944fae64736f6c63430008130033",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "approved": "Contains the address of the user approved for move the token",
          "owner": "Contains the address of the owner of the tokens",
          "tokenId": "Contains the id of the transfered token"
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "params": {
          "approved": "Boolean flag to approve or disapprove the operator",
          "operator": "Contains the address of the user approved for move all the tokens",
          "owner": "Contains the address of the owner of the tokens"
        }
      },
      "ProductCompleted(uint256)": {
        "params": {
          "productIndex": "Contains the position where the product was indexed"
        }
      },
      "RangeCompleted(uint256,uint256)": {
        "params": {
          "productIndex": "Contains the indexed location for the product",
          "rangeIndex": "Contains the position where the range was indexed "
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "contains the new status of the role",
          "previousAdminRole": "contains the previous status of the role",
          "role": "Contains the role we want to update"
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to grant the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to revoke the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "params": {
          "from": "Containt the date of begining of the range",
          "rangeIndex": "Contains the position where the range is indexed",
          "to": "Contain the date of end for the range"
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "Contains the sender of the transaction",
          "to": "Contains the destiny address of the transaction",
          "tokenId": "Contains the id of the token to transfer"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "to": "Contains the facet addresses and function selectors",
          "tokenId": "Contains the facet addresses and function selectors"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "Contains the address of the owner of tokens that we want to verify"
        },
        "returns": {
          "_0": "uint256  with the total of the owned tokens"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "Contains the token of the id to be added to the account"
        },
        "returns": {
          "_0": "address which has the authorization to move the token"
        }
      },
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bytes that indicates if an account has or not an admin role"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Contains the indexed position to verify inside the role members list",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "address that indicates the address indexed in that position"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "uint256 that indicates the total accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address thay we want to verify",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bool that indicates if an account has or not a role"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Overrides the OpenZeppelin standard by allowing anyone with the TRADER role to transfer tokens",
        "params": {
          "operator": "Operator of the tokens.",
          "owner": "Owner of the tokens."
        },
        "returns": {
          "_0": "bool \t\tNotify if the operator is approved or not for move all the tokens"
        }
      },
      "mintFromRange(address,uint256,uint256)": {
        "details": "Only an account with the `MINTER` role is available to use this function",
        "params": {
          "indexInRange": "Contains the facet addresses and function selectors",
          "rangeId": "Contains the facet addresses and function selectors",
          "to": "Contains the facet addresses and function selectors"
        }
      },
      "mintFromRangeBatch(address[],uint256,uint256[])": {
        "params": {
          "indexInRange": "Contains array of ranges that will be used to index the minted NFT",
          "rangeId": "Contains the id of the range that we want to use for minting ",
          "to": "Contains the address that will own the minted token"
        }
      },
      "name()": {
        "returns": {
          "_0": "string with the name of the token"
        }
      },
      "nextMintableTokenInRange(uint256)": {
        "params": {
          "rangeIndex": "Contains index of the range that we want to veify"
        },
        "returns": {
          "_0": "uint which containts the immediately next token absent of owner"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "Contains the facet addresses and function selectors"
        },
        "returns": {
          "_0": "address Which contains the owner of the token "
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Currently you can only renounce to your own roles",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role to remove from our account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to revoke"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "Contains the address of the owner of the token",
          "to": "Contains the address of the receiver of the token",
          "tokenId": "Contains the ID of the token to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "_data": "Contains any adicional info or massage",
          "from": "Contains the address of the owner of the token",
          "to": "Contains the address of the receiver of the token",
          "tokenId": "Contains the ID of the token to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "Contains the status of approved or not for the operator",
          "operator": "Contains the address with authorization to move the tokens"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "string with the symbol of the token"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "Contains the index position that we want to check"
        },
        "returns": {
          "_0": "uint256 which contains the token indexed in that position "
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Contains the index of the list of owned token that we want to check",
          "owner": "Contains the address of the owner of tokens that we want to verify"
        },
        "returns": {
          "_0": "uint256 which contains the owned token "
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "uint256 which contains the total amount of tokens "
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "Contains the address of the owner of the token",
          "to": "Contains the address of the receiver of the token",
          "tokenId": "Contains the ID of the token to transfer"
        }
      }
    },
    "title": "This is contract to manage the ERC721 NFT facet ",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "This event stores in the blockchain when an user is approved to move a token"
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "This event stores in the blockchain when a owner is approved to move all the tokens"
      },
      "ProductCompleted(uint256)": {
        "notice": "This event stores in the blockchain when a product is succesfully finished"
      },
      "RangeCompleted(uint256,uint256)": {
        "notice": "This event stores in the blockchain when a range is succesfully established"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when we change an admin role"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we grant a role"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we revoke a role"
      },
      "TradingUnlocked(uint256,uint256,uint256)": {
        "notice": "This event stores in the blockchain when a trading is unlocked"
      },
      "Transfer(address,address,uint256)": {
        "notice": "This event stores in the blockchain when a trasfer is made"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "This function grants permision to an account for move one specific token"
      },
      "balanceOf(address)": {
        "notice": "This function allow us to check the balance of an account"
      },
      "getApproved(uint256)": {
        "notice": "This function allow us to see the address approved for an specific token"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allow us to check the admin role that contains a role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to check the address of an indexed position for the role list"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to check total members that has an selected role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow us to grant a role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "Allow us to check the if and account has a selected role"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Queries if an operator can act on behalf of an owner on all of their tokens"
      },
      "mintFromRange(address,uint256,uint256)": {
        "notice": "This function allow us to mint from a range"
      },
      "mintFromRangeBatch(address[],uint256,uint256[])": {
        "notice": "This function allow us to mint a token form a batch of ranges"
      },
      "name()": {
        "notice": "This function allow us to check the name of the token"
      },
      "nextMintableTokenInRange(uint256)": {
        "notice": "This function returns immediately next token without owner in the range"
      },
      "ownerOf(uint256)": {
        "notice": "This functions allow us to know the address that owns the token"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow us to renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow us to revoke a role to an account"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This function grants permision to an account for move any token"
      },
      "symbol()": {
        "notice": "This function allow us to check the symbol of the token"
      },
      "tokenByIndex(uint256)": {
        "notice": "This function allow us to verify the token indexed in a selected position "
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "This function allow us to check the balance of an account for a specific indexed token "
      },
      "totalSupply()": {
        "notice": "This function allow us to check the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "This function is used to transfer tokens from an account to another "
      }
    },
    "notice": "You can use this contract to administrate ranges, transfers & minting of the tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10262,
        "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage721)10246_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(product)10135_storage)dyn_storage": {
        "base": "t_struct(product)10135_storage",
        "encoding": "dynamic_array",
        "label": "struct product[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(range)10123_storage)dyn_storage": {
        "base": "t_struct(range)10123_storage",
        "encoding": "dynamic_array",
        "label": "struct range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3640_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7394_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3325_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage721)10246_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage721",
        "members": [
          {
            "astId": 10137,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10139,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10143,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10147,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10151,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10157,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 10163,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 10167,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10170,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10174,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10179,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_roles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)"
          },
          {
            "astId": 10184,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)"
          },
          {
            "astId": 10186,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "baseURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 10188,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "factoryAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 10190,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "royaltyFee",
            "offset": 20,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 10194,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "products",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(product)10135_storage)dyn_storage"
          },
          {
            "astId": 10198,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "ranges",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(range)10123_storage)dyn_storage"
          },
          {
            "astId": 10202,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "tokenToProduct",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10206,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "tokenToRange",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10210,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "uniqueTokenURI",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10214,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "productURI",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10218,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "appendTokenIndexToProductURI",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10220,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "appendTokenIndexToBaseURI",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          },
          {
            "astId": 10225,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "tokensByProduct",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 10227,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "contractMetadataURI",
            "offset": 0,
            "slot": "23",
            "type": "t_string_storage"
          },
          {
            "astId": 10231,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeToProduct",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10235,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_minted",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10239,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeURI",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10243,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "appendTokenIndexToRangeURI",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10245,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_metadataExtension",
            "offset": 0,
            "slot": "28",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_struct(RoleData)7394_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 7391,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7393,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3320,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3324,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(product)10135_storage": {
        "encoding": "inplace",
        "label": "struct product",
        "members": [
          {
            "astId": 10125,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "startingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10127,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "endingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10129,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10131,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10134,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(range)10123_storage": {
        "encoding": "inplace",
        "label": "struct range",
        "members": [
          {
            "astId": 10110,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10112,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10114,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10116,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10118,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10120,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10122,
            "contract": "contracts/tokens/RAIR Token Facets/ERC721Facet.sol:ERC721Facet",
            "label": "rangeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}