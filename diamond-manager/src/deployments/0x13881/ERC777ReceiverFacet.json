{
  "address": "0xE0e5B3940C6cbaF30f9E85a11Fd4a97eFc402841",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deploymentIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "deploymentName",
          "type": "string"
        }
      ],
      "name": "DeployedContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fb760cb287f4f3a768f8853d9b17cd832aa5156e3f724a37447b7f70cd7415d",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xE0e5B3940C6cbaF30f9E85a11Fd4a97eFc402841",
    "transactionIndex": 7,
    "gasUsed": "1908977",
    "logsBloom": "0x
    "blockHash": "0x3d8dbb03e824810047dd861a7d79d00adecced1814baf39739f50eb1f16bcf80",
    "transactionHash": "0x0fb760cb287f4f3a768f8853d9b17cd832aa5156e3f724a37447b7f70cd7415d",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 25346216,
        "transactionHash": "0x0fb760cb287f4f3a768f8853d9b17cd832aa5156e3f724a37447b7f70cd7415d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006c8345a961fa70000000000000000000000000000000000000000000000002396ce873a68941d00000000000000000000000000000000000000000000084606ec65da59b85cc300000000000000000000000000000000000000000000000023900652dfd2747600000000000000000000000000000000000000000000084606f32e0eb44e7c6a",
        "logIndex": 28,
        "blockHash": "0x3d8dbb03e824810047dd861a7d79d00adecced1814baf39739f50eb1f16bcf80"
      }
    ],
    "blockNumber": 25346216,
    "cumulativeGasUsed": "2833185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "e3f9ffc5f10aa610d780bf4fca9fbc86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deploymentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deploymentName\",\"type\":\"string\"}],\"name\":\"DeployedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"This is our deployment mechanism for ERC721 contracts!\",\"params\":{\"amount\":\"The number of tokens sent\",\"from\":\"The owner of the tokens\",\"operator\":\"The ERC777 operator calling the send() function\",\"operatorData\":\"bytes sent from the operator\",\"to\":\"The recipient of the tokens\",\"userData\":\"bytes sent from the send call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Function called by an ERC777 when they send tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/facets/ERC777ReceiverFacet.sol\":\"ERC777ReceiverFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Factory/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../common/AccessControl.sol\\\";\\n\\nstruct AppStorage {\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tstring failsafe;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\taddress[] creators;\\n\\tmapping(address => address[]) creatorToContracts;\\n\\tmapping(address => address) contractToCreator;\\n\\tmapping(address => uint) deploymentCostForToken;\\n\\t// Always add new variables at the end of the struct!\\n}\\n\\nlibrary LibAppStorage {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\ncontract AccessControlAppStorageEnumerable is Context, AccessControlEnumerable {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\t\\n\\tAppStorage internal s;\\n\\n\\tfunction hasRole(bytes32 role, address account) public view override returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\tfunction getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal override {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal override {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal override {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xc392e4ea22e9c6778e804fad860e422dbd8d743bd1b6e407ac61a6123aec8bd3\",\"license\":\"GPL-3.0\"},\"contracts/Factory/facets/ERC777ReceiverFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport '../AppStorage.sol';\\nimport '../../tokens/RAIR-ERC721-Diamond.sol';\\n\\ncontract ERC777ReceiverFacet is IERC777Recipient, AccessControlAppStorageEnumerable {\\n\\tbytes32 constant ERC777 = keccak256(\\\"ERC777\\\");\\n\\tbytes32 constant OWNER = keccak256(\\\"OWNER\\\");\\n\\t\\n\\tevent DeployedContract(address deployerAddress, uint deploymentIndex, address deploymentAddress, string deploymentName);\\n\\t\\n\\t/// @notice Function called by an ERC777 when they send tokens\\n\\t/// @dev    This is our deployment mechanism for ERC721 contracts!\\n\\t/// @param operator\\t\\tThe ERC777 operator calling the send() function\\n\\t/// @param from\\t\\t\\tThe owner of the tokens\\n\\t/// @param to\\t\\t\\tThe recipient of the tokens\\n\\t/// @param amount\\t\\tThe number of tokens sent\\n\\t/// @param userData\\t\\tbytes sent from the send call\\n\\t/// @param operatorData\\tbytes sent from the operator\\n\\tfunction tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external onlyRole(ERC777) override {\\n\\t\\tAppStorage storage s = LibAppStorage.diamondStorage();\\n\\t\\trequire(amount >= s.deploymentCostForToken[msg.sender], 'RAIR Factory: not enough RAIR tokens to deploy a contract');\\n\\n\\t\\tif (amount - (s.deploymentCostForToken[msg.sender]) > 0) {\\n\\t\\t\\tIERC777(msg.sender).send(from, amount - (s.deploymentCostForToken[msg.sender]), bytes(\\\"RAIR\\\"));\\n\\t\\t}\\n\\t\\taddress[] storage deploymentsFromOwner = s.creatorToContracts[from];\\n\\t\\t\\n\\t\\tif (deploymentsFromOwner.length == 0) {\\n\\t\\t\\ts.creators.push(from);\\n\\t\\t}\\n\\n\\t\\tRAIR_ERC721_Diamond newToken = new RAIR_ERC721_Diamond(string(userData), from, 30000);\\n\\t\\tdeploymentsFromOwner.push(address(newToken));\\n\\t\\ts.contractToCreator[address(newToken)] = from;\\n\\t\\temit DeployedContract(from, deploymentsFromOwner.length - 1, address(newToken), string(userData));\\n\\t}\\n}\",\"keccak256\":\"0xf84773aa5f9a7556ca5a17b1c08e102fd2862d1cd199aafc5af843ca418d522c\",\"license\":\"GPL-3.0\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n\\nabstract contract AccessControlEnumerable is Context {\\t\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n\\tfunction hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xe479262c4dd61696ceb630e3b066b5832e90189fa44d414020a1290bdeab548f\",\"license\":\"GPL-3.0\"},\"contracts/diamondStandard/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x3d6907bd4c21e2ee4fd01dcd307f8a96b787da23db692d654ca6a813ce29bd64\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-ERC721-Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11; \\n\\n// Interfaces\\n//import \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport \\\"../diamondStandard/interfaces/IDiamondLoupe.sol\\\";\\n\\nimport './RAIR Token Facets/AppStorage.sol';\\n\\n/// @title  RAIR 721 Diamond\\n/// @notice Diamond Contract implementing the bare minimum ERC-721 features\\n/// @author Juan M. Sanchez M.\\ncontract RAIR_ERC721_Diamond is AccessControlAppStorageEnumerable721, ERC165 {\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\t/**\\n\\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n\\t */\\n\\tconstructor(string memory name_, address creatorAddress_, uint16 creatorRoyalty_) {\\n\\t\\ts._name = name_;\\n\\t\\ts._symbol = \\\"RAIR\\\";\\n\\t\\t\\n\\t\\ts.factoryAddress = msg.sender;\\n\\t\\ts.royaltyFee = creatorRoyalty_;\\n\\t\\t_setRoleAdmin(MINTER, CREATOR);\\n\\t\\t_setRoleAdmin(TRADER, CREATOR);\\n\\t\\t_grantRole(CREATOR, creatorAddress_);\\n\\t\\t_grantRole(MINTER, creatorAddress_);\\n\\t\\t_grantRole(TRADER, creatorAddress_);\\n\\t}\\n\\n\\tfunction getFactoryAddress() public view returns (address) {\\n\\t\\treturn s.factoryAddress;\\n\\t}\\n\\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn s.contractMetadataURI;\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n        \\tinterfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n\\tfallback() external {\\n\\t\\taddress facet = IDiamondLoupe(s.factoryAddress).facetAddress(msg.sig);\\n\\t\\tassembly {\\n\\t\\t\\t// copy function selector and any arguments\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\t\\t\\t// execute function call using the facet\\n\\t\\t\\tlet result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n\\t\\t\\t// get any return value\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\t\\t\\t// return any return value or error back to the caller\\n\\t\\t\\tswitch result\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x37e9dff0a46e1b0b66997a042b6ebd07ecacd634b626108db880e6fd4cdd3d94\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121a7806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000925760003560e01c80639010d07c11620000625780639010d07c146200011757806391d148541462000147578063ca15c873146200016f578063d547741f146200018657600080fd5b806223de291462000097578063248a9ca314620000b05780632f2ff15d14620000e957806336568abe1462000100575b600080fd5b620000ae620000a836600462000b63565b6200019d565b005b620000d6620000c136600462000c1b565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b620000ae620000fa36600462000c35565b6200049d565b620000ae6200011136600462000c35565b620004cc565b6200012e6200012836600462000c64565b6200054e565b6040516001600160a01b039091168152602001620000e0565b6200015e6200015836600462000c35565b62000571565b6040519015158152602001620000e0565b620000d66200018036600462000c1b565b6200059a565b620000ae6200019736600462000c35565b620005b3565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230620001ca8133620005dd565b33600090815260066020526040812054871015620002555760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260068201602052604081205462000273908962000c9d565b11156200031157336000818152600683016020526040902054639bd9bbc6908b90620002a0908b62000c9d565b6040805180820182526004808252632920a4a960e11b602083015291516001600160e01b031960e087901b168152620002dc9493920162000d18565b600060405180830381600087803b158015620002f757600080fd5b505af11580156200030c573d6000803e3d6000fd5b505050505b6001600160a01b0389166000908152600482016020526040902080546200036357600382018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038c161790555b600087878c617530604051620003799062000aec565b62000388949392919062000d73565b604051809103906000f080158015620003a5573d6000803e3d6000fd5b50905081819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508a836005016000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e975538b6001848054905062000471919062000c9d565b838b8b6040516200048795949392919062000dae565b60405180910390a1505050505050505050505050565b600082815260208190526040902060010154620004bb8133620005dd565b620004c783836200064c565b505050565b6001600160a01b03811633146200053e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200024c565b6200054a8282620006ea565b5050565b600082815260026020526040812062000568908362000768565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206200056b9062000776565b600082815260208190526040902060010154620005d18133620005dd565b620004c78383620006ea565b620005e9828262000571565b6200054a5762000604816001600160a01b0316601462000781565b6200061183602062000781565b6040516020016200062492919062000def565b60408051601f198184030181529082905262461bcd60e51b82526200024c9160040162000e68565b62000658828262000571565b6200054a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620006903390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600260205260409020620004c790826200093b565b620006f6828262000571565b156200054a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600260205260409020620004c7908262000952565b600062000568838362000969565b60006200056b825490565b606060006200079283600262000e7d565b6200079f90600262000e9f565b67ffffffffffffffff811115620007ba57620007ba62000eba565b6040519080825280601f01601f191660200182016040528015620007e5576020820181803683370190505b509050600360fc1b8160008151811062000803576200080362000ed0565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000835576200083562000ed0565b60200101906001600160f81b031916908160001a90535060006200085b84600262000e7d565b6200086890600162000e9f565b90505b6001811115620008ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620008a057620008a062000ed0565b1a60f81b828281518110620008b957620008b962000ed0565b60200101906001600160f81b031916908160001a90535060049490941c93620008e28162000ee6565b90506200086b565b508315620005685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200024c565b600062000568836001600160a01b03841662000996565b600062000568836001600160a01b038416620009e8565b600082600001828154811062000983576200098362000ed0565b9060005260206000200154905092915050565b6000818152600183016020526040812054620009df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200056b565b5060006200056b565b6000818152600183016020526040812054801562000ae157600062000a0f60018362000c9d565b855490915060009062000a259060019062000c9d565b905081811462000a9157600086600001828154811062000a495762000a4962000ed0565b906000526020600020015490508087600001848154811062000a6f5762000a6f62000ed0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000aa55762000aa562000f00565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200056b565b60009150506200056b565b61125b8062000f1783390190565b80356001600160a01b038116811462000b1257600080fd5b919050565b60008083601f84011262000b2a57600080fd5b50813567ffffffffffffffff81111562000b4357600080fd5b60208301915083602082850101111562000b5c57600080fd5b9250929050565b60008060008060008060008060c0898b03121562000b8057600080fd5b62000b8b8962000afa565b975062000b9b60208a0162000afa565b965062000bab60408a0162000afa565b955060608901359450608089013567ffffffffffffffff8082111562000bd057600080fd5b62000bde8c838d0162000b17565b909650945060a08b013591508082111562000bf857600080fd5b5062000c078b828c0162000b17565b999c989b5096995094979396929594505050565b60006020828403121562000c2e57600080fd5b5035919050565b6000806040838503121562000c4957600080fd5b8235915062000c5b6020840162000afa565b90509250929050565b6000806040838503121562000c7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60008282101562000cb25762000cb262000c87565b500390565b60005b8381101562000cd457818101518382015260200162000cba565b8381111562000ce4576000848401525b50505050565b6000815180845262000d0481602086016020860162000cb7565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600062000d41606083018462000cea565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000d8960608301868862000d4a565b6001600160a01b039490941660208301525061ffff9190911660409091015292915050565b6001600160a01b038681168252602082018690528416604082015260806060820181905260009062000de4908301848662000d4a565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000e2981601785016020880162000cb7565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000e5c81602884016020880162000cb7565b01602801949350505050565b60208152600062000568602083018462000cea565b600081600019048311821515161562000e9a5762000e9a62000c87565b500290565b6000821982111562000eb55762000eb562000c87565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008162000ef85762000ef862000c87565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b506040516200125b3803806200125b8339810160408190526200003491620003d3565b825162000049906000906020860190620002e7565b50604080518082019091526004808252632920a4a960e11b60209092019182526200007791600191620002e7565b50600d80546001600160b01b0319163361ffff60a01b191617600160a01b61ffff841602179055620000c86000805160206200121b833981519152600080516020620011fb8339815191526200014c565b620000f26000805160206200123b833981519152600080516020620011fb8339815191526200014c565b6200010d600080516020620011fb8339815191528362000197565b620001286000805160206200121b8339815191528362000197565b620001436000805160206200123b8339815191528362000197565b50505062000513565b6000828152600a6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001a382826200024a565b62000246576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001dd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b60209081526040909120620002449183906200054762000277821b17901c565b505b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006200028e836001600160a01b03841662000295565b9392505050565b6000818152600183016020526040812054620002de5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000271565b50600062000271565b828054620002f590620004d6565b90600052602060002090601f01602090048101928262000319576000855562000364565b82601f106200033457805160ff191683800117855562000364565b8280016001018555821562000364579182015b828111156200036457825182559160200191906001019062000347565b506200037292915062000376565b5090565b5b8082111562000372576000815560010162000377565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003bb57600080fd5b919050565b805161ffff81168114620003bb57600080fd5b600080600060608486031215620003e957600080fd5b83516001600160401b03808211156200040157600080fd5b818601915086601f8301126200041657600080fd5b8151818111156200042b576200042b6200038d565b604051601f8201601f19908116603f011681019083821181831017156200045657620004566200038d565b816040528281526020935089848487010111156200047357600080fd5b600091505b8282101562000497578482018401518183018501529083019062000478565b82821115620004a95760008484830101525b9650620004bb915050868201620003a3565b93505050620004cd60408501620003c0565b90509250925092565b600181811c90821680620004eb57607f821691505b602082108114156200050d57634e487b7160e01b600052602260045260246000fd5b50919050565b610cd880620005236000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f1461029a578063e4fbb609146102ad578063e8a3d485146102d4578063fe6d8124146102e9576100ea565b8063a217fddf1461026e578063a9c2e36c14610276578063ca15c87314610287576100ea565b80632f2ff15d116100c85780632f2ff15d1461020857806336568abe1461021d5780639010d07c1461023057806391d148541461025b576100ea565b806301ffc9a714610188578063175c4ef8146101b0578063248a9ca3146101e5575b600d546040516366ffd66360e11b8152600080356001600160e01b0319166004830152916001600160a01b03169063cdffacc690602401602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101629190610a20565b90503660008037600080366000845af43d6000803e808015610183573d6000f35b3d6000fd5b61019b610196366004610a3d565b610310565b60405190151581526020015b60405180910390f35b6101d77f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101a7565b6101d76101f3366004610a67565b6000908152600a602052604090206001015490565b61021b610216366004610a80565b61037d565b005b61021b61022b366004610a80565b6103a8565b61024361023e366004610ab0565b61042b565b6040516001600160a01b0390911681526020016101a7565b61019b610269366004610a80565b61044a565b6101d7600081565b600d546001600160a01b0316610243565b6101d7610295366004610a67565b610475565b61021b6102a8366004610a80565b61048c565b6101d77f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102dc6104b2565b6040516101a79190610b02565b6101d77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b148061034157506001600160e01b03198216635b5e139f60e01b145b8061035c57506001600160e01b0319821663780e9d6360e01b145b8061037757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600a6020526040902060010154610399813361055c565b6103a383836105c0565b505050565b6001600160a01b038116331461041d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610427828261065a565b5050565b6000828152600b6020526040812061044390836106d5565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600b60205260408120610377906106e1565b6000828152600a60205260409020600101546104a8813361055c565b6103a3838361065a565b6060600060170180546104c490610b35565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090610b35565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b6000610443836001600160a01b0384166106eb565b610566828261044a565b6104275761057e816001600160a01b0316601461073a565b61058983602061073a565b60405160200161059a929190610b70565b60408051601f198184030181529082905262461bcd60e51b825261041491600401610b02565b6105ca828261044a565b610427576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556106023390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103a39082610547565b610664828261044a565b15610427576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103a390826108d6565b600061044383836108eb565b6000610377825490565b600081815260018301602052604081205461073257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610377565b506000610377565b60606000610749836002610bfb565b610754906002610c1a565b67ffffffffffffffff81111561076c5761076c610c32565b6040519080825280601f01601f191660200182016040528015610796576020820181803683370190505b509050600360fc1b816000815181106107b1576107b1610c48565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107e0576107e0610c48565b60200101906001600160f81b031916908160001a9053506000610804846002610bfb565b61080f906001610c1a565b90505b6001811115610887576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061084357610843610c48565b1a60f81b82828151811061085957610859610c48565b60200101906001600160f81b031916908160001a90535060049490941c9361088081610c5e565b9050610812565b5083156104435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610414565b6000610443836001600160a01b038416610915565b600082600001828154811061090257610902610c48565b9060005260206000200154905092915050565b600081815260018301602052604081205480156109fe576000610939600183610c75565b855490915060009061094d90600190610c75565b90508181146109b257600086600001828154811061096d5761096d610c48565b906000526020600020015490508087600001848154811061099057610990610c48565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c3576109c3610c8c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610377565b6000915050610377565b6001600160a01b0381168114610a1d57600080fd5b50565b600060208284031215610a3257600080fd5b815161044381610a08565b600060208284031215610a4f57600080fd5b81356001600160e01b03198116811461044357600080fd5b600060208284031215610a7957600080fd5b5035919050565b60008060408385031215610a9357600080fd5b823591506020830135610aa581610a08565b809150509250929050565b60008060408385031215610ac357600080fd5b50508035926020909101359150565b60005b83811015610aed578181015183820152602001610ad5565b83811115610afc576000848401525b50505050565b6020815260008251806020840152610b21816040850160208701610ad2565b601f01601f19169190910160400192915050565b600181811c90821680610b4957607f821691505b60208210811415610b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610ba8816017850160208801610ad2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610bd9816028840160208801610ad2565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610c1557610c15610be5565b500290565b60008219821115610c2d57610c2d610be5565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610c6d57610c6d610be5565b506000190190565b600082821015610c8757610c87610be5565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208f104293ffb51b174e39471b392da86726e745808959246a10f1bcc17843b99264736f6c634300080b00333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea2646970667358221220632d1fa936be97ac7dd658100c4d92587029695ec8f41d26596ada9b2e85eb9764736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000925760003560e01c80639010d07c11620000625780639010d07c146200011757806391d148541462000147578063ca15c873146200016f578063d547741f146200018657600080fd5b806223de291462000097578063248a9ca314620000b05780632f2ff15d14620000e957806336568abe1462000100575b600080fd5b620000ae620000a836600462000b63565b6200019d565b005b620000d6620000c136600462000c1b565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b620000ae620000fa36600462000c35565b6200049d565b620000ae6200011136600462000c35565b620004cc565b6200012e6200012836600462000c64565b6200054e565b6040516001600160a01b039091168152602001620000e0565b6200015e6200015836600462000c35565b62000571565b6040519015158152602001620000e0565b620000d66200018036600462000c1b565b6200059a565b620000ae6200019736600462000c35565b620005b3565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230620001ca8133620005dd565b33600090815260066020526040812054871015620002555760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260068201602052604081205462000273908962000c9d565b11156200031157336000818152600683016020526040902054639bd9bbc6908b90620002a0908b62000c9d565b6040805180820182526004808252632920a4a960e11b602083015291516001600160e01b031960e087901b168152620002dc9493920162000d18565b600060405180830381600087803b158015620002f757600080fd5b505af11580156200030c573d6000803e3d6000fd5b505050505b6001600160a01b0389166000908152600482016020526040902080546200036357600382018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038c161790555b600087878c617530604051620003799062000aec565b62000388949392919062000d73565b604051809103906000f080158015620003a5573d6000803e3d6000fd5b50905081819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508a836005016000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e975538b6001848054905062000471919062000c9d565b838b8b6040516200048795949392919062000dae565b60405180910390a1505050505050505050505050565b600082815260208190526040902060010154620004bb8133620005dd565b620004c783836200064c565b505050565b6001600160a01b03811633146200053e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200024c565b6200054a8282620006ea565b5050565b600082815260026020526040812062000568908362000768565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206200056b9062000776565b600082815260208190526040902060010154620005d18133620005dd565b620004c78383620006ea565b620005e9828262000571565b6200054a5762000604816001600160a01b0316601462000781565b6200061183602062000781565b6040516020016200062492919062000def565b60408051601f198184030181529082905262461bcd60e51b82526200024c9160040162000e68565b62000658828262000571565b6200054a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620006903390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600260205260409020620004c790826200093b565b620006f6828262000571565b156200054a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600260205260409020620004c7908262000952565b600062000568838362000969565b60006200056b825490565b606060006200079283600262000e7d565b6200079f90600262000e9f565b67ffffffffffffffff811115620007ba57620007ba62000eba565b6040519080825280601f01601f191660200182016040528015620007e5576020820181803683370190505b509050600360fc1b8160008151811062000803576200080362000ed0565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000835576200083562000ed0565b60200101906001600160f81b031916908160001a90535060006200085b84600262000e7d565b6200086890600162000e9f565b90505b6001811115620008ea576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620008a057620008a062000ed0565b1a60f81b828281518110620008b957620008b962000ed0565b60200101906001600160f81b031916908160001a90535060049490941c93620008e28162000ee6565b90506200086b565b508315620005685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200024c565b600062000568836001600160a01b03841662000996565b600062000568836001600160a01b038416620009e8565b600082600001828154811062000983576200098362000ed0565b9060005260206000200154905092915050565b6000818152600183016020526040812054620009df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200056b565b5060006200056b565b6000818152600183016020526040812054801562000ae157600062000a0f60018362000c9d565b855490915060009062000a259060019062000c9d565b905081811462000a9157600086600001828154811062000a495762000a4962000ed0565b906000526020600020015490508087600001848154811062000a6f5762000a6f62000ed0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000aa55762000aa562000f00565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200056b565b60009150506200056b565b61125b8062000f1783390190565b80356001600160a01b038116811462000b1257600080fd5b919050565b60008083601f84011262000b2a57600080fd5b50813567ffffffffffffffff81111562000b4357600080fd5b60208301915083602082850101111562000b5c57600080fd5b9250929050565b60008060008060008060008060c0898b03121562000b8057600080fd5b62000b8b8962000afa565b975062000b9b60208a0162000afa565b965062000bab60408a0162000afa565b955060608901359450608089013567ffffffffffffffff8082111562000bd057600080fd5b62000bde8c838d0162000b17565b909650945060a08b013591508082111562000bf857600080fd5b5062000c078b828c0162000b17565b999c989b5096995094979396929594505050565b60006020828403121562000c2e57600080fd5b5035919050565b6000806040838503121562000c4957600080fd5b8235915062000c5b6020840162000afa565b90509250929050565b6000806040838503121562000c7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60008282101562000cb25762000cb262000c87565b500390565b60005b8381101562000cd457818101518382015260200162000cba565b8381111562000ce4576000848401525b50505050565b6000815180845262000d0481602086016020860162000cb7565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600062000d41606083018462000cea565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000d8960608301868862000d4a565b6001600160a01b039490941660208301525061ffff9190911660409091015292915050565b6001600160a01b038681168252602082018690528416604082015260806060820181905260009062000de4908301848662000d4a565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000e2981601785016020880162000cb7565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000e5c81602884016020880162000cb7565b01602801949350505050565b60208152600062000568602083018462000cea565b600081600019048311821515161562000e9a5762000e9a62000c87565b500290565b6000821982111562000eb55762000eb562000c87565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008162000ef85762000ef862000c87565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b506040516200125b3803806200125b8339810160408190526200003491620003d3565b825162000049906000906020860190620002e7565b50604080518082019091526004808252632920a4a960e11b60209092019182526200007791600191620002e7565b50600d80546001600160b01b0319163361ffff60a01b191617600160a01b61ffff841602179055620000c86000805160206200121b833981519152600080516020620011fb8339815191526200014c565b620000f26000805160206200123b833981519152600080516020620011fb8339815191526200014c565b6200010d600080516020620011fb8339815191528362000197565b620001286000805160206200121b8339815191528362000197565b620001436000805160206200123b8339815191528362000197565b50505062000513565b6000828152600a6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001a382826200024a565b62000246576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001dd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b60209081526040909120620002449183906200054762000277821b17901c565b505b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b60006200028e836001600160a01b03841662000295565b9392505050565b6000818152600183016020526040812054620002de5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000271565b50600062000271565b828054620002f590620004d6565b90600052602060002090601f01602090048101928262000319576000855562000364565b82601f106200033457805160ff191683800117855562000364565b8280016001018555821562000364579182015b828111156200036457825182559160200191906001019062000347565b506200037292915062000376565b5090565b5b8082111562000372576000815560010162000377565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003bb57600080fd5b919050565b805161ffff81168114620003bb57600080fd5b600080600060608486031215620003e957600080fd5b83516001600160401b03808211156200040157600080fd5b818601915086601f8301126200041657600080fd5b8151818111156200042b576200042b6200038d565b604051601f8201601f19908116603f011681019083821181831017156200045657620004566200038d565b816040528281526020935089848487010111156200047357600080fd5b600091505b8282101562000497578482018401518183018501529083019062000478565b82821115620004a95760008484830101525b9650620004bb915050868201620003a3565b93505050620004cd60408501620003c0565b90509250925092565b600181811c90821680620004eb57607f821691505b602082108114156200050d57634e487b7160e01b600052602260045260246000fd5b50919050565b610cd880620005236000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f1461029a578063e4fbb609146102ad578063e8a3d485146102d4578063fe6d8124146102e9576100ea565b8063a217fddf1461026e578063a9c2e36c14610276578063ca15c87314610287576100ea565b80632f2ff15d116100c85780632f2ff15d1461020857806336568abe1461021d5780639010d07c1461023057806391d148541461025b576100ea565b806301ffc9a714610188578063175c4ef8146101b0578063248a9ca3146101e5575b600d546040516366ffd66360e11b8152600080356001600160e01b0319166004830152916001600160a01b03169063cdffacc690602401602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101629190610a20565b90503660008037600080366000845af43d6000803e808015610183573d6000f35b3d6000fd5b61019b610196366004610a3d565b610310565b60405190151581526020015b60405180910390f35b6101d77f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101a7565b6101d76101f3366004610a67565b6000908152600a602052604090206001015490565b61021b610216366004610a80565b61037d565b005b61021b61022b366004610a80565b6103a8565b61024361023e366004610ab0565b61042b565b6040516001600160a01b0390911681526020016101a7565b61019b610269366004610a80565b61044a565b6101d7600081565b600d546001600160a01b0316610243565b6101d7610295366004610a67565b610475565b61021b6102a8366004610a80565b61048c565b6101d77f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102dc6104b2565b6040516101a79190610b02565b6101d77ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b148061034157506001600160e01b03198216635b5e139f60e01b145b8061035c57506001600160e01b0319821663780e9d6360e01b145b8061037757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600a6020526040902060010154610399813361055c565b6103a383836105c0565b505050565b6001600160a01b038116331461041d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610427828261065a565b5050565b6000828152600b6020526040812061044390836106d5565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600b60205260408120610377906106e1565b6000828152600a60205260409020600101546104a8813361055c565b6103a3838361065a565b6060600060170180546104c490610b35565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090610b35565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b6000610443836001600160a01b0384166106eb565b610566828261044a565b6104275761057e816001600160a01b0316601461073a565b61058983602061073a565b60405160200161059a929190610b70565b60408051601f198184030181529082905262461bcd60e51b825261041491600401610b02565b6105ca828261044a565b610427576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556106023390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103a39082610547565b610664828261044a565b15610427576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103a390826108d6565b600061044383836108eb565b6000610377825490565b600081815260018301602052604081205461073257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610377565b506000610377565b60606000610749836002610bfb565b610754906002610c1a565b67ffffffffffffffff81111561076c5761076c610c32565b6040519080825280601f01601f191660200182016040528015610796576020820181803683370190505b509050600360fc1b816000815181106107b1576107b1610c48565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107e0576107e0610c48565b60200101906001600160f81b031916908160001a9053506000610804846002610bfb565b61080f906001610c1a565b90505b6001811115610887576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061084357610843610c48565b1a60f81b82828151811061085957610859610c48565b60200101906001600160f81b031916908160001a90535060049490941c9361088081610c5e565b9050610812565b5083156104435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610414565b6000610443836001600160a01b038416610915565b600082600001828154811061090257610902610c48565b9060005260206000200154905092915050565b600081815260018301602052604081205480156109fe576000610939600183610c75565b855490915060009061094d90600190610c75565b90508181146109b257600086600001828154811061096d5761096d610c48565b906000526020600020015490508087600001848154811061099057610990610c48565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c3576109c3610c8c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610377565b6000915050610377565b6001600160a01b0381168114610a1d57600080fd5b50565b600060208284031215610a3257600080fd5b815161044381610a08565b600060208284031215610a4f57600080fd5b81356001600160e01b03198116811461044357600080fd5b600060208284031215610a7957600080fd5b5035919050565b60008060408385031215610a9357600080fd5b823591506020830135610aa581610a08565b809150509250929050565b60008060408385031215610ac357600080fd5b50508035926020909101359150565b60005b83811015610aed578181015183820152602001610ad5565b83811115610afc576000848401525b50505050565b6020815260008251806020840152610b21816040850160208701610ad2565b601f01601f19169190910160400192915050565b600181811c90821680610b4957607f821691505b60208210811415610b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610ba8816017850160208801610ad2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610bd9816028840160208801610ad2565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610c1557610c15610be5565b500290565b60008219821115610c2d57610c2d610be5565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610c6d57610c6d610be5565b506000190190565b600082821015610c8757610c87610be5565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208f104293ffb51b174e39471b392da86726e745808959246a10f1bcc17843b99264736f6c634300080b00333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea2646970667358221220632d1fa936be97ac7dd658100c4d92587029695ec8f41d26596ada9b2e85eb9764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "This is our deployment mechanism for ERC721 contracts!",
        "params": {
          "amount": "The number of tokens sent",
          "from": "The owner of the tokens",
          "operator": "The ERC777 operator calling the send() function",
          "operatorData": "bytes sent from the operator",
          "to": "The recipient of the tokens",
          "userData": "bytes sent from the send call"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "Function called by an ERC777 when they send tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3004,
        "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)2984_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2662_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2662_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)5715_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)5715_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2662_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2661,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2361_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)2984_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 2960,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)5715_storage)"
          },
          {
            "astId": 2962,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "failsafe",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2967,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2662_storage)"
          },
          {
            "astId": 2970,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "creators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2975,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "creatorToContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 2979,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "contractToCreator",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 2983,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "deploymentCostForToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)5715_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 5712,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5714,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2361_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2356,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2360,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}