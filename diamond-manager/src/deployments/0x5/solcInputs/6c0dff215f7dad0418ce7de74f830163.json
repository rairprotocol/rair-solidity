{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/Marketplace/AppStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.19; \n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nstruct feeSplits {\n\taddress recipient;\n\tbool canBeContract;\n\tuint percentage;\n}\n\nstruct mintingOffer {\n\taddress erc721Address;\n\taddress nodeAddress;\n\tuint rangeIndex;\n\tfeeSplits[] fees;\n\tbool visible;\n}\n\nstruct RoleData {\n\tmapping(address => bool) members;\n\tbytes32 adminRole;\n}\n\nstruct AppStorage {\n\t// Access Control Enumerable\n\tmapping(bytes32 => RoleData) _roles;\n\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\n\t// App\n\tuint16 decimals;\n\tuint decimalPow;\n\tuint nodeFee;\n\tuint treasuryFee;\n\taddress treasuryAddress;\n\tmintingOffer[] mintingOffers;\n\tmapping(address => mapping(uint => uint)) addressToRangeOffer;\n\tmapping(address => uint[]) addressToOffers;\n\t// Always add new fields at the end of the struct, that way the structure can be upgraded\n}\n\nlibrary LibAppStorage {\n\tfunction diamondStorage() internal pure\treturns (AppStorage storage ds) {\n\t\tassembly {\n\t\t\tds.slot := 0\n\t\t}\n\t}\n}\n\n/// @title \tThis is contract to manage the access control of the app market\n/// @notice You can use this contract to administrate roles of the app market\n/// @dev \tNotice that this contract is inheriting from Context\ncontract AccessControlAppStorageEnumerableMarket is Context {\n\tusing EnumerableSet for EnumerableSet.AddressSet;\n\t\n\tAppStorage internal s;\n\n\t/// @notice This event stores in the blockchain when we change an admin role\n    /// @param  role Contains the role we want to update\n    /// @param  previousAdminRole contains the previous status of the role\n\t/// @param  newAdminRole contains the new status of the role\n\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\t/// @notice This event stores in the blockchain when we grant a role\n    /// @param  role Contains the role we want to update\n    /// @param  account contains the address that we want to grant the role\n\t/// @param  sender contains the address that is changing the role of the account\n\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\t/// @notice This event stores in the blockchain when we revoke a role\n    /// @param  role Contains the role we want to update\n    /// @param  account contains the address that we want to revoke the role\n\t/// @param  sender contains the address that is changing the role of the account\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n\t/// @notice Allow us to renounce to a role\n\t/// @dev \tCurrently you can only renounce to your own roles\n\t/// @param \trole Contains the role to remove from our account\n\t/// @param \taccount Contains the account that has the role we want to update\n    function renounceRole(bytes32 role, address account) public {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n        _revokeRole(role, account);\n    }\n\n\t/// @notice Allow us to grant a role to an account\n\t/// @dev \tThis function is only available to an account with an Admin role\n\t/// @param \trole Contains the role that we want to grant\n\t/// @param \taccount Contains the account that has the role we want to update\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n\t/// @notice Allow us to revoke a role to an account\n\t/// @dev \tThis function is only available to an account with an Admin role\n\t/// @param \trole Contains the role that we want to revoke\n\t/// @param \taccount Contains the account that has the role we want to update\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n\t/// @notice Allow us to check the if and account has a selected role\n\t/// @param \trole Contains the role that we want to verify\n\t/// @param \taccount Contains the account address thay we want to verify\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n\t/// @notice Allow us to check the if and account has a selected role\n\t/// @param \trole Contains the role that we want to verify\n\t/// @param \taccount Contains the account address thay we want to verify\n\t/// @return bool that indicates if an account has or not a role\n\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\n\t\treturn s._roles[role].members[account];\n\t}\n\n\t/// @notice Allow us to check the admin role that contains a role\n\t/// @param \trole Contains the role that we want to verify\n\t/// @return bytes that indicates if an account has or not an admin role\n\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\n\t\treturn s._roles[role].adminRole;\n\t}\n\n\t/// @notice Allow us to check the address of an indexed position for the role list\n\t/// @param \trole Contains the role that we want to verify\n\t/// @param \tindex Contains the indexed position to verify inside the role members list\n\t/// @return address that indicates the address indexed in that position\n\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n\t\treturn s._roleMembers[role].at(index);\n\t}\n\t\n\t/// @notice Allow us to check total members that has an selected role\n\t/// @param \trole Contains the role that we want to verify\n\t/// @return uint256 that indicates the total accounts with that role\n\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\n\t\treturn s._roleMembers[role].length();\n\t}\n\n\t/// @notice Allow us to modify a rol and set it as an admin role\n\t/// @param \trole Contains the role that we want to modify\n\t/// @param \tadminRole Contains the admin role that we want to set\n\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\n\t\tbytes32 previousAdminRole = getRoleAdmin(role);\n\t\ts._roles[role].adminRole = adminRole;\n\t\temit RoleAdminChanged(role, previousAdminRole, adminRole);\n\t}\n\n\t/// @notice Allow us to grant a role to an account\n\t/// @param \trole Contains the role that we want to grant\n\t/// @param \taccount Contains the account that has the role we want to update\n\tfunction _grantRole(bytes32 role, address account) internal {\n\t\tif (!hasRole(role, account)) {\n\t\t\ts._roles[role].members[account] = true;\n\t\t\temit RoleGranted(role, account, _msgSender());\n\t\t\ts._roleMembers[role].add(account);\n\t\t}\n\t}\n\n\t/// @notice Allow us to revoke a role to an account\n\t/// @param \trole Contains the role that we want to revoke\n\t/// @param \taccount Contains the account that has the role we want to update\n\tfunction _revokeRole(bytes32 role, address account) internal {\n\t\tif (hasRole(role, account)) {\n\t\t\ts._roles[role].members[account] = false;\n\t\t\temit RoleRevoked(role, account, _msgSender());\n\t\t\ts._roleMembers[role].remove(account);\n\t\t}\n\t}\n}"
    },
    "contracts/Marketplace/Facets/MintingOffersFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.19; \n\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\nimport '../AppStorage.sol';\n\ninterface IRAIR721 {\n\tstruct range {\n\t\tuint rangeStart;\n\t\tuint rangeEnd;\n\t\tuint tokensAllowed;\n\t\tuint mintableTokens;\n\t\tuint lockedTokens;\n\t\tuint rangePrice;\n\t\tstring rangeName;\n\t}\n\n\t/// @notice This function returns the information of the selected range\n\t/// @param rangeId \t\t  Contains the specific range that we want to check\n\t/// @return data\t\t  Contains the data inside the range\n\t/// @return productIndex  Contains the index of the products for the range\n\tfunction rangeInfo(uint rangeId) external view returns(range memory data, uint productIndex);\n\t/// @notice This function allow us to mint token from a specific range \n\t/// @param to Contains the address that will mint the token\n    /// @param rangeId Contains the range identification where we want to mint\n\t/// @param indexInRange Contains the index inside the range that we want to use for minting \n\tfunction mintFromRange(address to, uint rangeId, uint indexInRange) external;\n}\n\n\n/// @title  RAIR Diamond - Minting offers facet\n/// @notice Facet in charge of the minting offers in the RAIR Marketplace\n/// @author Juan M. Sanchez M.\n/// @dev \tNotice that this contract is inheriting from AccessControlAppStorageEnumerableMarket\ncontract MintingOffersFacet is AccessControlAppStorageEnumerableMarket {\n\n\t/// @notice This event stores in the blockchain when a Minting Offer is Added\n    /// @param  erc721Address Contains the address of the erc721\n    /// @param  rangeIndex contains the id of the minted token\n\t/// @param  rangeName contains the name of the range where the token is\n\t/// @param  price Contains the price of the offer fot the token\n    /// @param  feeSplitsLength contains the previous status of the offer\n    /// @param  feeSplitsLength Contains the visibility of the offer\n\t/// @param  offerIndex contains the new status of the offer\n\tevent AddedMintingOffer(address erc721Address, uint rangeIndex, string rangeName, uint price, uint feeSplitsLength, bool visible, uint offerIndex);\n\tevent UpdatedMintingOffer(address erc721Address, uint rangeIndex, uint feeSplitsLength, bool visible, uint offerIndex);\n\t\n\tevent MintedToken(address erc721Address, uint rangeIndex, uint tokenIndex, address buyer);\n\n\tmodifier checkMinterRole(address erc721Address) {\n\t\trequire(hasMinterRole(erc721Address), \"Minter Marketplace: This Marketplace isn't a Minter!\");\n\t\t_;\n\t}\n\n\tmodifier mintingOfferExists(uint offerIndex_) {\n\t\trequire(s.mintingOffers.length > offerIndex_, \"Minting Marketplace: Minting Offer doesn't exist\");\n\t\t_;\n\t}\n\n\tmodifier offerDoesntExist(address erc721Address, uint rangeIndex) {\n\t\trequire(s.addressToRangeOffer[erc721Address][rangeIndex] == 0, \"Minter Marketplace: Range already has an offer\");\n\t\tif (s.addressToRangeOffer[erc721Address][rangeIndex] == 0 && s.mintingOffers.length > 0) {\n\t\t\trequire(s.mintingOffers[0].erc721Address != erc721Address ||\n\t\t\t\t\t\ts.mintingOffers[0].rangeIndex != rangeIndex,\n\t\t\t\t\t\t\t\"Minter Marketplace: Range already has an offer\");\n\t\t}\n\t\t_;\n\t}\n\n\tfunction _checkCreatorRole(address erc721Address) internal view returns (bool) {\n\t\trequire(\n\t\t\tIAccessControl(erc721Address).hasRole(bytes32(0x00), address(msg.sender)) ||\n\t\t\tIAccessControl(erc721Address).hasRole(bytes32(keccak256(\"CREATOR\")), address(msg.sender)),\n\t\t\t\"Minter Marketplace: Sender isn't the creator of the contract!\");\n\t\treturn true;\n\t}\n\n\t/// @notice Utility function to verify that the recipient of a custom splits ISN'T a contract\n\t/// @dev \tThis isn't a foolproof function, a contract running code in it's constructor has a code size of 0\n\t/// @param \taddr \tAddress to verify\n\t/// @return bool that indicates if the address is a contract or not\n\tfunction isContract(address addr) internal view returns (bool) {\n\t\tuint size;\n\t\tassembly { size := extcodesize(addr) }\n\t\treturn size > 0;\n\t}\n\n\t/// @notice Utility function to verify if the Marketplace has a MINTER role\n\t/// @param  erc721Address \tAddress of the ERC721 token with AccessControl\n\t/// @return bool that indicates if the marketplace has a `MINTER` role or not\n\tfunction hasMinterRole(address erc721Address) internal view returns (bool) {\n\t\treturn IAccessControl(erc721Address).hasRole(bytes32(keccak256(\"MINTER\")), address(this));\n\t}\n\n\t/// @notice Returns the number of offers for a specific ERC721 address\n\t/// @param  erc721Address \tAddress of the ERC721 token\n\t/// @return uint with the total of offers\n\tfunction getOffersCountForAddress(address erc721Address) public view returns (uint) {\n\t\treturn s.addressToOffers[erc721Address].length;\n\t}\n\n\t/// @notice Returns the number of all the minting offers \n\t/// @return uint with the total of offers\n\tfunction getTotalOfferCount() public view returns (uint) {\n\t\treturn s.mintingOffers.length;\n\t}\n\n\t/// @notice This functions show us the information of an offer asociated to a marketplace\n\t/// @param erc721Address Contains the facet addresses and function selectors\n    /// @param rangeIndex Contains the facet addresses and function selectors\n\t/// @return offerIndex Show us the indexed position of the offer\n\t/// @return mintOffer Show us the information about the minting offer \n\t/// @return rangeData Show us the data about the selected range\n\t/// @return productIndex Show us the indexed position for the product inside the range\n\tfunction getOfferInfoForAddress(address erc721Address, uint rangeIndex) public view returns (uint offerIndex, mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\n\t\tmintingOffer memory selectedOffer = s.mintingOffers[s.addressToOffers[erc721Address][rangeIndex]];\n\t\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\n\t\tofferIndex = s.addressToOffers[erc721Address][rangeIndex];\n\t\tmintOffer = selectedOffer;\n\t}\n\n\t/// @notice This function show us the information of an selected minting offer\n\t/// @param \t\tofferIndex Contains the facet addresses and function selectors\n\t/// @return \tmintOffer Show us the information about the minting offer \n\t/// @return \trangeData Show us the data about the selected range\n\t/// @return \tproductIndex Show us the indexed position for the product inside the range\n\tfunction getOfferInfo(uint offerIndex) public view returns (mintingOffer memory mintOffer, IRAIR721.range memory rangeData, uint productIndex) {\n\t\tmintingOffer memory selectedOffer = s.mintingOffers[offerIndex];\n\t\tmintOffer = selectedOffer;\n\t\t(rangeData, productIndex) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\n\t}\n\n\t/// @notice This function allow us to add a new minting offer\n\t/// @param erc721Address_ Contains the address of the minter marketplace contract\n\t/// @param rangeIndex_ Contains the index location of the range where the offer will be placed\n\t/// @param splits Contains the shares and address to pay when the offer is succesfull \n\t/// @param visible_ Contains a boolean to set if the offer is public or not \n\t/// @param nodeAddress_ Contains address of the node where the offer was placed\n\tfunction addMintingOffer(\n\t\taddress erc721Address_,\n\t\tuint rangeIndex_,\n\t\tfeeSplits[] calldata splits,\n\t\tbool visible_,\n\t\taddress nodeAddress_\n\t) external {\n\t\t_addMintingOffer(erc721Address_, rangeIndex_, splits, visible_, nodeAddress_);\n\t}\n\n\t/// @notice This function allow us to create a group of minting offers in a single call\n\t/// @param erc721Address_ Contains the address of the minter marketplace contract\n\t/// @param rangeIndexes Contains the collection of ranges where the offer will be placed\n\t/// @param splits Contains the shares and address to pay when the offer is succesfull \n\t/// @param visibility Contains a collection of booleans that set the offer as public or not \n\t/// @param nodeAddress_ Contains address of the node where the offer was placed\n\tfunction addMintingOfferBatch(\n\t\taddress erc721Address_,\n\t\tuint[] calldata rangeIndexes,\n\t\tfeeSplits[][] calldata splits,\n\t\tbool[] calldata visibility,\n\t\taddress nodeAddress_\n\t) external {\n\t\trequire(rangeIndexes.length > 0, \"Minter Marketplace: No offers sent!\");\n\t\trequire(rangeIndexes.length == visibility.length && splits.length == visibility.length, \"Minter Marketplace: Arrays should have the same length\");\n\t\tfor (uint i = 0; i < rangeIndexes.length; i++) {\n\t\t\t_addMintingOffer(erc721Address_, rangeIndexes[i], splits[i], visibility[i], nodeAddress_);\n\t\t}\n\t}\n\n\t/// @notice This function allow us to add a new minting offer\n\t/// @dev \tThis function requires that account has the role of `CREATOR`\n\t/// @dev \tThis function requires that the marketplace is defined as MINTER\n\t/// @dev \tThis function requires that the range is available to create a new offer\n\t/// @param erc721Address_ Contains the address of the minter marketplace contract\n\t/// @param rangeIndex_ Contains the index location of the range where the offer will be placed\n\t/// @param splits Contains the shares and address to pay when the offer is succesfull \n\t/// @param visible_ Contains a boolean to set if the offer is public or not \n\t/// @param nodeAddress_ Contains address of the node where the offer was placed\n\tfunction _addMintingOffer(\n\t\taddress erc721Address_,\n\t\tuint rangeIndex_,\n\t\tfeeSplits[] memory splits,\n\t\tbool visible_,\n\t\taddress nodeAddress_\n\t) internal checkMinterRole(erc721Address_) offerDoesntExist(erc721Address_, rangeIndex_) {\n\t\t_checkCreatorRole(erc721Address_);\n\t\tmintingOffer storage newOffer = s.mintingOffers.push();\n\t\t(IRAIR721.range memory rangeData,) = IRAIR721(erc721Address_).rangeInfo(rangeIndex_);\n\t\trequire(rangeData.mintableTokens > 0, \"Minter Marketplace: Offer doesn't have tokens available!\");\n\t\tnewOffer.erc721Address = erc721Address_;\n\t\tnewOffer.nodeAddress = nodeAddress_;\n\t\tnewOffer.rangeIndex = rangeIndex_;\n\t\tnewOffer.visible = visible_;\n\t\tif (rangeData.rangePrice > 0) {\n\t\t\tuint totalPercentage = s.nodeFee + s.treasuryFee;\n\t\t\tuint totalFunds = rangeData.rangePrice * totalPercentage / (100 * s.decimalPow);\n\t\t\tfor (uint i = 0; i < splits.length; i++) {\n\t\t\t\trequire(splits[i].canBeContract || !isContract(splits[i].recipient), \"Minter Marketplace: Contracts can't be recipients of the splits\");\n\t\t\t\tuint splitForPercentage = rangeData.rangePrice * splits[i].percentage / (100 * s.decimalPow);\n\t\t\t\trequire(\n\t\t\t\t\tsplitForPercentage > 0,\n\t\t\t\t\t\"Minter Marketplace: A percentage on the array will result in an empty transfer\"\n\t\t\t\t);\n\t\t\t\ttotalFunds += splitForPercentage;\n\t\t\t\ttotalPercentage += splits[i].percentage;\n\t\t\t\tnewOffer.fees.push(splits[i]);\n\t\t\t}\n\t\t\trequire(totalPercentage == (100 * s.decimalPow), \"Minter Marketplace: Fees don't add up to 100%\");\n\t\t\trequire(totalFunds == rangeData.rangePrice, \"Minter Marketplace: Current fee configuration will result in missing funds\");\n\t\t}\n\t\ts.addressToOffers[erc721Address_].push(s.mintingOffers.length - 1);\n\t\ts.addressToRangeOffer[erc721Address_][rangeIndex_] = s.mintingOffers.length - 1;\n\t\temit AddedMintingOffer(erc721Address_, rangeIndex_, rangeData.rangeName, rangeData.rangePrice, splits.length, visible_, s.mintingOffers.length - 1);\n\t}\n\n\t/// @notice This function allow us to update the parameters of a minting offers\n\t/// @dev \tThis function requires that the mintingOfferExists points to an valid offer  \n\t/// @param \tmintingOfferId_  Contains index location of the minting offer\n\t/// @param \tsplits_ \t\t Contains the shares and address to pay when the offer is succesfull \n\t/// @param \tvisible_    \t Contains a boolean to set if the offer is public or not \n\tfunction updateMintingOffer (\n\t\tuint mintingOfferId_,\n\t\tfeeSplits[] memory splits_,\n\t\tbool visible_\n\t) external mintingOfferExists(mintingOfferId_) {\n\t\t_updateMintingOffer(mintingOfferId_, splits_, visible_);\n\t}\n\n\t/// @notice This function allow us to update the parameters of a minting offers \n\t/// @param \tmintingOfferId_  Contains index location of the minting offer\n\t/// @param \tsplits_ \t\t Contains the shares and address to pay when the offer is succesfull \n\t/// @param \tvisible_         Contains a boolean to set if the offer is public or not \n\tfunction _updateMintingOffer (\n\t\tuint mintingOfferId_,\n\t\tfeeSplits[] memory splits_,\n\t\tbool visible_\n\t) internal {\n\t\tmintingOffer storage selectedOffer = s.mintingOffers[mintingOfferId_];\n\t\t_checkCreatorRole(selectedOffer.erc721Address);\n\t\trequire(\n\t\t\thasMinterRole(selectedOffer.erc721Address),\n\t\t\t\"Minter Marketplace: This Marketplace isn't a Minter!\"\n\t\t);\n\t\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\n\t\tuint totalPercentage = s.nodeFee + s.treasuryFee;\n\t\tdelete selectedOffer.fees;\n\t\tfor (uint i = 0; i < splits_.length; i++) {\n\t\t\trequire(splits_[i].canBeContract || !isContract(splits_[i].recipient), \"Minter Marketplace: Contracts can't be recipients of fees\");\n\t\t\trequire(\n\t\t\t\trangeData.rangePrice * splits_[i].percentage / (100 * s.decimalPow) > 0,\n\t\t\t\t\"Minter Marketplace: A percentage on the array will result in an empty transfer\"\n\t\t\t);\n\t\t\ttotalPercentage += splits_[i].percentage;\n\t\t\tselectedOffer.fees.push(splits_[i]);\n\t\t}\n\t\trequire(totalPercentage == (100 * s.decimalPow), \"Minter Marketplace: Fees don't add up to 100%\");\n\t\tselectedOffer.visible = visible_;\n\t\temit UpdatedMintingOffer(\n\t\t\tselectedOffer.erc721Address,\n\t\t\tselectedOffer.rangeIndex,\n\t\t\tselectedOffer.fees.length,\n\t\t\tselectedOffer.visible,\n\t\t\tmintingOfferId_\n\t\t);\n\t}\n\n\t/// @notice This function allow us to buy a minting offers\n\t/// @dev \tThis function requires that the mintingOfferExists points to an valid offer  \n\t/// @param \tofferIndex_  Contains index location of the offer\n\t/// @param \ttokenIndex_  Contains the id of the tokens that we want to mint\n\tfunction buyMintingOffer(uint offerIndex_, uint tokenIndex_) public mintingOfferExists(offerIndex_) payable {\n\t\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\n\t\trequire(selectedOffer.visible, \"Minter Marketplace: This offer is not ready to be sold!\");\n\t\trequire(hasMinterRole(selectedOffer.erc721Address), \"Minter Marketplace: This Marketplace isn't a Minter!\");\n\t\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\n\t\tif (rangeData.rangePrice > 0) {\n\t\t\trequire(rangeData.rangePrice <= msg.value, \"Minter Marketplace: Insufficient funds!\");\n\t\t\tif (msg.value - rangeData.rangePrice > 0) {\n\t\t\t\tpayable(msg.sender).transfer(msg.value - rangeData.rangePrice);\n\t\t\t}\n\t\t\tuint totalTransferred = rangeData.rangePrice * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\n\t\t\tpayable(selectedOffer.nodeAddress).transfer(rangeData.rangePrice * s.nodeFee / (100 * s.decimalPow));\n\t\t\tpayable(s.treasuryAddress).transfer(rangeData.rangePrice * s.treasuryFee / (100 * s.decimalPow));\n\t\t\tuint auxMoneyToBeSent;\n\t\t\tfor (uint i = 0; i < selectedOffer.fees.length; i++) {\n\t\t\t\tauxMoneyToBeSent = rangeData.rangePrice * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\n\t\t\t\ttotalTransferred += auxMoneyToBeSent;\n\t\t\t\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\n\t\t\t}\n\t\t\trequire(totalTransferred == rangeData.rangePrice, \"Minter Marketplace: Error transferring funds!\");\n\t\t}\n\t\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndex_, msg.sender);\n\t}\n\n\t/// @notice This function allow us to buy a collection of minting offers\n\t/// @dev \tThis function requires that the mintingOfferExists points to an valid offer  \n\t/// @param \tofferIndex_  \tContains index location of the offer\n\t/// @param \ttokenIndexes\tContains the collection of tokens that we want to mint\n\t/// @param \trecipients \t\tContains the collection of addresses that will receive\n\tfunction buyMintingOfferBatch(\n\t\tuint offerIndex_,\n\t\tuint[] calldata tokenIndexes,\n\t\taddress[] calldata recipients\t\t\n\t) external mintingOfferExists(offerIndex_) payable {\n\t\trequire(tokenIndexes.length > 0, \"Minter Marketplace: No tokens sent!\");\n\t\trequire(tokenIndexes.length == recipients.length, \"Minter Marketplace: Tokens and Addresses should have the same length\");\n\t\tmintingOffer storage selectedOffer = s.mintingOffers[offerIndex_];\n\t\trequire(selectedOffer.visible, \"Minter Marketplace: This offer is not ready to be sold!\");\n\t\trequire(hasMinterRole(selectedOffer.erc721Address), \"Minter Marketplace: This Marketplace isn't a Minter!\");\n\t\t(IRAIR721.range memory rangeData,) = IRAIR721(selectedOffer.erc721Address).rangeInfo(selectedOffer.rangeIndex);\n\t\tuint i;\n\t\tif (rangeData.rangePrice > 0) {\n\t\t\trequire((rangeData.rangePrice * tokenIndexes.length) <= msg.value, \"Minter Marketplace: Insufficient funds!\");\n\t\t\tif (msg.value - (rangeData.rangePrice * tokenIndexes.length) > 0) {\n\t\t\t\tpayable(msg.sender).transfer(msg.value - (rangeData.rangePrice * tokenIndexes.length));\n\t\t\t}\n\t\t\tuint totalTransferred = (rangeData.rangePrice * tokenIndexes.length) * (s.nodeFee + s.treasuryFee) / (100 * s.decimalPow);\n\t\t\tpayable(selectedOffer.nodeAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.nodeFee / (100 * s.decimalPow));\n\t\t\tpayable(s.treasuryAddress).transfer((rangeData.rangePrice * tokenIndexes.length) * s.treasuryFee / (100 * s.decimalPow));\n\t\t\tuint auxMoneyToBeSent;\n\t\t\tfor (i = 0; i < selectedOffer.fees.length; i++) {\n\t\t\t\tauxMoneyToBeSent = (rangeData.rangePrice * tokenIndexes.length) * selectedOffer.fees[i].percentage / (100 * s.decimalPow);\n\t\t\t\ttotalTransferred += auxMoneyToBeSent;\n\t\t\t\tpayable(selectedOffer.fees[i].recipient).transfer(auxMoneyToBeSent);\n\t\t\t}\n\t\t\trequire(totalTransferred == (rangeData.rangePrice * tokenIndexes.length), \"Minter Marketplace: Error transferring funds!\");\n\t\t}\n\t\tfor (i = 0; i < tokenIndexes.length; i++) {\n\t\t\t_buyMintingOffer(selectedOffer.erc721Address, selectedOffer.rangeIndex, tokenIndexes[i], recipients[i]);\n\t\t}\n\t}\n\n\t/// @notice This function is in charge of buying a desired minting offer \n\t/// @param erc721Address  Contains the address where the offer is located\n\t/// @param rangeIndex\t  Contains the index location of the range where the token is \n\t/// @param tokenIndex  \t  Contains the index location of the token to buy \n\t/// @param recipient   \t  Contains the address of the recipient of the token\n\tfunction _buyMintingOffer(address erc721Address, uint rangeIndex, uint tokenIndex, address recipient) internal {\n\t\tIRAIR721(erc721Address).mintFromRange(recipient, rangeIndex, tokenIndex);\n\t\temit MintedToken(erc721Address, rangeIndex, tokenIndex, recipient);\n\t}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}